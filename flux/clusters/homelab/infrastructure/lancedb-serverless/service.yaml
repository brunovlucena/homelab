---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: lancedb-serverless
  namespace: lancedb-serverless
  labels:
    app: lancedb-serverless
    app.kubernetes.io/name: lancedb-serverless
    app.kubernetes.io/component: serverless
  annotations:
    # Enable Prometheus scraping
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  template:
    metadata:
      labels:
        app: lancedb-serverless
      annotations:
        # Auto-scaling configuration
        autoscaling.knative.dev/min-scale: "0"
        autoscaling.knative.dev/max-scale: "10"
        autoscaling.knative.dev/target: "100"
        # Scale to zero after 60 seconds of inactivity
        autoscaling.knative.dev/scale-to-zero-pod-retention-period: "60s"
    spec:
      containerConcurrency: 10
      containers:
      - name: lancedb-serverless
        # üê≥ Replace with your actual image
        image: ghcr.io/brunolucena/lancedb-serverless:latest
        ports:
        - name: http1
          containerPort: 8080
          protocol: TCP
        env:
        # MinIO Configuration
        - name: AWS_ENDPOINT
          value: "http://minio-service.minio.svc.cluster.local:9000"
        - name: AWS_DEFAULT_REGION
          value: "us-east-1"
        - name: LANCEDB_BUCKET
          value: "lancedb"
        - name: LOG_LEVEL
          value: "INFO"
        - name: PORT
          value: "8080"
        # Credentials from secret
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: lancedb-serverless-secret
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: lancedb-serverless-secret
              key: AWS_SECRET_ACCESS_KEY
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        # Probes
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

