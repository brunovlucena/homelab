# =============================================================================
# üóÑÔ∏è DATABASE MIGRATION JOB (Runs on Helm Install/Upgrade)
# =============================================================================
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "bruno-site.fullname" . }}-db-migrate-{{ .Release.Revision }}
  labels:
    {{- include "bruno-site.labels" . | nindent 4 }}
    app.kubernetes.io/component: db-migrate
  annotations:
    # üéØ Helm hooks: runs before install/upgrade
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation
    # üîÑ This annotation ensures the job runs when migrations ConfigMap changes
    "configmap/checksum": {{ .Files.Get "files/migrations/001_complete_schema.sql" | sha256sum }}
spec:
  backoffLimit: 5
  template:
    metadata:
      labels:
        {{- include "bruno-site.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: db-migrate
    spec:
      restartPolicy: Never
      containers:
        - name: db-migrate
          image: postgres:16-alpine
          command:
            - /bin/sh
            - -c
            - |
              echo "üóÑÔ∏è Waiting for PostgreSQL to be ready..."
              until pg_isready -h {{ include "bruno-site.fullname" . }}-postgres -p {{ .Values.database.port }} -U {{ .Values.database.user }}; do
                echo "‚è≥ PostgreSQL is not ready yet. Waiting..."
                sleep 10
              done
              echo "‚úÖ PostgreSQL is ready. Running migrations..."
              
              # Check if database exists, create if not
              echo "üîç Checking if database exists..."
              psql -h {{ include "bruno-site.fullname" . }}-postgres -p {{ .Values.database.port }} -U {{ .Values.database.user }} -d postgres -c "SELECT 1 FROM pg_database WHERE datname='{{ .Values.database.name }}';" | grep -q 1 || psql -h {{ include "bruno-site.fullname" . }}-postgres -p {{ .Values.database.port }} -U {{ .Values.database.user }} -d postgres -c "CREATE DATABASE {{ .Values.database.name }};"
              
              # Calculate migration checksum
              MIGRATION_CHECKSUM=$(sha256sum /migrations/001_complete_schema.sql | cut -d' ' -f1)
              MIGRATION_VERSION="001_complete_schema"
              
              # Check if migration was already applied with same checksum
              echo "üîç Checking if migration $MIGRATION_VERSION was already applied..."
              if psql -h {{ include "bruno-site.fullname" . }}-postgres -p {{ .Values.database.port }} -U {{ .Values.database.user }} -d {{ .Values.database.name }} -t -c "SELECT migration_applied('$MIGRATION_VERSION', '$MIGRATION_CHECKSUM');" | grep -q t; then
                echo "‚úÖ Migration $MIGRATION_VERSION already applied with same checksum. Skipping."
              else
                echo "üîÑ Running migration $MIGRATION_VERSION with checksum $MIGRATION_CHECKSUM..."
                psql -h {{ include "bruno-site.fullname" . }}-postgres -p {{ .Values.database.port }} -U {{ .Values.database.user }} -d {{ .Values.database.name }} -f /migrations/001_complete_schema.sql
                
                # Mark migration as applied
                echo "üìù Marking migration as applied..."
                psql -h {{ include "bruno-site.fullname" . }}-postgres -p {{ .Values.database.port }} -U {{ .Values.database.user }} -d {{ .Values.database.name }} -c "SELECT mark_migration_applied('$MIGRATION_VERSION', '$MIGRATION_CHECKSUM', 'Complete database schema and initial data for Bruno site system');"
                
                echo "‚úÖ Migration $MIGRATION_VERSION completed successfully!"
              fi
              
              echo "‚úÖ Database migration completed successfully!"
          env:
            - name: PGPASSWORD
              {{- if .Values.database.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.existingSecret }}
                  key: POSTGRES_PASSWORD
              {{- else if .Values.secrets.databasePassword }}
              value: {{ .Values.secrets.databasePassword | quote }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "bruno-site.name" . }}-db-secret
                  key: POSTGRES_PASSWORD
              {{- end }}
          volumeMounts:
            - name: migrations
              mountPath: /migrations
      volumes:
        - name: migrations
          configMap:
            name: {{ include "bruno-site.fullname" . }}-migrations