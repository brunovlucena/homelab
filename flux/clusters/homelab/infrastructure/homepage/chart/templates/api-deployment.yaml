apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "bruno-site.fullname" . }}-api
  labels:
    {{- include "bruno-site.labels" . | nindent 4 }}
    app.kubernetes.io/component: api
  annotations:
    "helm.sh/hook-weight": "20"
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      {{- include "bruno-site.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: api
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "bruno-site.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: api
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "bruno-site.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}-api
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.api.image.repository }}:{{ .Values.api.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.api.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: POSTGRES_HOST
              value: "{{ .Values.database.host }}"
            - name: POSTGRES_PORT
              value: "{{ .Values.database.port }}"
            - name: POSTGRES_USER
              value: "{{ .Values.database.user }}"
            - name: POSTGRES_DB
              value: "{{ .Values.database.name }}"
            - name: POSTGRES_PASSWORD
              {{- if .Values.database.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.existingSecret }}
                  key: password
              {{- else if .Values.secrets.databasePassword }}
              value: {{ .Values.secrets.databasePassword | quote }}
              {{- else }}
              value: "secure-password"
              {{- end }}
            - name: REDIS_URL
              value: "redis://{{ .Values.redis.host }}:{{ .Values.redis.port }}"
            - name: REDIS_PASSWORD
              {{- if .Values.redis.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.redis.existingSecret }}
                  key: password
              {{- else if .Values.secrets.redisPassword }}
              value: {{ .Values.secrets.redisPassword | quote }}
              {{- else }}
              value: ""
              {{- end }}
            - name: PORT
              value: "8080"
            - name: CORS_ORIGIN
              value: "{{ .Values.corsOrigin }}"
            - name: ENABLE_METRICS_AUTH
              value: {{ .Values.monitoring.metrics.basicAuth.enabled | quote }}
            {{- if .Values.minio.enabled }}
            - name: MINIO_ENDPOINT
              value: "{{ .Values.minio.endpoint }}"
            - name: MINIO_ACCESS_KEY
              {{- if .Values.minio.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.minio.existingSecret }}
                  key: accessKey
              {{- else if .Values.secrets.minioAccessKey }}
              value: {{ .Values.secrets.minioAccessKey | quote }}
              {{- else }}
              value: "minioadmin"
              {{- end }}
            - name: MINIO_SECRET_KEY
              {{- if .Values.minio.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.minio.existingSecret }}
                  key: secretKey
              {{- else if .Values.secrets.minioSecretKey }}
              value: {{ .Values.secrets.minioSecretKey | quote }}
              {{- else }}
              value: "minioadmin"
              {{- end }}
            - name: MINIO_USE_SSL
              value: "{{ .Values.minio.useSSL }}"
            - name: MINIO_BUCKET
              value: "{{ .Values.minio.bucket }}"
            {{- end }}
            {{- if .Values.cloudflare.enabled }}
            - name: CLOUDFLARE_ENABLED
              {{- if .Values.cloudflare.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.cloudflare.existingSecret }}
                  key: enabled
              {{- else }}
              value: {{ .Values.cloudflare.enabled | quote }}
              {{- end }}
            - name: CLOUDFLARE_ZONE_ID
              {{- if .Values.cloudflare.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.cloudflare.existingSecret }}
                  key: zone-id
              {{- else }}
              value: {{ .Values.cloudflare.zoneId | quote }}
              {{- end }}
            - name: CLOUDFLARE_API_TOKEN
              {{- if .Values.cloudflare.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.cloudflare.existingSecret }}
                  key: api-token
              {{- else }}
              value: {{ .Values.cloudflare.apiToken | quote }}
              {{- end }}
            - name: CLOUDFLARE_DOMAIN
              {{- if .Values.cloudflare.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.cloudflare.existingSecret }}
                  key: domain
              {{- else }}
              value: {{ .Values.cloudflare.domain | quote }}
              {{- end }}
            - name: CLOUDFLARE_CACHE_TTL
              {{- if .Values.cloudflare.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.cloudflare.existingSecret }}
                  key: cache-ttl
              {{- else }}
              value: {{ .Values.cloudflare.cacheTtl | quote }}
              {{- end }}
            {{- end }}
            {{- if .Values.agentSRE.enabled }}
            - name: AGENT_SRE_URL
              value: "{{ .Values.agentSRE.url }}"
            {{- end }}
            {{- if .Values.jamie.enabled }}
            - name: JAMIE_URL
              value: "{{ .Values.jamie.url }}"
            {{- end }}
            # OpenTelemetry → Alloy → Logfire
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "alloy.alloy.svc.cluster.local:4317"
            - name: LOGFIRE_TOKEN
              valueFrom:
                secretKeyRef:
                  name: bruno-site-secrets
                  key: LOGFIRE_TOKEN
                  optional: true
          startupProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 15
            timeoutSeconds: 15
            failureThreshold: 60
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          resources:
            {{- toYaml .Values.api.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
