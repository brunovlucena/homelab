import require$$1$1 from 'process';
import require$$0$1 from 'tls';
import require$$0 from 'fs';
import require$$0$2 from 'os';
import require$$0$3 from 'net';
import require$$0$4 from 'events';
import require$$1$2 from 'stream';
import require$$1$3 from 'path';
import require$$0$5 from 'http2';
import require$$3$1 from 'http';
import require$$6$1 from 'url';
import require$$1$4 from 'dns';
import require$$0$6 from 'zlib';
import require$$1$5 from 'util';

// Copyright 2008 Google Inc.  All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
// * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Code generated by the Protocol Buffer compiler is owned by the owner
// of the input file used when generating it.  This code is not
// standalone and requires a support library to be linked with it.  This
// support library is itself covered by the above license.
/**
 * Read a 64 bit varint as two JS numbers.
 *
 * Returns tuple:
 * [0]: low bits
 * [1]: high bits
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175
 */
function varint64read() {
    let lowBits = 0;
    let highBits = 0;
    for (let shift = 0; shift < 28; shift += 7) {
        let b = this.buf[this.pos++];
        lowBits |= (b & 0x7f) << shift;
        if ((b & 0x80) == 0) {
            this.assertBounds();
            return [lowBits, highBits];
        }
    }
    let middleByte = this.buf[this.pos++];
    // last four bits of the first 32 bit number
    lowBits |= (middleByte & 0x0f) << 28;
    // 3 upper bits are part of the next 32 bit number
    highBits = (middleByte & 0x70) >> 4;
    if ((middleByte & 0x80) == 0) {
        this.assertBounds();
        return [lowBits, highBits];
    }
    for (let shift = 3; shift <= 31; shift += 7) {
        let b = this.buf[this.pos++];
        highBits |= (b & 0x7f) << shift;
        if ((b & 0x80) == 0) {
            this.assertBounds();
            return [lowBits, highBits];
        }
    }
    throw new Error("invalid varint");
}
/**
 * Write a 64 bit varint, given as two JS numbers, to the given bytes array.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344
 */
function varint64write(lo, hi, bytes) {
    for (let i = 0; i < 28; i = i + 7) {
        const shift = lo >>> i;
        const hasNext = !(shift >>> 7 == 0 && hi == 0);
        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;
        bytes.push(byte);
        if (!hasNext) {
            return;
        }
    }
    const splitBits = ((lo >>> 28) & 0x0f) | ((hi & 0x07) << 4);
    const hasMoreBits = !(hi >> 3 == 0);
    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xff);
    if (!hasMoreBits) {
        return;
    }
    for (let i = 3; i < 31; i = i + 7) {
        const shift = hi >>> i;
        const hasNext = !(shift >>> 7 == 0);
        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;
        bytes.push(byte);
        if (!hasNext) {
            return;
        }
    }
    bytes.push((hi >>> 31) & 0x01);
}
// constants for binary math
const TWO_PWR_32_DBL = 0x100000000;
/**
 * Parse decimal string of 64 bit integer value as two JS numbers.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10
 */
function int64FromString(dec) {
    // Check for minus sign.
    const minus = dec[0] === "-";
    if (minus) {
        dec = dec.slice(1);
    }
    // Work 6 decimal digits at a time, acting like we're converting base 1e6
    // digits to binary. This is safe to do with floating point math because
    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.
    const base = 1e6;
    let lowBits = 0;
    let highBits = 0;
    function add1e6digit(begin, end) {
        // Note: Number('') is 0.
        const digit1e6 = Number(dec.slice(begin, end));
        highBits *= base;
        lowBits = lowBits * base + digit1e6;
        // Carry bits from lowBits to
        if (lowBits >= TWO_PWR_32_DBL) {
            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);
            lowBits = lowBits % TWO_PWR_32_DBL;
        }
    }
    add1e6digit(-24, -18);
    add1e6digit(-18, -12);
    add1e6digit(-12, -6);
    add1e6digit(-6);
    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);
}
/**
 * Losslessly converts a 64-bit signed integer in 32:32 split representation
 * into a decimal string.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10
 */
function int64ToString(lo, hi) {
    let bits = newBits(lo, hi);
    // If we're treating the input as a signed value and the high bit is set, do
    // a manual two's complement conversion before the decimal conversion.
    const negative = bits.hi & 0x80000000;
    if (negative) {
        bits = negate(bits.lo, bits.hi);
    }
    const result = uInt64ToString(bits.lo, bits.hi);
    return negative ? "-" + result : result;
}
/**
 * Losslessly converts a 64-bit unsigned integer in 32:32 split representation
 * into a decimal string.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10
 */
function uInt64ToString(lo, hi) {
    ({ lo, hi } = toUnsigned(lo, hi));
    // Skip the expensive conversion if the number is small enough to use the
    // built-in conversions.
    // Number.MAX_SAFE_INTEGER = 0x001FFFFF FFFFFFFF, thus any number with
    // highBits <= 0x1FFFFF can be safely expressed with a double and retain
    // integer precision.
    // Proven by: Number.isSafeInteger(0x1FFFFF * 2**32 + 0xFFFFFFFF) == true.
    if (hi <= 0x1fffff) {
        return String(TWO_PWR_32_DBL * hi + lo);
    }
    // What this code is doing is essentially converting the input number from
    // base-2 to base-1e7, which allows us to represent the 64-bit range with
    // only 3 (very large) digits. Those digits are then trivial to convert to
    // a base-10 string.
    // The magic numbers used here are -
    // 2^24 = 16777216 = (1,6777216) in base-1e7.
    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.
    // Split 32:32 representation into 16:24:24 representation so our
    // intermediate digits don't overflow.
    const low = lo & 0xffffff;
    const mid = ((lo >>> 24) | (hi << 8)) & 0xffffff;
    const high = (hi >> 16) & 0xffff;
    // Assemble our three base-1e7 digits, ignoring carries. The maximum
    // value in a digit at this step is representable as a 48-bit integer, which
    // can be stored in a 64-bit floating point number.
    let digitA = low + mid * 6777216 + high * 6710656;
    let digitB = mid + high * 8147497;
    let digitC = high * 2;
    // Apply carries from A to B and from B to C.
    const base = 10000000;
    if (digitA >= base) {
        digitB += Math.floor(digitA / base);
        digitA %= base;
    }
    if (digitB >= base) {
        digitC += Math.floor(digitB / base);
        digitB %= base;
    }
    // If digitC is 0, then we should have returned in the trivial code path
    // at the top for non-safe integers. Given this, we can assume both digitB
    // and digitA need leading zeros.
    return (digitC.toString() +
        decimalFrom1e7WithLeadingZeros(digitB) +
        decimalFrom1e7WithLeadingZeros(digitA));
}
function toUnsigned(lo, hi) {
    return { lo: lo >>> 0, hi: hi >>> 0 };
}
function newBits(lo, hi) {
    return { lo: lo | 0, hi: hi | 0 };
}
/**
 * Returns two's compliment negation of input.
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers
 */
function negate(lowBits, highBits) {
    highBits = ~highBits;
    if (lowBits) {
        lowBits = ~lowBits + 1;
    }
    else {
        // If lowBits is 0, then bitwise-not is 0xFFFFFFFF,
        // adding 1 to that, results in 0x100000000, which leaves
        // the low bits 0x0 and simply adds one to the high bits.
        highBits += 1;
    }
    return newBits(lowBits, highBits);
}
/**
 * Returns decimal representation of digit1e7 with leading zeros.
 */
const decimalFrom1e7WithLeadingZeros = (digit1e7) => {
    const partial = String(digit1e7);
    return "0000000".slice(partial.length) + partial;
};
/**
 * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144
 */
function varint32write(value, bytes) {
    if (value >= 0) {
        // write value as varint 32
        while (value > 0x7f) {
            bytes.push((value & 0x7f) | 0x80);
            value = value >>> 7;
        }
        bytes.push(value);
    }
    else {
        for (let i = 0; i < 9; i++) {
            bytes.push((value & 127) | 128);
            value = value >> 7;
        }
        bytes.push(1);
    }
}
/**
 * Read an unsigned 32 bit varint.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220
 */
function varint32read() {
    let b = this.buf[this.pos++];
    let result = b & 0x7f;
    if ((b & 0x80) == 0) {
        this.assertBounds();
        return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 0x7f) << 7;
    if ((b & 0x80) == 0) {
        this.assertBounds();
        return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 0x7f) << 14;
    if ((b & 0x80) == 0) {
        this.assertBounds();
        return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 0x7f) << 21;
    if ((b & 0x80) == 0) {
        this.assertBounds();
        return result;
    }
    // Extract only last 4 bits
    b = this.buf[this.pos++];
    result |= (b & 0x0f) << 28;
    for (let readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++)
        b = this.buf[this.pos++];
    if ((b & 0x80) != 0)
        throw new Error("invalid varint");
    this.assertBounds();
    // Result can have 32 bits, convert it to unsigned
    return result >>> 0;
}

// Copyright 2021-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * Int64Support for the current environment.
 */
const protoInt64 = /*@__PURE__*/ makeInt64Support();
function makeInt64Support() {
    const dv = new DataView(new ArrayBuffer(8));
    // note that Safari 14 implements BigInt, but not the DataView methods
    const ok = typeof BigInt === "function" &&
        typeof dv.getBigInt64 === "function" &&
        typeof dv.getBigUint64 === "function" &&
        typeof dv.setBigInt64 === "function" &&
        typeof dv.setBigUint64 === "function" &&
        (typeof process != "object" ||
            typeof process.env != "object" ||
            process.env.BUF_BIGINT_DISABLE !== "1");
    if (ok) {
        const MIN = BigInt("-9223372036854775808");
        const MAX = BigInt("9223372036854775807");
        const UMIN = BigInt("0");
        const UMAX = BigInt("18446744073709551615");
        return {
            zero: BigInt(0),
            supported: true,
            parse(value) {
                const bi = typeof value == "bigint" ? value : BigInt(value);
                if (bi > MAX || bi < MIN) {
                    throw new Error(`invalid int64: ${value}`);
                }
                return bi;
            },
            uParse(value) {
                const bi = typeof value == "bigint" ? value : BigInt(value);
                if (bi > UMAX || bi < UMIN) {
                    throw new Error(`invalid uint64: ${value}`);
                }
                return bi;
            },
            enc(value) {
                dv.setBigInt64(0, this.parse(value), true);
                return {
                    lo: dv.getInt32(0, true),
                    hi: dv.getInt32(4, true),
                };
            },
            uEnc(value) {
                dv.setBigInt64(0, this.uParse(value), true);
                return {
                    lo: dv.getInt32(0, true),
                    hi: dv.getInt32(4, true),
                };
            },
            dec(lo, hi) {
                dv.setInt32(0, lo, true);
                dv.setInt32(4, hi, true);
                return dv.getBigInt64(0, true);
            },
            uDec(lo, hi) {
                dv.setInt32(0, lo, true);
                dv.setInt32(4, hi, true);
                return dv.getBigUint64(0, true);
            },
        };
    }
    return {
        zero: "0",
        supported: false,
        parse(value) {
            if (typeof value != "string") {
                value = value.toString();
            }
            assertInt64String(value);
            return value;
        },
        uParse(value) {
            if (typeof value != "string") {
                value = value.toString();
            }
            assertUInt64String(value);
            return value;
        },
        enc(value) {
            if (typeof value != "string") {
                value = value.toString();
            }
            assertInt64String(value);
            return int64FromString(value);
        },
        uEnc(value) {
            if (typeof value != "string") {
                value = value.toString();
            }
            assertUInt64String(value);
            return int64FromString(value);
        },
        dec(lo, hi) {
            return int64ToString(lo, hi);
        },
        uDec(lo, hi) {
            return uInt64ToString(lo, hi);
        },
    };
}
function assertInt64String(value) {
    if (!/^-?[0-9]+$/.test(value)) {
        throw new Error("invalid int64: " + value);
    }
}
function assertUInt64String(value) {
    if (!/^[0-9]+$/.test(value)) {
        throw new Error("invalid uint64: " + value);
    }
}

// Copyright 2021-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
const symbol = Symbol.for("@bufbuild/protobuf/text-encoding");
function getTextEncoding() {
    if (globalThis[symbol] == undefined) {
        const te = new globalThis.TextEncoder();
        const td = new globalThis.TextDecoder();
        globalThis[symbol] = {
            encodeUtf8(text) {
                return te.encode(text);
            },
            decodeUtf8(bytes) {
                return td.decode(bytes);
            },
            checkUtf8(text) {
                try {
                    encodeURIComponent(text);
                    return true;
                }
                catch (_) {
                    return false;
                }
            },
        };
    }
    return globalThis[symbol];
}

// Copyright 2021-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * Protobuf binary format wire types.
 *
 * A wire type provides just enough information to find the length of the
 * following value.
 *
 * See https://developers.google.com/protocol-buffers/docs/encoding#structure
 */
var WireType;
(function (WireType) {
    /**
     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum
     */
    WireType[WireType["Varint"] = 0] = "Varint";
    /**
     * Used for fixed64, sfixed64, double.
     * Always 8 bytes with little-endian byte order.
     */
    WireType[WireType["Bit64"] = 1] = "Bit64";
    /**
     * Used for string, bytes, embedded messages, packed repeated fields
     *
     * Only repeated numeric types (types which use the varint, 32-bit,
     * or 64-bit wire types) can be packed. In proto3, such fields are
     * packed by default.
     */
    WireType[WireType["LengthDelimited"] = 2] = "LengthDelimited";
    /**
     * Start of a tag-delimited aggregate, such as a proto2 group, or a message
     * in editions with message_encoding = DELIMITED.
     */
    WireType[WireType["StartGroup"] = 3] = "StartGroup";
    /**
     * End of a tag-delimited aggregate.
     */
    WireType[WireType["EndGroup"] = 4] = "EndGroup";
    /**
     * Used for fixed32, sfixed32, float.
     * Always 4 bytes with little-endian byte order.
     */
    WireType[WireType["Bit32"] = 5] = "Bit32";
})(WireType || (WireType = {}));
/**
 * Maximum value for a 32-bit floating point value (Protobuf FLOAT).
 */
const FLOAT32_MAX = 3.4028234663852886e38;
/**
 * Minimum value for a 32-bit floating point value (Protobuf FLOAT).
 */
const FLOAT32_MIN = -3.4028234663852886e38;
/**
 * Maximum value for an unsigned 32-bit integer (Protobuf UINT32, FIXED32).
 */
const UINT32_MAX = 0xffffffff;
/**
 * Maximum value for a signed 32-bit integer (Protobuf INT32, SFIXED32, SINT32).
 */
const INT32_MAX = 0x7fffffff;
/**
 * Minimum value for a signed 32-bit integer (Protobuf INT32, SFIXED32, SINT32).
 */
const INT32_MIN = -0x80000000;
class BinaryWriter {
    constructor(encodeUtf8 = getTextEncoding().encodeUtf8) {
        this.encodeUtf8 = encodeUtf8;
        /**
         * Previous fork states.
         */
        this.stack = [];
        this.chunks = [];
        this.buf = [];
    }
    /**
     * Return all bytes written and reset this writer.
     */
    finish() {
        if (this.buf.length) {
            this.chunks.push(new Uint8Array(this.buf)); // flush the buffer
            this.buf = [];
        }
        let len = 0;
        for (let i = 0; i < this.chunks.length; i++)
            len += this.chunks[i].length;
        let bytes = new Uint8Array(len);
        let offset = 0;
        for (let i = 0; i < this.chunks.length; i++) {
            bytes.set(this.chunks[i], offset);
            offset += this.chunks[i].length;
        }
        this.chunks = [];
        return bytes;
    }
    /**
     * Start a new fork for length-delimited data like a message
     * or a packed repeated field.
     *
     * Must be joined later with `join()`.
     */
    fork() {
        this.stack.push({ chunks: this.chunks, buf: this.buf });
        this.chunks = [];
        this.buf = [];
        return this;
    }
    /**
     * Join the last fork. Write its length and bytes, then
     * return to the previous state.
     */
    join() {
        // get chunk of fork
        let chunk = this.finish();
        // restore previous state
        let prev = this.stack.pop();
        if (!prev)
            throw new Error("invalid state, fork stack empty");
        this.chunks = prev.chunks;
        this.buf = prev.buf;
        // write length of chunk as varint
        this.uint32(chunk.byteLength);
        return this.raw(chunk);
    }
    /**
     * Writes a tag (field number and wire type).
     *
     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.
     *
     * Generated code should compute the tag ahead of time and call `uint32()`.
     */
    tag(fieldNo, type) {
        return this.uint32(((fieldNo << 3) | type) >>> 0);
    }
    /**
     * Write a chunk of raw bytes.
     */
    raw(chunk) {
        if (this.buf.length) {
            this.chunks.push(new Uint8Array(this.buf));
            this.buf = [];
        }
        this.chunks.push(chunk);
        return this;
    }
    /**
     * Write a `uint32` value, an unsigned 32 bit varint.
     */
    uint32(value) {
        assertUInt32(value);
        // write value as varint 32, inlined for speed
        while (value > 0x7f) {
            this.buf.push((value & 0x7f) | 0x80);
            value = value >>> 7;
        }
        this.buf.push(value);
        return this;
    }
    /**
     * Write a `int32` value, a signed 32 bit varint.
     */
    int32(value) {
        assertInt32(value);
        varint32write(value, this.buf);
        return this;
    }
    /**
     * Write a `bool` value, a variant.
     */
    bool(value) {
        this.buf.push(value ? 1 : 0);
        return this;
    }
    /**
     * Write a `bytes` value, length-delimited arbitrary data.
     */
    bytes(value) {
        this.uint32(value.byteLength); // write length of chunk as varint
        return this.raw(value);
    }
    /**
     * Write a `string` value, length-delimited data converted to UTF-8 text.
     */
    string(value) {
        let chunk = this.encodeUtf8(value);
        this.uint32(chunk.byteLength); // write length of chunk as varint
        return this.raw(chunk);
    }
    /**
     * Write a `float` value, 32-bit floating point number.
     */
    float(value) {
        assertFloat32(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setFloat32(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `double` value, a 64-bit floating point number.
     */
    double(value) {
        let chunk = new Uint8Array(8);
        new DataView(chunk.buffer).setFloat64(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.
     */
    fixed32(value) {
        assertUInt32(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setUint32(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.
     */
    sfixed32(value) {
        assertInt32(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setInt32(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.
     */
    sint32(value) {
        assertInt32(value);
        // zigzag encode
        value = ((value << 1) ^ (value >> 31)) >>> 0;
        varint32write(value, this.buf);
        return this;
    }
    /**
     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.
     */
    sfixed64(value) {
        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.enc(value);
        view.setInt32(0, tc.lo, true);
        view.setInt32(4, tc.hi, true);
        return this.raw(chunk);
    }
    /**
     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.
     */
    fixed64(value) {
        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.uEnc(value);
        view.setInt32(0, tc.lo, true);
        view.setInt32(4, tc.hi, true);
        return this.raw(chunk);
    }
    /**
     * Write a `int64` value, a signed 64-bit varint.
     */
    int64(value) {
        let tc = protoInt64.enc(value);
        varint64write(tc.lo, tc.hi, this.buf);
        return this;
    }
    /**
     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.
     */
    sint64(value) {
        const tc = protoInt64.enc(value), 
        // zigzag encode
        sign = tc.hi >> 31, lo = (tc.lo << 1) ^ sign, hi = ((tc.hi << 1) | (tc.lo >>> 31)) ^ sign;
        varint64write(lo, hi, this.buf);
        return this;
    }
    /**
     * Write a `uint64` value, an unsigned 64-bit varint.
     */
    uint64(value) {
        const tc = protoInt64.uEnc(value);
        varint64write(tc.lo, tc.hi, this.buf);
        return this;
    }
}
class BinaryReader {
    constructor(buf, decodeUtf8 = getTextEncoding().decodeUtf8) {
        this.decodeUtf8 = decodeUtf8;
        this.varint64 = varint64read; // dirty cast for `this`
        /**
         * Read a `uint32` field, an unsigned 32 bit varint.
         */
        this.uint32 = varint32read;
        this.buf = buf;
        this.len = buf.length;
        this.pos = 0;
        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
    }
    /**
     * Reads a tag - field number and wire type.
     */
    tag() {
        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;
        if (fieldNo <= 0 || wireType < 0 || wireType > 5)
            throw new Error("illegal tag: field no " + fieldNo + " wire type " + wireType);
        return [fieldNo, wireType];
    }
    /**
     * Skip one element and return the skipped data.
     *
     * When skipping StartGroup, provide the tags field number to check for
     * matching field number in the EndGroup tag.
     */
    skip(wireType, fieldNo) {
        let start = this.pos;
        switch (wireType) {
            case WireType.Varint:
                while (this.buf[this.pos++] & 0x80) {
                    // ignore
                }
                break;
            // @ts-expect-error TS7029: Fallthrough case in switch
            case WireType.Bit64:
                this.pos += 4;
            case WireType.Bit32:
                this.pos += 4;
                break;
            case WireType.LengthDelimited:
                let len = this.uint32();
                this.pos += len;
                break;
            case WireType.StartGroup:
                for (;;) {
                    const [fn, wt] = this.tag();
                    if (wt === WireType.EndGroup) {
                        if (fieldNo !== undefined && fn !== fieldNo) {
                            throw new Error("invalid end group tag");
                        }
                        break;
                    }
                    this.skip(wt, fn);
                }
                break;
            default:
                throw new Error("cant skip wire type " + wireType);
        }
        this.assertBounds();
        return this.buf.subarray(start, this.pos);
    }
    /**
     * Throws error if position in byte array is out of range.
     */
    assertBounds() {
        if (this.pos > this.len)
            throw new RangeError("premature EOF");
    }
    /**
     * Read a `int32` field, a signed 32 bit varint.
     */
    int32() {
        return this.uint32() | 0;
    }
    /**
     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.
     */
    sint32() {
        let zze = this.uint32();
        // decode zigzag
        return (zze >>> 1) ^ -(zze & 1);
    }
    /**
     * Read a `int64` field, a signed 64-bit varint.
     */
    int64() {
        return protoInt64.dec(...this.varint64());
    }
    /**
     * Read a `uint64` field, an unsigned 64-bit varint.
     */
    uint64() {
        return protoInt64.uDec(...this.varint64());
    }
    /**
     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.
     */
    sint64() {
        let [lo, hi] = this.varint64();
        // decode zig zag
        let s = -(lo & 1);
        lo = ((lo >>> 1) | ((hi & 1) << 31)) ^ s;
        hi = (hi >>> 1) ^ s;
        return protoInt64.dec(lo, hi);
    }
    /**
     * Read a `bool` field, a variant.
     */
    bool() {
        let [lo, hi] = this.varint64();
        return lo !== 0 || hi !== 0;
    }
    /**
     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.
     */
    fixed32() {
        // biome-ignore lint/suspicious/noAssignInExpressions: no
        return this.view.getUint32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.
     */
    sfixed32() {
        // biome-ignore lint/suspicious/noAssignInExpressions: no
        return this.view.getInt32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.
     */
    fixed64() {
        return protoInt64.uDec(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.
     */
    sfixed64() {
        return protoInt64.dec(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `float` field, 32-bit floating point number.
     */
    float() {
        // biome-ignore lint/suspicious/noAssignInExpressions: no
        return this.view.getFloat32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `double` field, a 64-bit floating point number.
     */
    double() {
        // biome-ignore lint/suspicious/noAssignInExpressions: no
        return this.view.getFloat64((this.pos += 8) - 8, true);
    }
    /**
     * Read a `bytes` field, length-delimited arbitrary data.
     */
    bytes() {
        let len = this.uint32(), start = this.pos;
        this.pos += len;
        this.assertBounds();
        return this.buf.subarray(start, start + len);
    }
    /**
     * Read a `string` field, length-delimited data converted to UTF-8 text.
     */
    string() {
        return this.decodeUtf8(this.bytes());
    }
}
/**
 * Assert a valid signed protobuf 32-bit integer as a number or string.
 */
function assertInt32(arg) {
    if (typeof arg == "string") {
        arg = Number(arg);
    }
    else if (typeof arg != "number") {
        throw new Error("invalid int32: " + typeof arg);
    }
    if (!Number.isInteger(arg) ||
        arg > INT32_MAX ||
        arg < INT32_MIN)
        throw new Error("invalid int32: " + arg);
}
/**
 * Assert a valid unsigned protobuf 32-bit integer as a number or string.
 */
function assertUInt32(arg) {
    if (typeof arg == "string") {
        arg = Number(arg);
    }
    else if (typeof arg != "number") {
        throw new Error("invalid uint32: " + typeof arg);
    }
    if (!Number.isInteger(arg) ||
        arg > UINT32_MAX ||
        arg < 0)
        throw new Error("invalid uint32: " + arg);
}
/**
 * Assert a valid protobuf float value as a number or string.
 */
function assertFloat32(arg) {
    if (typeof arg == "string") {
        const o = arg;
        arg = Number(arg);
        if (Number.isNaN(arg) && o !== "NaN") {
            throw new Error("invalid float32: " + o);
        }
    }
    else if (typeof arg != "number") {
        throw new Error("invalid float32: " + typeof arg);
    }
    if (Number.isFinite(arg) &&
        (arg > FLOAT32_MAX || arg < FLOAT32_MIN))
        throw new Error("invalid float32: " + arg);
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var src$2 = {};

var callCredentials = {};

var metadata = {};

var logging$8 = {};

var constants = {};

/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(constants, "__esModule", { value: true });
constants.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = constants.DEFAULT_MAX_SEND_MESSAGE_LENGTH = constants.Propagate = constants.LogVerbosity = constants.Status = void 0;
var Status;
(function (Status) {
    Status[Status["OK"] = 0] = "OK";
    Status[Status["CANCELLED"] = 1] = "CANCELLED";
    Status[Status["UNKNOWN"] = 2] = "UNKNOWN";
    Status[Status["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
    Status[Status["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
    Status[Status["NOT_FOUND"] = 5] = "NOT_FOUND";
    Status[Status["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
    Status[Status["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
    Status[Status["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
    Status[Status["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
    Status[Status["ABORTED"] = 10] = "ABORTED";
    Status[Status["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
    Status[Status["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
    Status[Status["INTERNAL"] = 13] = "INTERNAL";
    Status[Status["UNAVAILABLE"] = 14] = "UNAVAILABLE";
    Status[Status["DATA_LOSS"] = 15] = "DATA_LOSS";
    Status[Status["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
})(Status || (constants.Status = Status = {}));
var LogVerbosity;
(function (LogVerbosity) {
    LogVerbosity[LogVerbosity["DEBUG"] = 0] = "DEBUG";
    LogVerbosity[LogVerbosity["INFO"] = 1] = "INFO";
    LogVerbosity[LogVerbosity["ERROR"] = 2] = "ERROR";
    LogVerbosity[LogVerbosity["NONE"] = 3] = "NONE";
})(LogVerbosity || (constants.LogVerbosity = LogVerbosity = {}));
/**
 * NOTE: This enum is not currently used in any implemented API in this
 * library. It is included only for type parity with the other implementation.
 */
var Propagate;
(function (Propagate) {
    Propagate[Propagate["DEADLINE"] = 1] = "DEADLINE";
    Propagate[Propagate["CENSUS_STATS_CONTEXT"] = 2] = "CENSUS_STATS_CONTEXT";
    Propagate[Propagate["CENSUS_TRACING_CONTEXT"] = 4] = "CENSUS_TRACING_CONTEXT";
    Propagate[Propagate["CANCELLATION"] = 8] = "CANCELLATION";
    // https://github.com/grpc/grpc/blob/master/include/grpc/impl/codegen/propagation_bits.h#L43
    Propagate[Propagate["DEFAULTS"] = 65535] = "DEFAULTS";
})(Propagate || (constants.Propagate = Propagate = {}));
// -1 means unlimited
constants.DEFAULT_MAX_SEND_MESSAGE_LENGTH = -1;
// 4 MB default
constants.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = 4 * 1024 * 1024;

var name = "@grpc/grpc-js";
var version = "1.13.4";
var description = "gRPC Library for Node - pure JS implementation";
var homepage = "https://grpc.io/";
var repository = "https://github.com/grpc/grpc-node/tree/master/packages/grpc-js";
var main = "build/src/index.js";
var engines = {
	node: ">=12.10.0"
};
var keywords = [
];
var author = {
	name: "Google Inc."
};
var types$1 = "build/src/index.d.ts";
var license = "Apache-2.0";
var devDependencies = {
	"@grpc/proto-loader": "file:../proto-loader",
	"@types/gulp": "^4.0.17",
	"@types/gulp-mocha": "0.0.37",
	"@types/lodash": "^4.14.202",
	"@types/mocha": "^10.0.6",
	"@types/ncp": "^2.0.8",
	"@types/node": ">=20.11.20",
	"@types/pify": "^5.0.4",
	"@types/semver": "^7.5.8",
	"@typescript-eslint/eslint-plugin": "^7.1.0",
	"@typescript-eslint/parser": "^7.1.0",
	"@typescript-eslint/typescript-estree": "^7.1.0",
	"clang-format": "^1.8.0",
	eslint: "^8.42.0",
	"eslint-config-prettier": "^8.8.0",
	"eslint-plugin-node": "^11.1.0",
	"eslint-plugin-prettier": "^4.2.1",
	execa: "^2.0.3",
	gulp: "^4.0.2",
	"gulp-mocha": "^6.0.0",
	lodash: "^4.17.21",
	madge: "^5.0.1",
	"mocha-jenkins-reporter": "^0.4.1",
	ncp: "^2.0.0",
	pify: "^4.0.1",
	prettier: "^2.8.8",
	rimraf: "^3.0.2",
	semver: "^7.6.0",
	"ts-node": "^10.9.2",
	typescript: "^5.3.3"
};
var contributors = [
	{
		name: "Google Inc."
	}
];
var scripts = {
	build: "npm run compile",
	clean: "rimraf ./build",
	compile: "tsc -p .",
	format: "clang-format -i -style=\"{Language: JavaScript, BasedOnStyle: Google, ColumnLimit: 80}\" src/*.ts test/*.ts",
	lint: "eslint src/*.ts test/*.ts",
	prepare: "npm run generate-types && npm run compile",
	test: "gulp test",
	check: "npm run lint",
	fix: "eslint --fix src/*.ts test/*.ts",
	pretest: "npm run generate-types && npm run generate-test-types && npm run compile",
	posttest: "npm run check && madge -c ./build/src",
	"generate-types": "proto-loader-gen-types --keepCase --longs String --enums String --defaults --oneofs --includeComments --includeDirs proto/ --include-dirs test/fixtures/ -O src/generated/ --grpcLib ../index channelz.proto",
	"generate-test-types": "proto-loader-gen-types --keepCase --longs String --enums String --defaults --oneofs --includeComments --include-dirs test/fixtures/ -O test/generated/ --grpcLib ../../src/index test_service.proto"
};
var dependencies = {
	"@grpc/proto-loader": "^0.7.13",
	"@js-sdsl/ordered-map": "^4.4.2"
};
var files = [
	"src/**/*.ts",
	"build/src/**/*.{js,d.ts,js.map}",
	"proto/*.proto",
	"LICENSE",
	"deps/envoy-api/envoy/api/v2/**/*.proto",
	"deps/envoy-api/envoy/config/**/*.proto",
	"deps/envoy-api/envoy/service/**/*.proto",
	"deps/envoy-api/envoy/type/**/*.proto",
	"deps/udpa/udpa/**/*.proto",
	"deps/googleapis/google/api/*.proto",
	"deps/googleapis/google/rpc/*.proto",
	"deps/protoc-gen-validate/validate/**/*.proto"
];
var require$$11 = {
	name: name,
	version: version,
	description: description,
	homepage: homepage,
	repository: repository,
	main: main,
	engines: engines,
	keywords: keywords,
	author: author,
	types: types$1,
	license: license,
	devDependencies: devDependencies,
	contributors: contributors,
	scripts: scripts,
	dependencies: dependencies,
	files: files
};

(function (exports) {
	/*
	 * Copyright 2019 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	var _a, _b, _c, _d;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.log = exports.setLoggerVerbosity = exports.setLogger = exports.getLogger = void 0;
	exports.trace = trace;
	exports.isTracerEnabled = isTracerEnabled;
	const constants_1 = constants;
	const process_1 = require$$1$1;
	const clientVersion = require$$11.version;
	const DEFAULT_LOGGER = {
	    error: (message, ...optionalParams) => {
	        console.error('E ' + message, ...optionalParams);
	    },
	    info: (message, ...optionalParams) => {
	        console.error('I ' + message, ...optionalParams);
	    },
	    debug: (message, ...optionalParams) => {
	        console.error('D ' + message, ...optionalParams);
	    },
	};
	let _logger = DEFAULT_LOGGER;
	let _logVerbosity = constants_1.LogVerbosity.ERROR;
	const verbosityString = (_b = (_a = process.env.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : process.env.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : '';
	switch (verbosityString.toUpperCase()) {
	    case 'DEBUG':
	        _logVerbosity = constants_1.LogVerbosity.DEBUG;
	        break;
	    case 'INFO':
	        _logVerbosity = constants_1.LogVerbosity.INFO;
	        break;
	    case 'ERROR':
	        _logVerbosity = constants_1.LogVerbosity.ERROR;
	        break;
	    case 'NONE':
	        _logVerbosity = constants_1.LogVerbosity.NONE;
	        break;
	    // Ignore any other values
	}
	const getLogger = () => {
	    return _logger;
	};
	exports.getLogger = getLogger;
	const setLogger = (logger) => {
	    _logger = logger;
	};
	exports.setLogger = setLogger;
	const setLoggerVerbosity = (verbosity) => {
	    _logVerbosity = verbosity;
	};
	exports.setLoggerVerbosity = setLoggerVerbosity;
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	const log = (severity, ...args) => {
	    let logFunction;
	    if (severity >= _logVerbosity) {
	        switch (severity) {
	            case constants_1.LogVerbosity.DEBUG:
	                logFunction = _logger.debug;
	                break;
	            case constants_1.LogVerbosity.INFO:
	                logFunction = _logger.info;
	                break;
	            case constants_1.LogVerbosity.ERROR:
	                logFunction = _logger.error;
	                break;
	        }
	        /* Fall back to _logger.error when other methods are not available for
	         * compatiblity with older behavior that always logged to _logger.error */
	        if (!logFunction) {
	            logFunction = _logger.error;
	        }
	        if (logFunction) {
	            logFunction.bind(_logger)(...args);
	        }
	    }
	};
	exports.log = log;
	const tracersString = (_d = (_c = process.env.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : process.env.GRPC_TRACE) !== null && _d !== void 0 ? _d : '';
	const enabledTracers = new Set();
	const disabledTracers = new Set();
	for (const tracerName of tracersString.split(',')) {
	    if (tracerName.startsWith('-')) {
	        disabledTracers.add(tracerName.substring(1));
	    }
	    else {
	        enabledTracers.add(tracerName);
	    }
	}
	const allEnabled = enabledTracers.has('all');
	function trace(severity, tracer, text) {
	    if (isTracerEnabled(tracer)) {
	        (0, exports.log)(severity, new Date().toISOString() +
	            ' | v' +
	            clientVersion +
	            ' ' +
	            process_1.pid +
	            ' | ' +
	            tracer +
	            ' | ' +
	            text);
	    }
	}
	function isTracerEnabled(tracer) {
	    return (!disabledTracers.has(tracer) && (allEnabled || enabledTracers.has(tracer)));
	}
	
} (logging$8));

var error = {};

/*
 * Copyright 2022 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(error, "__esModule", { value: true });
error.getErrorMessage = getErrorMessage;
error.getErrorCode = getErrorCode;
function getErrorMessage(error) {
    if (error instanceof Error) {
        return error.message;
    }
    else {
        return String(error);
    }
}
function getErrorCode(error) {
    if (typeof error === 'object' &&
        error !== null &&
        'code' in error &&
        typeof error.code === 'number') {
        return error.code;
    }
    else {
        return null;
    }
}

/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(metadata, "__esModule", { value: true });
metadata.Metadata = void 0;
const logging_1$2 = logging$8;
const constants_1$c = constants;
const error_1 = error;
const LEGAL_KEY_REGEX = /^[0-9a-z_.-]+$/;
const LEGAL_NON_BINARY_VALUE_REGEX = /^[ -~]*$/;
function isLegalKey(key) {
    return LEGAL_KEY_REGEX.test(key);
}
function isLegalNonBinaryValue(value) {
    return LEGAL_NON_BINARY_VALUE_REGEX.test(value);
}
function isBinaryKey(key) {
    return key.endsWith('-bin');
}
function isCustomMetadata(key) {
    return !key.startsWith('grpc-');
}
function normalizeKey(key) {
    return key.toLowerCase();
}
function validate(key, value) {
    if (!isLegalKey(key)) {
        throw new Error('Metadata key "' + key + '" contains illegal characters');
    }
    if (value !== null && value !== undefined) {
        if (isBinaryKey(key)) {
            if (!Buffer.isBuffer(value)) {
                throw new Error("keys that end with '-bin' must have Buffer values");
            }
        }
        else {
            if (Buffer.isBuffer(value)) {
                throw new Error("keys that don't end with '-bin' must have String values");
            }
            if (!isLegalNonBinaryValue(value)) {
                throw new Error('Metadata string value "' + value + '" contains illegal characters');
            }
        }
    }
}
/**
 * A class for storing metadata. Keys are normalized to lowercase ASCII.
 */
class Metadata {
    constructor(options = {}) {
        this.internalRepr = new Map();
        this.options = options;
    }
    /**
     * Sets the given value for the given key by replacing any other values
     * associated with that key. Normalizes the key.
     * @param key The key to whose value should be set.
     * @param value The value to set. Must be a buffer if and only
     *   if the normalized key ends with '-bin'.
     */
    set(key, value) {
        key = normalizeKey(key);
        validate(key, value);
        this.internalRepr.set(key, [value]);
    }
    /**
     * Adds the given value for the given key by appending to a list of previous
     * values associated with that key. Normalizes the key.
     * @param key The key for which a new value should be appended.
     * @param value The value to add. Must be a buffer if and only
     *   if the normalized key ends with '-bin'.
     */
    add(key, value) {
        key = normalizeKey(key);
        validate(key, value);
        const existingValue = this.internalRepr.get(key);
        if (existingValue === undefined) {
            this.internalRepr.set(key, [value]);
        }
        else {
            existingValue.push(value);
        }
    }
    /**
     * Removes the given key and any associated values. Normalizes the key.
     * @param key The key whose values should be removed.
     */
    remove(key) {
        key = normalizeKey(key);
        // validate(key);
        this.internalRepr.delete(key);
    }
    /**
     * Gets a list of all values associated with the key. Normalizes the key.
     * @param key The key whose value should be retrieved.
     * @return A list of values associated with the given key.
     */
    get(key) {
        key = normalizeKey(key);
        // validate(key);
        return this.internalRepr.get(key) || [];
    }
    /**
     * Gets a plain object mapping each key to the first value associated with it.
     * This reflects the most common way that people will want to see metadata.
     * @return A key/value mapping of the metadata.
     */
    getMap() {
        const result = {};
        for (const [key, values] of this.internalRepr) {
            if (values.length > 0) {
                const v = values[0];
                result[key] = Buffer.isBuffer(v) ? Buffer.from(v) : v;
            }
        }
        return result;
    }
    /**
     * Clones the metadata object.
     * @return The newly cloned object.
     */
    clone() {
        const newMetadata = new Metadata(this.options);
        const newInternalRepr = newMetadata.internalRepr;
        for (const [key, value] of this.internalRepr) {
            const clonedValue = value.map(v => {
                if (Buffer.isBuffer(v)) {
                    return Buffer.from(v);
                }
                else {
                    return v;
                }
            });
            newInternalRepr.set(key, clonedValue);
        }
        return newMetadata;
    }
    /**
     * Merges all key-value pairs from a given Metadata object into this one.
     * If both this object and the given object have values in the same key,
     * values from the other Metadata object will be appended to this object's
     * values.
     * @param other A Metadata object.
     */
    merge(other) {
        for (const [key, values] of other.internalRepr) {
            const mergedValue = (this.internalRepr.get(key) || []).concat(values);
            this.internalRepr.set(key, mergedValue);
        }
    }
    setOptions(options) {
        this.options = options;
    }
    getOptions() {
        return this.options;
    }
    /**
     * Creates an OutgoingHttpHeaders object that can be used with the http2 API.
     */
    toHttp2Headers() {
        // NOTE: Node <8.9 formats http2 headers incorrectly.
        const result = {};
        for (const [key, values] of this.internalRepr) {
            // We assume that the user's interaction with this object is limited to
            // through its public API (i.e. keys and values are already validated).
            result[key] = values.map(bufToString);
        }
        return result;
    }
    /**
     * This modifies the behavior of JSON.stringify to show an object
     * representation of the metadata map.
     */
    toJSON() {
        const result = {};
        for (const [key, values] of this.internalRepr) {
            result[key] = values;
        }
        return result;
    }
    /**
     * Returns a new Metadata object based fields in a given IncomingHttpHeaders
     * object.
     * @param headers An IncomingHttpHeaders object.
     */
    static fromHttp2Headers(headers) {
        const result = new Metadata();
        for (const key of Object.keys(headers)) {
            // Reserved headers (beginning with `:`) are not valid keys.
            if (key.charAt(0) === ':') {
                continue;
            }
            const values = headers[key];
            try {
                if (isBinaryKey(key)) {
                    if (Array.isArray(values)) {
                        values.forEach(value => {
                            result.add(key, Buffer.from(value, 'base64'));
                        });
                    }
                    else if (values !== undefined) {
                        if (isCustomMetadata(key)) {
                            values.split(',').forEach(v => {
                                result.add(key, Buffer.from(v.trim(), 'base64'));
                            });
                        }
                        else {
                            result.add(key, Buffer.from(values, 'base64'));
                        }
                    }
                }
                else {
                    if (Array.isArray(values)) {
                        values.forEach(value => {
                            result.add(key, value);
                        });
                    }
                    else if (values !== undefined) {
                        result.add(key, values);
                    }
                }
            }
            catch (error) {
                const message = `Failed to add metadata entry ${key}: ${values}. ${(0, error_1.getErrorMessage)(error)}. For more information see https://github.com/grpc/grpc-node/issues/1173`;
                (0, logging_1$2.log)(constants_1$c.LogVerbosity.ERROR, message);
            }
        }
        return result;
    }
}
metadata.Metadata = Metadata;
const bufToString = (val) => {
    return Buffer.isBuffer(val) ? val.toString('base64') : val;
};

/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(callCredentials, "__esModule", { value: true });
callCredentials.CallCredentials = void 0;
const metadata_1$6 = metadata;
function isCurrentOauth2Client(client) {
    return ('getRequestHeaders' in client &&
        typeof client.getRequestHeaders === 'function');
}
/**
 * A class that represents a generic method of adding authentication-related
 * metadata on a per-request basis.
 */
class CallCredentials {
    /**
     * Creates a new CallCredentials object from a given function that generates
     * Metadata objects.
     * @param metadataGenerator A function that accepts a set of options, and
     * generates a Metadata object based on these options, which is passed back
     * to the caller via a supplied (err, metadata) callback.
     */
    static createFromMetadataGenerator(metadataGenerator) {
        return new SingleCallCredentials(metadataGenerator);
    }
    /**
     * Create a gRPC credential from a Google credential object.
     * @param googleCredentials The authentication client to use.
     * @return The resulting CallCredentials object.
     */
    static createFromGoogleCredential(googleCredentials) {
        return CallCredentials.createFromMetadataGenerator((options, callback) => {
            let getHeaders;
            if (isCurrentOauth2Client(googleCredentials)) {
                getHeaders = googleCredentials.getRequestHeaders(options.service_url);
            }
            else {
                getHeaders = new Promise((resolve, reject) => {
                    googleCredentials.getRequestMetadata(options.service_url, (err, headers) => {
                        if (err) {
                            reject(err);
                            return;
                        }
                        if (!headers) {
                            reject(new Error('Headers not set by metadata plugin'));
                            return;
                        }
                        resolve(headers);
                    });
                });
            }
            getHeaders.then(headers => {
                const metadata = new metadata_1$6.Metadata();
                for (const key of Object.keys(headers)) {
                    metadata.add(key, headers[key]);
                }
                callback(null, metadata);
            }, err => {
                callback(err);
            });
        });
    }
    static createEmpty() {
        return new EmptyCallCredentials();
    }
}
callCredentials.CallCredentials = CallCredentials;
class ComposedCallCredentials extends CallCredentials {
    constructor(creds) {
        super();
        this.creds = creds;
    }
    async generateMetadata(options) {
        const base = new metadata_1$6.Metadata();
        const generated = await Promise.all(this.creds.map(cred => cred.generateMetadata(options)));
        for (const gen of generated) {
            base.merge(gen);
        }
        return base;
    }
    compose(other) {
        return new ComposedCallCredentials(this.creds.concat([other]));
    }
    _equals(other) {
        if (this === other) {
            return true;
        }
        if (other instanceof ComposedCallCredentials) {
            return this.creds.every((value, index) => value._equals(other.creds[index]));
        }
        else {
            return false;
        }
    }
}
class SingleCallCredentials extends CallCredentials {
    constructor(metadataGenerator) {
        super();
        this.metadataGenerator = metadataGenerator;
    }
    generateMetadata(options) {
        return new Promise((resolve, reject) => {
            this.metadataGenerator(options, (err, metadata) => {
                if (metadata !== undefined) {
                    resolve(metadata);
                }
                else {
                    reject(err);
                }
            });
        });
    }
    compose(other) {
        return new ComposedCallCredentials([this, other]);
    }
    _equals(other) {
        if (this === other) {
            return true;
        }
        if (other instanceof SingleCallCredentials) {
            return this.metadataGenerator === other.metadataGenerator;
        }
        else {
            return false;
        }
    }
}
class EmptyCallCredentials extends CallCredentials {
    generateMetadata(options) {
        return Promise.resolve(new metadata_1$6.Metadata());
    }
    compose(other) {
        return other;
    }
    _equals(other) {
        return other instanceof EmptyCallCredentials;
    }
}

var channel = {};

var channelCredentials = {};

var tlsHelpers = {};

/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(tlsHelpers, "__esModule", { value: true });
tlsHelpers.CIPHER_SUITES = void 0;
tlsHelpers.getDefaultRootsData = getDefaultRootsData;
const fs = require$$0;
tlsHelpers.CIPHER_SUITES = process.env.GRPC_SSL_CIPHER_SUITES;
const DEFAULT_ROOTS_FILE_PATH = process.env.GRPC_DEFAULT_SSL_ROOTS_FILE_PATH;
let defaultRootsData = null;
function getDefaultRootsData() {
    if (DEFAULT_ROOTS_FILE_PATH) {
        if (defaultRootsData === null) {
            defaultRootsData = fs.readFileSync(DEFAULT_ROOTS_FILE_PATH);
        }
        return defaultRootsData;
    }
    return null;
}

var uriParser = {};

/*
 * Copyright 2020 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(uriParser, "__esModule", { value: true });
uriParser.parseUri = parseUri;
uriParser.splitHostPort = splitHostPort;
uriParser.combineHostPort = combineHostPort;
uriParser.uriToString = uriToString;
/*
 * The groups correspond to URI parts as follows:
 * 1. scheme
 * 2. authority
 * 3. path
 */
const URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\/\/([^/]*)\/)?(.+)$/;
function parseUri(uriString) {
    const parsedUri = URI_REGEX.exec(uriString);
    if (parsedUri === null) {
        return null;
    }
    return {
        scheme: parsedUri[1],
        authority: parsedUri[2],
        path: parsedUri[3],
    };
}
const NUMBER_REGEX = /^\d+$/;
function splitHostPort(path) {
    if (path.startsWith('[')) {
        const hostEnd = path.indexOf(']');
        if (hostEnd === -1) {
            return null;
        }
        const host = path.substring(1, hostEnd);
        /* Only an IPv6 address should be in bracketed notation, and an IPv6
         * address should have at least one colon */
        if (host.indexOf(':') === -1) {
            return null;
        }
        if (path.length > hostEnd + 1) {
            if (path[hostEnd + 1] === ':') {
                const portString = path.substring(hostEnd + 2);
                if (NUMBER_REGEX.test(portString)) {
                    return {
                        host: host,
                        port: +portString,
                    };
                }
                else {
                    return null;
                }
            }
            else {
                return null;
            }
        }
        else {
            return {
                host,
            };
        }
    }
    else {
        const splitPath = path.split(':');
        /* Exactly one colon means that this is host:port. Zero colons means that
         * there is no port. And multiple colons means that this is a bare IPv6
         * address with no port */
        if (splitPath.length === 2) {
            if (NUMBER_REGEX.test(splitPath[1])) {
                return {
                    host: splitPath[0],
                    port: +splitPath[1],
                };
            }
            else {
                return null;
            }
        }
        else {
            return {
                host: path,
            };
        }
    }
}
function combineHostPort(hostPort) {
    if (hostPort.port === undefined) {
        return hostPort.host;
    }
    else {
        // Only an IPv6 host should include a colon
        if (hostPort.host.includes(':')) {
            return `[${hostPort.host}]:${hostPort.port}`;
        }
        else {
            return `${hostPort.host}:${hostPort.port}`;
        }
    }
}
function uriToString(uri) {
    let result = '';
    if (uri.scheme !== undefined) {
        result += uri.scheme + ':';
    }
    if (uri.authority !== undefined) {
        result += '//' + uri.authority + '/';
    }
    result += uri.path;
    return result;
}

var resolver = {};

/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(resolver, "__esModule", { value: true });
resolver.registerResolver = registerResolver;
resolver.registerDefaultScheme = registerDefaultScheme;
resolver.createResolver = createResolver;
resolver.getDefaultAuthority = getDefaultAuthority;
resolver.mapUriDefaultScheme = mapUriDefaultScheme;
const uri_parser_1$5 = uriParser;
const registeredResolvers = {};
let defaultScheme = null;
/**
 * Register a resolver class to handle target names prefixed with the `prefix`
 * string. This prefix should correspond to a URI scheme name listed in the
 * [gRPC Name Resolution document](https://github.com/grpc/grpc/blob/master/doc/naming.md)
 * @param prefix
 * @param resolverClass
 */
function registerResolver(scheme, resolverClass) {
    registeredResolvers[scheme] = resolverClass;
}
/**
 * Register a default resolver to handle target names that do not start with
 * any registered prefix.
 * @param resolverClass
 */
function registerDefaultScheme(scheme) {
    defaultScheme = scheme;
}
/**
 * Create a name resolver for the specified target, if possible. Throws an
 * error if no such name resolver can be created.
 * @param target
 * @param listener
 */
function createResolver(target, listener, options) {
    if (target.scheme !== undefined && target.scheme in registeredResolvers) {
        return new registeredResolvers[target.scheme](target, listener, options);
    }
    else {
        throw new Error(`No resolver could be created for target ${(0, uri_parser_1$5.uriToString)(target)}`);
    }
}
/**
 * Get the default authority for the specified target, if possible. Throws an
 * error if no registered name resolver can parse that target string.
 * @param target
 */
function getDefaultAuthority(target) {
    if (target.scheme !== undefined && target.scheme in registeredResolvers) {
        return registeredResolvers[target.scheme].getDefaultAuthority(target);
    }
    else {
        throw new Error(`Invalid target ${(0, uri_parser_1$5.uriToString)(target)}`);
    }
}
function mapUriDefaultScheme(target) {
    if (target.scheme === undefined || !(target.scheme in registeredResolvers)) {
        if (defaultScheme !== null) {
            return {
                scheme: defaultScheme,
                authority: undefined,
                path: (0, uri_parser_1$5.uriToString)(target),
            };
        }
        else {
            return null;
        }
    }
    return target;
}

/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(channelCredentials, "__esModule", { value: true });
channelCredentials.ChannelCredentials = void 0;
channelCredentials.createCertificateProviderChannelCredentials = createCertificateProviderChannelCredentials;
const tls_1 = require$$0$1;
const call_credentials_1$1 = callCredentials;
const tls_helpers_1$1 = tlsHelpers;
const uri_parser_1$4 = uriParser;
const resolver_1$2 = resolver;
const logging_1$1 = logging$8;
const constants_1$b = constants;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function verifyIsBufferOrNull(obj, friendlyName) {
    if (obj && !(obj instanceof Buffer)) {
        throw new TypeError(`${friendlyName}, if provided, must be a Buffer.`);
    }
}
/**
 * A class that contains credentials for communicating over a channel, as well
 * as a set of per-call credentials, which are applied to every method call made
 * over a channel initialized with an instance of this class.
 */
class ChannelCredentials {
    /**
     * Returns a copy of this object with the included set of per-call credentials
     * expanded to include callCredentials.
     * @param callCredentials A CallCredentials object to associate with this
     * instance.
     */
    compose(callCredentials) {
        return new ComposedChannelCredentialsImpl(this, callCredentials);
    }
    /**
     * Return a new ChannelCredentials instance with a given set of credentials.
     * The resulting instance can be used to construct a Channel that communicates
     * over TLS.
     * @param rootCerts The root certificate data.
     * @param privateKey The client certificate private key, if available.
     * @param certChain The client certificate key chain, if available.
     * @param verifyOptions Additional options to modify certificate verification
     */
    static createSsl(rootCerts, privateKey, certChain, verifyOptions) {
        var _a;
        verifyIsBufferOrNull(rootCerts, 'Root certificate');
        verifyIsBufferOrNull(privateKey, 'Private key');
        verifyIsBufferOrNull(certChain, 'Certificate chain');
        if (privateKey && !certChain) {
            throw new Error('Private key must be given with accompanying certificate chain');
        }
        if (!privateKey && certChain) {
            throw new Error('Certificate chain must be given with accompanying private key');
        }
        const secureContext = (0, tls_1.createSecureContext)({
            ca: (_a = rootCerts !== null && rootCerts !== void 0 ? rootCerts : (0, tls_helpers_1$1.getDefaultRootsData)()) !== null && _a !== void 0 ? _a : undefined,
            key: privateKey !== null && privateKey !== void 0 ? privateKey : undefined,
            cert: certChain !== null && certChain !== void 0 ? certChain : undefined,
            ciphers: tls_helpers_1$1.CIPHER_SUITES,
        });
        return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});
    }
    /**
     * Return a new ChannelCredentials instance with credentials created using
     * the provided secureContext. The resulting instances can be used to
     * construct a Channel that communicates over TLS. gRPC will not override
     * anything in the provided secureContext, so the environment variables
     * GRPC_SSL_CIPHER_SUITES and GRPC_DEFAULT_SSL_ROOTS_FILE_PATH will
     * not be applied.
     * @param secureContext The return value of tls.createSecureContext()
     * @param verifyOptions Additional options to modify certificate verification
     */
    static createFromSecureContext(secureContext, verifyOptions) {
        return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});
    }
    /**
     * Return a new ChannelCredentials instance with no credentials.
     */
    static createInsecure() {
        return new InsecureChannelCredentialsImpl();
    }
}
channelCredentials.ChannelCredentials = ChannelCredentials;
class InsecureChannelCredentialsImpl extends ChannelCredentials {
    constructor() {
        super();
    }
    compose(callCredentials) {
        throw new Error('Cannot compose insecure credentials');
    }
    _isSecure() {
        return false;
    }
    _equals(other) {
        return other instanceof InsecureChannelCredentialsImpl;
    }
    _createSecureConnector(channelTarget, options, callCredentials) {
        return {
            connect(socket) {
                return Promise.resolve({
                    socket,
                    secure: false
                });
            },
            waitForReady: () => {
                return Promise.resolve();
            },
            getCallCredentials: () => {
                return callCredentials !== null && callCredentials !== void 0 ? callCredentials : call_credentials_1$1.CallCredentials.createEmpty();
            },
            destroy() { }
        };
    }
}
function getConnectionOptions(secureContext, verifyOptions, channelTarget, options) {
    var _a, _b;
    const connectionOptions = {
        secureContext: secureContext
    };
    let realTarget = channelTarget;
    if ('grpc.http_connect_target' in options) {
        const parsedTarget = (0, uri_parser_1$4.parseUri)(options['grpc.http_connect_target']);
        if (parsedTarget) {
            realTarget = parsedTarget;
        }
    }
    const targetPath = (0, resolver_1$2.getDefaultAuthority)(realTarget);
    const hostPort = (0, uri_parser_1$4.splitHostPort)(targetPath);
    const remoteHost = (_a = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _a !== void 0 ? _a : targetPath;
    connectionOptions.host = remoteHost;
    if (verifyOptions.checkServerIdentity) {
        connectionOptions.checkServerIdentity = verifyOptions.checkServerIdentity;
    }
    if (verifyOptions.rejectUnauthorized !== undefined) {
        connectionOptions.rejectUnauthorized = verifyOptions.rejectUnauthorized;
    }
    connectionOptions.ALPNProtocols = ['h2'];
    if (options['grpc.ssl_target_name_override']) {
        const sslTargetNameOverride = options['grpc.ssl_target_name_override'];
        const originalCheckServerIdentity = (_b = connectionOptions.checkServerIdentity) !== null && _b !== void 0 ? _b : tls_1.checkServerIdentity;
        connectionOptions.checkServerIdentity = (host, cert) => {
            return originalCheckServerIdentity(sslTargetNameOverride, cert);
        };
        connectionOptions.servername = sslTargetNameOverride;
    }
    else {
        connectionOptions.servername = remoteHost;
    }
    if (options['grpc-node.tls_enable_trace']) {
        connectionOptions.enableTrace = true;
    }
    return connectionOptions;
}
class SecureConnectorImpl {
    constructor(connectionOptions, callCredentials) {
        this.connectionOptions = connectionOptions;
        this.callCredentials = callCredentials;
    }
    connect(socket) {
        const tlsConnectOptions = Object.assign({ socket: socket }, this.connectionOptions);
        return new Promise((resolve, reject) => {
            const tlsSocket = (0, tls_1.connect)(tlsConnectOptions, () => {
                var _a;
                if (((_a = this.connectionOptions.rejectUnauthorized) !== null && _a !== void 0 ? _a : true) && !tlsSocket.authorized) {
                    reject(tlsSocket.authorizationError);
                    return;
                }
                resolve({
                    socket: tlsSocket,
                    secure: true
                });
            });
            tlsSocket.on('error', (error) => {
                reject(error);
            });
        });
    }
    waitForReady() {
        return Promise.resolve();
    }
    getCallCredentials() {
        return this.callCredentials;
    }
    destroy() { }
}
class SecureChannelCredentialsImpl extends ChannelCredentials {
    constructor(secureContext, verifyOptions) {
        super();
        this.secureContext = secureContext;
        this.verifyOptions = verifyOptions;
    }
    _isSecure() {
        return true;
    }
    _equals(other) {
        if (this === other) {
            return true;
        }
        if (other instanceof SecureChannelCredentialsImpl) {
            return (this.secureContext === other.secureContext &&
                this.verifyOptions.checkServerIdentity ===
                    other.verifyOptions.checkServerIdentity);
        }
        else {
            return false;
        }
    }
    _createSecureConnector(channelTarget, options, callCredentials) {
        const connectionOptions = getConnectionOptions(this.secureContext, this.verifyOptions, channelTarget, options);
        return new SecureConnectorImpl(connectionOptions, callCredentials !== null && callCredentials !== void 0 ? callCredentials : call_credentials_1$1.CallCredentials.createEmpty());
    }
}
class CertificateProviderChannelCredentialsImpl extends ChannelCredentials {
    constructor(caCertificateProvider, identityCertificateProvider, verifyOptions) {
        super();
        this.caCertificateProvider = caCertificateProvider;
        this.identityCertificateProvider = identityCertificateProvider;
        this.verifyOptions = verifyOptions;
        this.refcount = 0;
        /**
         * `undefined` means that the certificates have not yet been loaded. `null`
         * means that an attempt to load them has completed, and has failed.
         */
        this.latestCaUpdate = undefined;
        /**
         * `undefined` means that the certificates have not yet been loaded. `null`
         * means that an attempt to load them has completed, and has failed.
         */
        this.latestIdentityUpdate = undefined;
        this.caCertificateUpdateListener = this.handleCaCertificateUpdate.bind(this);
        this.identityCertificateUpdateListener = this.handleIdentityCertitificateUpdate.bind(this);
        this.secureContextWatchers = [];
    }
    _isSecure() {
        return true;
    }
    _equals(other) {
        var _a, _b;
        if (this === other) {
            return true;
        }
        if (other instanceof CertificateProviderChannelCredentialsImpl) {
            return this.caCertificateProvider === other.caCertificateProvider &&
                this.identityCertificateProvider === other.identityCertificateProvider &&
                ((_a = this.verifyOptions) === null || _a === void 0 ? void 0 : _a.checkServerIdentity) === ((_b = other.verifyOptions) === null || _b === void 0 ? void 0 : _b.checkServerIdentity);
        }
        else {
            return false;
        }
    }
    ref() {
        var _a;
        if (this.refcount === 0) {
            this.caCertificateProvider.addCaCertificateListener(this.caCertificateUpdateListener);
            (_a = this.identityCertificateProvider) === null || _a === void 0 ? void 0 : _a.addIdentityCertificateListener(this.identityCertificateUpdateListener);
        }
        this.refcount += 1;
    }
    unref() {
        var _a;
        this.refcount -= 1;
        if (this.refcount === 0) {
            this.caCertificateProvider.removeCaCertificateListener(this.caCertificateUpdateListener);
            (_a = this.identityCertificateProvider) === null || _a === void 0 ? void 0 : _a.removeIdentityCertificateListener(this.identityCertificateUpdateListener);
        }
    }
    _createSecureConnector(channelTarget, options, callCredentials) {
        this.ref();
        return new CertificateProviderChannelCredentialsImpl.SecureConnectorImpl(this, channelTarget, options, callCredentials !== null && callCredentials !== void 0 ? callCredentials : call_credentials_1$1.CallCredentials.createEmpty());
    }
    maybeUpdateWatchers() {
        if (this.hasReceivedUpdates()) {
            for (const watcher of this.secureContextWatchers) {
                watcher(this.getLatestSecureContext());
            }
            this.secureContextWatchers = [];
        }
    }
    handleCaCertificateUpdate(update) {
        this.latestCaUpdate = update;
        this.maybeUpdateWatchers();
    }
    handleIdentityCertitificateUpdate(update) {
        this.latestIdentityUpdate = update;
        this.maybeUpdateWatchers();
    }
    hasReceivedUpdates() {
        if (this.latestCaUpdate === undefined) {
            return false;
        }
        if (this.identityCertificateProvider && this.latestIdentityUpdate === undefined) {
            return false;
        }
        return true;
    }
    getSecureContext() {
        if (this.hasReceivedUpdates()) {
            return Promise.resolve(this.getLatestSecureContext());
        }
        else {
            return new Promise(resolve => {
                this.secureContextWatchers.push(resolve);
            });
        }
    }
    getLatestSecureContext() {
        var _a, _b;
        if (!this.latestCaUpdate) {
            return null;
        }
        if (this.identityCertificateProvider !== null && !this.latestIdentityUpdate) {
            return null;
        }
        try {
            return (0, tls_1.createSecureContext)({
                ca: this.latestCaUpdate.caCertificate,
                key: (_a = this.latestIdentityUpdate) === null || _a === void 0 ? void 0 : _a.privateKey,
                cert: (_b = this.latestIdentityUpdate) === null || _b === void 0 ? void 0 : _b.certificate,
                ciphers: tls_helpers_1$1.CIPHER_SUITES
            });
        }
        catch (e) {
            (0, logging_1$1.log)(constants_1$b.LogVerbosity.ERROR, 'Failed to createSecureContext with error ' + e.message);
            return null;
        }
    }
}
CertificateProviderChannelCredentialsImpl.SecureConnectorImpl = class {
    constructor(parent, channelTarget, options, callCredentials) {
        this.parent = parent;
        this.channelTarget = channelTarget;
        this.options = options;
        this.callCredentials = callCredentials;
    }
    connect(socket) {
        return new Promise((resolve, reject) => {
            const secureContext = this.parent.getLatestSecureContext();
            if (!secureContext) {
                reject(new Error('Failed to load credentials'));
                return;
            }
            if (socket.closed) {
                reject(new Error('Socket closed while loading credentials'));
            }
            const connnectionOptions = getConnectionOptions(secureContext, this.parent.verifyOptions, this.channelTarget, this.options);
            const tlsConnectOptions = Object.assign({ socket: socket }, connnectionOptions);
            const closeCallback = () => {
                reject(new Error('Socket closed'));
            };
            const errorCallback = (error) => {
                reject(error);
            };
            const tlsSocket = (0, tls_1.connect)(tlsConnectOptions, () => {
                var _a;
                tlsSocket.removeListener('close', closeCallback);
                tlsSocket.removeListener('error', errorCallback);
                if (((_a = this.parent.verifyOptions.rejectUnauthorized) !== null && _a !== void 0 ? _a : true) && !tlsSocket.authorized) {
                    reject(tlsSocket.authorizationError);
                    return;
                }
                resolve({
                    socket: tlsSocket,
                    secure: true
                });
            });
            tlsSocket.once('close', closeCallback);
            tlsSocket.once('error', errorCallback);
        });
    }
    async waitForReady() {
        await this.parent.getSecureContext();
    }
    getCallCredentials() {
        return this.callCredentials;
    }
    destroy() {
        this.parent.unref();
    }
};
function createCertificateProviderChannelCredentials(caCertificateProvider, identityCertificateProvider, verifyOptions) {
    return new CertificateProviderChannelCredentialsImpl(caCertificateProvider, identityCertificateProvider, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});
}
class ComposedChannelCredentialsImpl extends ChannelCredentials {
    constructor(channelCredentials, callCredentials) {
        super();
        this.channelCredentials = channelCredentials;
        this.callCredentials = callCredentials;
        if (!channelCredentials._isSecure()) {
            throw new Error('Cannot compose insecure credentials');
        }
    }
    compose(callCredentials) {
        const combinedCallCredentials = this.callCredentials.compose(callCredentials);
        return new ComposedChannelCredentialsImpl(this.channelCredentials, combinedCallCredentials);
    }
    _isSecure() {
        return true;
    }
    _equals(other) {
        if (this === other) {
            return true;
        }
        if (other instanceof ComposedChannelCredentialsImpl) {
            return (this.channelCredentials._equals(other.channelCredentials) &&
                this.callCredentials._equals(other.callCredentials));
        }
        else {
            return false;
        }
    }
    _createSecureConnector(channelTarget, options, callCredentials) {
        const combinedCallCredentials = this.callCredentials.compose(callCredentials !== null && callCredentials !== void 0 ? callCredentials : call_credentials_1$1.CallCredentials.createEmpty());
        return this.channelCredentials._createSecureConnector(channelTarget, options, combinedCallCredentials);
    }
}

var internalChannel = {};

var resolvingLoadBalancer = {};

var loadBalancer = {};

var hasRequiredLoadBalancer;

function requireLoadBalancer () {
	if (hasRequiredLoadBalancer) return loadBalancer;
	hasRequiredLoadBalancer = 1;
	/*
	 * Copyright 2019 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(loadBalancer, "__esModule", { value: true });
	loadBalancer.createChildChannelControlHelper = createChildChannelControlHelper;
	loadBalancer.registerLoadBalancerType = registerLoadBalancerType;
	loadBalancer.registerDefaultLoadBalancerType = registerDefaultLoadBalancerType;
	loadBalancer.createLoadBalancer = createLoadBalancer;
	loadBalancer.isLoadBalancerNameRegistered = isLoadBalancerNameRegistered;
	loadBalancer.parseLoadBalancingConfig = parseLoadBalancingConfig;
	loadBalancer.getDefaultConfig = getDefaultConfig;
	loadBalancer.selectLbConfigFromList = selectLbConfigFromList;
	const logging_1 = logging$8;
	const constants_1 = constants;
	/**
	 * Create a child ChannelControlHelper that overrides some methods of the
	 * parent while letting others pass through to the parent unmodified. This
	 * allows other code to create these children without needing to know about
	 * all of the methods to be passed through.
	 * @param parent
	 * @param overrides
	 */
	function createChildChannelControlHelper(parent, overrides) {
	    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
	    return {
	        createSubchannel: (_b = (_a = overrides.createSubchannel) === null || _a === void 0 ? void 0 : _a.bind(overrides)) !== null && _b !== void 0 ? _b : parent.createSubchannel.bind(parent),
	        updateState: (_d = (_c = overrides.updateState) === null || _c === void 0 ? void 0 : _c.bind(overrides)) !== null && _d !== void 0 ? _d : parent.updateState.bind(parent),
	        requestReresolution: (_f = (_e = overrides.requestReresolution) === null || _e === void 0 ? void 0 : _e.bind(overrides)) !== null && _f !== void 0 ? _f : parent.requestReresolution.bind(parent),
	        addChannelzChild: (_h = (_g = overrides.addChannelzChild) === null || _g === void 0 ? void 0 : _g.bind(overrides)) !== null && _h !== void 0 ? _h : parent.addChannelzChild.bind(parent),
	        removeChannelzChild: (_k = (_j = overrides.removeChannelzChild) === null || _j === void 0 ? void 0 : _j.bind(overrides)) !== null && _k !== void 0 ? _k : parent.removeChannelzChild.bind(parent),
	    };
	}
	const registeredLoadBalancerTypes = {};
	let defaultLoadBalancerType = null;
	function registerLoadBalancerType(typeName, loadBalancerType, loadBalancingConfigType) {
	    registeredLoadBalancerTypes[typeName] = {
	        LoadBalancer: loadBalancerType,
	        LoadBalancingConfig: loadBalancingConfigType,
	    };
	}
	function registerDefaultLoadBalancerType(typeName) {
	    defaultLoadBalancerType = typeName;
	}
	function createLoadBalancer(config, channelControlHelper) {
	    const typeName = config.getLoadBalancerName();
	    if (typeName in registeredLoadBalancerTypes) {
	        return new registeredLoadBalancerTypes[typeName].LoadBalancer(channelControlHelper);
	    }
	    else {
	        return null;
	    }
	}
	function isLoadBalancerNameRegistered(typeName) {
	    return typeName in registeredLoadBalancerTypes;
	}
	function parseLoadBalancingConfig(rawConfig) {
	    const keys = Object.keys(rawConfig);
	    if (keys.length !== 1) {
	        throw new Error('Provided load balancing config has multiple conflicting entries');
	    }
	    const typeName = keys[0];
	    if (typeName in registeredLoadBalancerTypes) {
	        try {
	            return registeredLoadBalancerTypes[typeName].LoadBalancingConfig.createFromJson(rawConfig[typeName]);
	        }
	        catch (e) {
	            throw new Error(`${typeName}: ${e.message}`);
	        }
	    }
	    else {
	        throw new Error(`Unrecognized load balancing config name ${typeName}`);
	    }
	}
	function getDefaultConfig() {
	    if (!defaultLoadBalancerType) {
	        throw new Error('No default load balancer type registered');
	    }
	    return new registeredLoadBalancerTypes[defaultLoadBalancerType].LoadBalancingConfig();
	}
	function selectLbConfigFromList(configs, fallbackTodefault = false) {
	    for (const config of configs) {
	        try {
	            return parseLoadBalancingConfig(config);
	        }
	        catch (e) {
	            (0, logging_1.log)(constants_1.LogVerbosity.DEBUG, 'Config parsing failed with error', e.message);
	            continue;
	        }
	    }
	    if (fallbackTodefault) {
	        if (defaultLoadBalancerType) {
	            return new registeredLoadBalancerTypes[defaultLoadBalancerType].LoadBalancingConfig();
	        }
	        else {
	            return null;
	        }
	    }
	    else {
	        return null;
	    }
	}
	
	return loadBalancer;
}

var serviceConfig = {};

var hasRequiredServiceConfig;

function requireServiceConfig () {
	if (hasRequiredServiceConfig) return serviceConfig;
	hasRequiredServiceConfig = 1;
	/*
	 * Copyright 2019 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(serviceConfig, "__esModule", { value: true });
	serviceConfig.validateRetryThrottling = validateRetryThrottling;
	serviceConfig.validateServiceConfig = validateServiceConfig;
	serviceConfig.extractAndSelectServiceConfig = extractAndSelectServiceConfig;
	/* This file implements gRFC A2 and the service config spec:
	 * https://github.com/grpc/proposal/blob/master/A2-service-configs-in-dns.md
	 * https://github.com/grpc/grpc/blob/master/doc/service_config.md. Each
	 * function here takes an object with unknown structure and returns its
	 * specific object type if the input has the right structure, and throws an
	 * error otherwise. */
	/* The any type is purposely used here. All functions validate their input at
	 * runtime */
	/* eslint-disable @typescript-eslint/no-explicit-any */
	const os = require$$0$2;
	const constants_1 = constants;
	/**
	 * Recognizes a number with up to 9 digits after the decimal point, followed by
	 * an "s", representing a number of seconds.
	 */
	const DURATION_REGEX = /^\d+(\.\d{1,9})?s$/;
	/**
	 * Client language name used for determining whether this client matches a
	 * `ServiceConfigCanaryConfig`'s `clientLanguage` list.
	 */
	const CLIENT_LANGUAGE_STRING = 'node';
	function validateName(obj) {
	    // In this context, and unset field and '' are considered the same
	    if ('service' in obj && obj.service !== '') {
	        if (typeof obj.service !== 'string') {
	            throw new Error(`Invalid method config name: invalid service: expected type string, got ${typeof obj.service}`);
	        }
	        if ('method' in obj && obj.method !== '') {
	            if (typeof obj.method !== 'string') {
	                throw new Error(`Invalid method config name: invalid method: expected type string, got ${typeof obj.service}`);
	            }
	            return {
	                service: obj.service,
	                method: obj.method,
	            };
	        }
	        else {
	            return {
	                service: obj.service,
	            };
	        }
	    }
	    else {
	        if ('method' in obj && obj.method !== undefined) {
	            throw new Error(`Invalid method config name: method set with empty or unset service`);
	        }
	        return {};
	    }
	}
	function validateRetryPolicy(obj) {
	    if (!('maxAttempts' in obj) ||
	        !Number.isInteger(obj.maxAttempts) ||
	        obj.maxAttempts < 2) {
	        throw new Error('Invalid method config retry policy: maxAttempts must be an integer at least 2');
	    }
	    if (!('initialBackoff' in obj) ||
	        typeof obj.initialBackoff !== 'string' ||
	        !DURATION_REGEX.test(obj.initialBackoff)) {
	        throw new Error('Invalid method config retry policy: initialBackoff must be a string consisting of a positive integer or decimal followed by s');
	    }
	    if (!('maxBackoff' in obj) ||
	        typeof obj.maxBackoff !== 'string' ||
	        !DURATION_REGEX.test(obj.maxBackoff)) {
	        throw new Error('Invalid method config retry policy: maxBackoff must be a string consisting of a positive integer or decimal followed by s');
	    }
	    if (!('backoffMultiplier' in obj) ||
	        typeof obj.backoffMultiplier !== 'number' ||
	        obj.backoffMultiplier <= 0) {
	        throw new Error('Invalid method config retry policy: backoffMultiplier must be a number greater than 0');
	    }
	    if (!('retryableStatusCodes' in obj && Array.isArray(obj.retryableStatusCodes))) {
	        throw new Error('Invalid method config retry policy: retryableStatusCodes is required');
	    }
	    if (obj.retryableStatusCodes.length === 0) {
	        throw new Error('Invalid method config retry policy: retryableStatusCodes must be non-empty');
	    }
	    for (const value of obj.retryableStatusCodes) {
	        if (typeof value === 'number') {
	            if (!Object.values(constants_1.Status).includes(value)) {
	                throw new Error('Invalid method config retry policy: retryableStatusCodes value not in status code range');
	            }
	        }
	        else if (typeof value === 'string') {
	            if (!Object.values(constants_1.Status).includes(value.toUpperCase())) {
	                throw new Error('Invalid method config retry policy: retryableStatusCodes value not a status code name');
	            }
	        }
	        else {
	            throw new Error('Invalid method config retry policy: retryableStatusCodes value must be a string or number');
	        }
	    }
	    return {
	        maxAttempts: obj.maxAttempts,
	        initialBackoff: obj.initialBackoff,
	        maxBackoff: obj.maxBackoff,
	        backoffMultiplier: obj.backoffMultiplier,
	        retryableStatusCodes: obj.retryableStatusCodes,
	    };
	}
	function validateHedgingPolicy(obj) {
	    if (!('maxAttempts' in obj) ||
	        !Number.isInteger(obj.maxAttempts) ||
	        obj.maxAttempts < 2) {
	        throw new Error('Invalid method config hedging policy: maxAttempts must be an integer at least 2');
	    }
	    if ('hedgingDelay' in obj &&
	        (typeof obj.hedgingDelay !== 'string' ||
	            !DURATION_REGEX.test(obj.hedgingDelay))) {
	        throw new Error('Invalid method config hedging policy: hedgingDelay must be a string consisting of a positive integer followed by s');
	    }
	    if ('nonFatalStatusCodes' in obj && Array.isArray(obj.nonFatalStatusCodes)) {
	        for (const value of obj.nonFatalStatusCodes) {
	            if (typeof value === 'number') {
	                if (!Object.values(constants_1.Status).includes(value)) {
	                    throw new Error('Invalid method config hedging policy: nonFatalStatusCodes value not in status code range');
	                }
	            }
	            else if (typeof value === 'string') {
	                if (!Object.values(constants_1.Status).includes(value.toUpperCase())) {
	                    throw new Error('Invalid method config hedging policy: nonFatalStatusCodes value not a status code name');
	                }
	            }
	            else {
	                throw new Error('Invalid method config hedging policy: nonFatalStatusCodes value must be a string or number');
	            }
	        }
	    }
	    const result = {
	        maxAttempts: obj.maxAttempts,
	    };
	    if (obj.hedgingDelay) {
	        result.hedgingDelay = obj.hedgingDelay;
	    }
	    if (obj.nonFatalStatusCodes) {
	        result.nonFatalStatusCodes = obj.nonFatalStatusCodes;
	    }
	    return result;
	}
	function validateMethodConfig(obj) {
	    var _a;
	    const result = {
	        name: [],
	    };
	    if (!('name' in obj) || !Array.isArray(obj.name)) {
	        throw new Error('Invalid method config: invalid name array');
	    }
	    for (const name of obj.name) {
	        result.name.push(validateName(name));
	    }
	    if ('waitForReady' in obj) {
	        if (typeof obj.waitForReady !== 'boolean') {
	            throw new Error('Invalid method config: invalid waitForReady');
	        }
	        result.waitForReady = obj.waitForReady;
	    }
	    if ('timeout' in obj) {
	        if (typeof obj.timeout === 'object') {
	            if (!('seconds' in obj.timeout) ||
	                !(typeof obj.timeout.seconds === 'number')) {
	                throw new Error('Invalid method config: invalid timeout.seconds');
	            }
	            if (!('nanos' in obj.timeout) ||
	                !(typeof obj.timeout.nanos === 'number')) {
	                throw new Error('Invalid method config: invalid timeout.nanos');
	            }
	            result.timeout = obj.timeout;
	        }
	        else if (typeof obj.timeout === 'string' &&
	            DURATION_REGEX.test(obj.timeout)) {
	            const timeoutParts = obj.timeout
	                .substring(0, obj.timeout.length - 1)
	                .split('.');
	            result.timeout = {
	                seconds: timeoutParts[0] | 0,
	                nanos: ((_a = timeoutParts[1]) !== null && _a !== void 0 ? _a : 0) | 0,
	            };
	        }
	        else {
	            throw new Error('Invalid method config: invalid timeout');
	        }
	    }
	    if ('maxRequestBytes' in obj) {
	        if (typeof obj.maxRequestBytes !== 'number') {
	            throw new Error('Invalid method config: invalid maxRequestBytes');
	        }
	        result.maxRequestBytes = obj.maxRequestBytes;
	    }
	    if ('maxResponseBytes' in obj) {
	        if (typeof obj.maxResponseBytes !== 'number') {
	            throw new Error('Invalid method config: invalid maxRequestBytes');
	        }
	        result.maxResponseBytes = obj.maxResponseBytes;
	    }
	    if ('retryPolicy' in obj) {
	        if ('hedgingPolicy' in obj) {
	            throw new Error('Invalid method config: retryPolicy and hedgingPolicy cannot both be specified');
	        }
	        else {
	            result.retryPolicy = validateRetryPolicy(obj.retryPolicy);
	        }
	    }
	    else if ('hedgingPolicy' in obj) {
	        result.hedgingPolicy = validateHedgingPolicy(obj.hedgingPolicy);
	    }
	    return result;
	}
	function validateRetryThrottling(obj) {
	    if (!('maxTokens' in obj) ||
	        typeof obj.maxTokens !== 'number' ||
	        obj.maxTokens <= 0 ||
	        obj.maxTokens > 1000) {
	        throw new Error('Invalid retryThrottling: maxTokens must be a number in (0, 1000]');
	    }
	    if (!('tokenRatio' in obj) ||
	        typeof obj.tokenRatio !== 'number' ||
	        obj.tokenRatio <= 0) {
	        throw new Error('Invalid retryThrottling: tokenRatio must be a number greater than 0');
	    }
	    return {
	        maxTokens: +obj.maxTokens.toFixed(3),
	        tokenRatio: +obj.tokenRatio.toFixed(3),
	    };
	}
	function validateLoadBalancingConfig(obj) {
	    if (!(typeof obj === 'object' && obj !== null)) {
	        throw new Error(`Invalid loadBalancingConfig: unexpected type ${typeof obj}`);
	    }
	    const keys = Object.keys(obj);
	    if (keys.length > 1) {
	        throw new Error(`Invalid loadBalancingConfig: unexpected multiple keys ${keys}`);
	    }
	    if (keys.length === 0) {
	        throw new Error('Invalid loadBalancingConfig: load balancing policy name required');
	    }
	    return {
	        [keys[0]]: obj[keys[0]],
	    };
	}
	function validateServiceConfig(obj) {
	    const result = {
	        loadBalancingConfig: [],
	        methodConfig: [],
	    };
	    if ('loadBalancingPolicy' in obj) {
	        if (typeof obj.loadBalancingPolicy === 'string') {
	            result.loadBalancingPolicy = obj.loadBalancingPolicy;
	        }
	        else {
	            throw new Error('Invalid service config: invalid loadBalancingPolicy');
	        }
	    }
	    if ('loadBalancingConfig' in obj) {
	        if (Array.isArray(obj.loadBalancingConfig)) {
	            for (const config of obj.loadBalancingConfig) {
	                result.loadBalancingConfig.push(validateLoadBalancingConfig(config));
	            }
	        }
	        else {
	            throw new Error('Invalid service config: invalid loadBalancingConfig');
	        }
	    }
	    if ('methodConfig' in obj) {
	        if (Array.isArray(obj.methodConfig)) {
	            for (const methodConfig of obj.methodConfig) {
	                result.methodConfig.push(validateMethodConfig(methodConfig));
	            }
	        }
	    }
	    if ('retryThrottling' in obj) {
	        result.retryThrottling = validateRetryThrottling(obj.retryThrottling);
	    }
	    // Validate method name uniqueness
	    const seenMethodNames = [];
	    for (const methodConfig of result.methodConfig) {
	        for (const name of methodConfig.name) {
	            for (const seenName of seenMethodNames) {
	                if (name.service === seenName.service &&
	                    name.method === seenName.method) {
	                    throw new Error(`Invalid service config: duplicate name ${name.service}/${name.method}`);
	                }
	            }
	            seenMethodNames.push(name);
	        }
	    }
	    return result;
	}
	function validateCanaryConfig(obj) {
	    if (!('serviceConfig' in obj)) {
	        throw new Error('Invalid service config choice: missing service config');
	    }
	    const result = {
	        serviceConfig: validateServiceConfig(obj.serviceConfig),
	    };
	    if ('clientLanguage' in obj) {
	        if (Array.isArray(obj.clientLanguage)) {
	            result.clientLanguage = [];
	            for (const lang of obj.clientLanguage) {
	                if (typeof lang === 'string') {
	                    result.clientLanguage.push(lang);
	                }
	                else {
	                    throw new Error('Invalid service config choice: invalid clientLanguage');
	                }
	            }
	        }
	        else {
	            throw new Error('Invalid service config choice: invalid clientLanguage');
	        }
	    }
	    if ('clientHostname' in obj) {
	        if (Array.isArray(obj.clientHostname)) {
	            result.clientHostname = [];
	            for (const lang of obj.clientHostname) {
	                if (typeof lang === 'string') {
	                    result.clientHostname.push(lang);
	                }
	                else {
	                    throw new Error('Invalid service config choice: invalid clientHostname');
	                }
	            }
	        }
	        else {
	            throw new Error('Invalid service config choice: invalid clientHostname');
	        }
	    }
	    if ('percentage' in obj) {
	        if (typeof obj.percentage === 'number' &&
	            0 <= obj.percentage &&
	            obj.percentage <= 100) {
	            result.percentage = obj.percentage;
	        }
	        else {
	            throw new Error('Invalid service config choice: invalid percentage');
	        }
	    }
	    // Validate that no unexpected fields are present
	    const allowedFields = [
	        'clientLanguage',
	        'percentage',
	        'clientHostname',
	        'serviceConfig',
	    ];
	    for (const field in obj) {
	        if (!allowedFields.includes(field)) {
	            throw new Error(`Invalid service config choice: unexpected field ${field}`);
	        }
	    }
	    return result;
	}
	function validateAndSelectCanaryConfig(obj, percentage) {
	    if (!Array.isArray(obj)) {
	        throw new Error('Invalid service config list');
	    }
	    for (const config of obj) {
	        const validatedConfig = validateCanaryConfig(config);
	        /* For each field, we check if it is present, then only discard the
	         * config if the field value does not match the current client */
	        if (typeof validatedConfig.percentage === 'number' &&
	            percentage > validatedConfig.percentage) {
	            continue;
	        }
	        if (Array.isArray(validatedConfig.clientHostname)) {
	            let hostnameMatched = false;
	            for (const hostname of validatedConfig.clientHostname) {
	                if (hostname === os.hostname()) {
	                    hostnameMatched = true;
	                }
	            }
	            if (!hostnameMatched) {
	                continue;
	            }
	        }
	        if (Array.isArray(validatedConfig.clientLanguage)) {
	            let languageMatched = false;
	            for (const language of validatedConfig.clientLanguage) {
	                if (language === CLIENT_LANGUAGE_STRING) {
	                    languageMatched = true;
	                }
	            }
	            if (!languageMatched) {
	                continue;
	            }
	        }
	        return validatedConfig.serviceConfig;
	    }
	    throw new Error('No matching service config found');
	}
	/**
	 * Find the "grpc_config" record among the TXT records, parse its value as JSON, validate its contents,
	 * and select a service config with selection fields that all match this client. Most of these steps
	 * can fail with an error; the caller must handle any errors thrown this way.
	 * @param txtRecord The TXT record array that is output from a successful call to dns.resolveTxt
	 * @param percentage A number chosen from the range [0, 100) that is used to select which config to use
	 * @return The service configuration to use, given the percentage value, or null if the service config
	 *     data has a valid format but none of the options match the current client.
	 */
	function extractAndSelectServiceConfig(txtRecord, percentage) {
	    for (const record of txtRecord) {
	        if (record.length > 0 && record[0].startsWith('grpc_config=')) {
	            /* Treat the list of strings in this record as a single string and remove
	             * "grpc_config=" from the beginning. The rest should be a JSON string */
	            const recordString = record.join('').substring('grpc_config='.length);
	            const recordJson = JSON.parse(recordString);
	            return validateAndSelectCanaryConfig(recordJson, percentage);
	        }
	    }
	    return null;
	}
	
	return serviceConfig;
}

var connectivityState = {};

/*
 * Copyright 2021 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(connectivityState, "__esModule", { value: true });
connectivityState.ConnectivityState = void 0;
var ConnectivityState;
(function (ConnectivityState) {
    ConnectivityState[ConnectivityState["IDLE"] = 0] = "IDLE";
    ConnectivityState[ConnectivityState["CONNECTING"] = 1] = "CONNECTING";
    ConnectivityState[ConnectivityState["READY"] = 2] = "READY";
    ConnectivityState[ConnectivityState["TRANSIENT_FAILURE"] = 3] = "TRANSIENT_FAILURE";
    ConnectivityState[ConnectivityState["SHUTDOWN"] = 4] = "SHUTDOWN";
})(ConnectivityState || (connectivityState.ConnectivityState = ConnectivityState = {}));

var picker = {};

var hasRequiredPicker;

function requirePicker () {
	if (hasRequiredPicker) return picker;
	hasRequiredPicker = 1;
	/*
	 * Copyright 2019 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(picker, "__esModule", { value: true });
	picker.QueuePicker = picker.UnavailablePicker = picker.PickResultType = void 0;
	const metadata_1 = metadata;
	const constants_1 = constants;
	var PickResultType;
	(function (PickResultType) {
	    PickResultType[PickResultType["COMPLETE"] = 0] = "COMPLETE";
	    PickResultType[PickResultType["QUEUE"] = 1] = "QUEUE";
	    PickResultType[PickResultType["TRANSIENT_FAILURE"] = 2] = "TRANSIENT_FAILURE";
	    PickResultType[PickResultType["DROP"] = 3] = "DROP";
	})(PickResultType || (picker.PickResultType = PickResultType = {}));
	/**
	 * A standard picker representing a load balancer in the TRANSIENT_FAILURE
	 * state. Always responds to every pick request with an UNAVAILABLE status.
	 */
	class UnavailablePicker {
	    constructor(status) {
	        this.status = Object.assign({ code: constants_1.Status.UNAVAILABLE, details: 'No connection established', metadata: new metadata_1.Metadata() }, status);
	    }
	    pick(pickArgs) {
	        return {
	            pickResultType: PickResultType.TRANSIENT_FAILURE,
	            subchannel: null,
	            status: this.status,
	            onCallStarted: null,
	            onCallEnded: null,
	        };
	    }
	}
	picker.UnavailablePicker = UnavailablePicker;
	/**
	 * A standard picker representing a load balancer in the IDLE or CONNECTING
	 * state. Always responds to every pick request with a QUEUE pick result
	 * indicating that the pick should be tried again with the next `Picker`. Also
	 * reports back to the load balancer that a connection should be established
	 * once any pick is attempted.
	 * If the childPicker is provided, delegate to it instead of returning the
	 * hardcoded QUEUE pick result, but still calls exitIdle.
	 */
	class QueuePicker {
	    // Constructed with a load balancer. Calls exitIdle on it the first time pick is called
	    constructor(loadBalancer, childPicker) {
	        this.loadBalancer = loadBalancer;
	        this.childPicker = childPicker;
	        this.calledExitIdle = false;
	    }
	    pick(pickArgs) {
	        if (!this.calledExitIdle) {
	            process.nextTick(() => {
	                this.loadBalancer.exitIdle();
	            });
	            this.calledExitIdle = true;
	        }
	        if (this.childPicker) {
	            return this.childPicker.pick(pickArgs);
	        }
	        else {
	            return {
	                pickResultType: PickResultType.QUEUE,
	                subchannel: null,
	                status: null,
	                onCallStarted: null,
	                onCallEnded: null,
	            };
	        }
	    }
	}
	picker.QueuePicker = QueuePicker;
	
	return picker;
}

var backoffTimeout = {};

var hasRequiredBackoffTimeout;

function requireBackoffTimeout () {
	if (hasRequiredBackoffTimeout) return backoffTimeout;
	hasRequiredBackoffTimeout = 1;
	/*
	 * Copyright 2019 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(backoffTimeout, "__esModule", { value: true });
	backoffTimeout.BackoffTimeout = void 0;
	const constants_1 = constants;
	const logging = logging$8;
	const TRACER_NAME = 'backoff';
	const INITIAL_BACKOFF_MS = 1000;
	const BACKOFF_MULTIPLIER = 1.6;
	const MAX_BACKOFF_MS = 120000;
	const BACKOFF_JITTER = 0.2;
	/**
	 * Get a number uniformly at random in the range [min, max)
	 * @param min
	 * @param max
	 */
	function uniformRandom(min, max) {
	    return Math.random() * (max - min) + min;
	}
	class BackoffTimeout {
	    constructor(callback, options) {
	        this.callback = callback;
	        /**
	         * The delay time at the start, and after each reset.
	         */
	        this.initialDelay = INITIAL_BACKOFF_MS;
	        /**
	         * The exponential backoff multiplier.
	         */
	        this.multiplier = BACKOFF_MULTIPLIER;
	        /**
	         * The maximum delay time
	         */
	        this.maxDelay = MAX_BACKOFF_MS;
	        /**
	         * The maximum fraction by which the delay time can randomly vary after
	         * applying the multiplier.
	         */
	        this.jitter = BACKOFF_JITTER;
	        /**
	         * Indicates whether the timer is currently running.
	         */
	        this.running = false;
	        /**
	         * Indicates whether the timer should keep the Node process running if no
	         * other async operation is doing so.
	         */
	        this.hasRef = true;
	        /**
	         * The time that the currently running timer was started. Only valid if
	         * running is true.
	         */
	        this.startTime = new Date();
	        /**
	         * The approximate time that the currently running timer will end. Only valid
	         * if running is true.
	         */
	        this.endTime = new Date();
	        this.id = BackoffTimeout.getNextId();
	        if (options) {
	            if (options.initialDelay) {
	                this.initialDelay = options.initialDelay;
	            }
	            if (options.multiplier) {
	                this.multiplier = options.multiplier;
	            }
	            if (options.jitter) {
	                this.jitter = options.jitter;
	            }
	            if (options.maxDelay) {
	                this.maxDelay = options.maxDelay;
	            }
	        }
	        this.trace('constructed initialDelay=' + this.initialDelay + ' multiplier=' + this.multiplier + ' jitter=' + this.jitter + ' maxDelay=' + this.maxDelay);
	        this.nextDelay = this.initialDelay;
	        this.timerId = setTimeout(() => { }, 0);
	        clearTimeout(this.timerId);
	    }
	    static getNextId() {
	        return this.nextId++;
	    }
	    trace(text) {
	        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '{' + this.id + '} ' + text);
	    }
	    runTimer(delay) {
	        var _a, _b;
	        this.trace('runTimer(delay=' + delay + ')');
	        this.endTime = this.startTime;
	        this.endTime.setMilliseconds(this.endTime.getMilliseconds() + delay);
	        clearTimeout(this.timerId);
	        this.timerId = setTimeout(() => {
	            this.trace('timer fired');
	            this.running = false;
	            this.callback();
	        }, delay);
	        if (!this.hasRef) {
	            (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
	        }
	    }
	    /**
	     * Call the callback after the current amount of delay time
	     */
	    runOnce() {
	        this.trace('runOnce()');
	        this.running = true;
	        this.startTime = new Date();
	        this.runTimer(this.nextDelay);
	        const nextBackoff = Math.min(this.nextDelay * this.multiplier, this.maxDelay);
	        const jitterMagnitude = nextBackoff * this.jitter;
	        this.nextDelay =
	            nextBackoff + uniformRandom(-jitterMagnitude, jitterMagnitude);
	    }
	    /**
	     * Stop the timer. The callback will not be called until `runOnce` is called
	     * again.
	     */
	    stop() {
	        this.trace('stop()');
	        clearTimeout(this.timerId);
	        this.running = false;
	    }
	    /**
	     * Reset the delay time to its initial value. If the timer is still running,
	     * retroactively apply that reset to the current timer.
	     */
	    reset() {
	        this.trace('reset() running=' + this.running);
	        this.nextDelay = this.initialDelay;
	        if (this.running) {
	            const now = new Date();
	            const newEndTime = this.startTime;
	            newEndTime.setMilliseconds(newEndTime.getMilliseconds() + this.nextDelay);
	            clearTimeout(this.timerId);
	            if (now < newEndTime) {
	                this.runTimer(newEndTime.getTime() - now.getTime());
	            }
	            else {
	                this.running = false;
	            }
	        }
	    }
	    /**
	     * Check whether the timer is currently running.
	     */
	    isRunning() {
	        return this.running;
	    }
	    /**
	     * Set that while the timer is running, it should keep the Node process
	     * running.
	     */
	    ref() {
	        var _a, _b;
	        this.hasRef = true;
	        (_b = (_a = this.timerId).ref) === null || _b === void 0 ? void 0 : _b.call(_a);
	    }
	    /**
	     * Set that while the timer is running, it should not keep the Node process
	     * running.
	     */
	    unref() {
	        var _a, _b;
	        this.hasRef = false;
	        (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
	    }
	    /**
	     * Get the approximate timestamp of when the timer will fire. Only valid if
	     * this.isRunning() is true.
	     */
	    getEndTime() {
	        return this.endTime;
	    }
	}
	backoffTimeout.BackoffTimeout = BackoffTimeout;
	BackoffTimeout.nextId = 0;
	
	return backoffTimeout;
}

var loadBalancerChildHandler = {};

var hasRequiredLoadBalancerChildHandler;

function requireLoadBalancerChildHandler () {
	if (hasRequiredLoadBalancerChildHandler) return loadBalancerChildHandler;
	hasRequiredLoadBalancerChildHandler = 1;
	/*
	 * Copyright 2020 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(loadBalancerChildHandler, "__esModule", { value: true });
	loadBalancerChildHandler.ChildLoadBalancerHandler = void 0;
	const load_balancer_1 = requireLoadBalancer();
	const connectivity_state_1 = connectivityState;
	const TYPE_NAME = 'child_load_balancer_helper';
	class ChildLoadBalancerHandler {
	    constructor(channelControlHelper) {
	        this.channelControlHelper = channelControlHelper;
	        this.currentChild = null;
	        this.pendingChild = null;
	        this.latestConfig = null;
	        this.ChildPolicyHelper = class {
	            constructor(parent) {
	                this.parent = parent;
	                this.child = null;
	            }
	            createSubchannel(subchannelAddress, subchannelArgs) {
	                return this.parent.channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);
	            }
	            updateState(connectivityState, picker, errorMessage) {
	                var _a;
	                if (this.calledByPendingChild()) {
	                    if (connectivityState === connectivity_state_1.ConnectivityState.CONNECTING) {
	                        return;
	                    }
	                    (_a = this.parent.currentChild) === null || _a === void 0 ? void 0 : _a.destroy();
	                    this.parent.currentChild = this.parent.pendingChild;
	                    this.parent.pendingChild = null;
	                }
	                else if (!this.calledByCurrentChild()) {
	                    return;
	                }
	                this.parent.channelControlHelper.updateState(connectivityState, picker, errorMessage);
	            }
	            requestReresolution() {
	                var _a;
	                const latestChild = (_a = this.parent.pendingChild) !== null && _a !== void 0 ? _a : this.parent.currentChild;
	                if (this.child === latestChild) {
	                    this.parent.channelControlHelper.requestReresolution();
	                }
	            }
	            setChild(newChild) {
	                this.child = newChild;
	            }
	            addChannelzChild(child) {
	                this.parent.channelControlHelper.addChannelzChild(child);
	            }
	            removeChannelzChild(child) {
	                this.parent.channelControlHelper.removeChannelzChild(child);
	            }
	            calledByPendingChild() {
	                return this.child === this.parent.pendingChild;
	            }
	            calledByCurrentChild() {
	                return this.child === this.parent.currentChild;
	            }
	        };
	    }
	    configUpdateRequiresNewPolicyInstance(oldConfig, newConfig) {
	        return oldConfig.getLoadBalancerName() !== newConfig.getLoadBalancerName();
	    }
	    /**
	     * Prerequisites: lbConfig !== null and lbConfig.name is registered
	     * @param endpointList
	     * @param lbConfig
	     * @param attributes
	     */
	    updateAddressList(endpointList, lbConfig, options) {
	        let childToUpdate;
	        if (this.currentChild === null ||
	            this.latestConfig === null ||
	            this.configUpdateRequiresNewPolicyInstance(this.latestConfig, lbConfig)) {
	            const newHelper = new this.ChildPolicyHelper(this);
	            const newChild = (0, load_balancer_1.createLoadBalancer)(lbConfig, newHelper);
	            newHelper.setChild(newChild);
	            if (this.currentChild === null) {
	                this.currentChild = newChild;
	                childToUpdate = this.currentChild;
	            }
	            else {
	                if (this.pendingChild) {
	                    this.pendingChild.destroy();
	                }
	                this.pendingChild = newChild;
	                childToUpdate = this.pendingChild;
	            }
	        }
	        else {
	            if (this.pendingChild === null) {
	                childToUpdate = this.currentChild;
	            }
	            else {
	                childToUpdate = this.pendingChild;
	            }
	        }
	        this.latestConfig = lbConfig;
	        childToUpdate.updateAddressList(endpointList, lbConfig, options);
	    }
	    exitIdle() {
	        if (this.currentChild) {
	            this.currentChild.exitIdle();
	            if (this.pendingChild) {
	                this.pendingChild.exitIdle();
	            }
	        }
	    }
	    resetBackoff() {
	        if (this.currentChild) {
	            this.currentChild.resetBackoff();
	            if (this.pendingChild) {
	                this.pendingChild.resetBackoff();
	            }
	        }
	    }
	    destroy() {
	        /* Note: state updates are only propagated from the child balancer if that
	         * object is equal to this.currentChild or this.pendingChild. Since this
	         * function sets both of those to null, no further state updates will
	         * occur after this function returns. */
	        if (this.currentChild) {
	            this.currentChild.destroy();
	            this.currentChild = null;
	        }
	        if (this.pendingChild) {
	            this.pendingChild.destroy();
	            this.pendingChild = null;
	        }
	    }
	    getTypeName() {
	        return TYPE_NAME;
	    }
	}
	loadBalancerChildHandler.ChildLoadBalancerHandler = ChildLoadBalancerHandler;
	
	return loadBalancerChildHandler;
}

/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(resolvingLoadBalancer, "__esModule", { value: true });
resolvingLoadBalancer.ResolvingLoadBalancer = void 0;
const load_balancer_1 = requireLoadBalancer();
const service_config_1 = requireServiceConfig();
const connectivity_state_1$1 = connectivityState;
const resolver_1$1 = resolver;
const picker_1$1 = requirePicker();
const backoff_timeout_1 = requireBackoffTimeout();
const constants_1$a = constants;
const metadata_1$5 = metadata;
const logging$7 = logging$8;
const constants_2$1 = constants;
const uri_parser_1$3 = uriParser;
const load_balancer_child_handler_1 = requireLoadBalancerChildHandler();
const TRACER_NAME$6 = 'resolving_load_balancer';
function trace$1(text) {
    logging$7.trace(constants_2$1.LogVerbosity.DEBUG, TRACER_NAME$6, text);
}
/**
 * Name match levels in order from most to least specific. This is the order in
 * which searches will be performed.
 */
const NAME_MATCH_LEVEL_ORDER = [
    'SERVICE_AND_METHOD',
    'SERVICE',
    'EMPTY',
];
function hasMatchingName(service, method, methodConfig, matchLevel) {
    for (const name of methodConfig.name) {
        switch (matchLevel) {
            case 'EMPTY':
                if (!name.service && !name.method) {
                    return true;
                }
                break;
            case 'SERVICE':
                if (name.service === service && !name.method) {
                    return true;
                }
                break;
            case 'SERVICE_AND_METHOD':
                if (name.service === service && name.method === method) {
                    return true;
                }
        }
    }
    return false;
}
function findMatchingConfig(service, method, methodConfigs, matchLevel) {
    for (const config of methodConfigs) {
        if (hasMatchingName(service, method, config, matchLevel)) {
            return config;
        }
    }
    return null;
}
function getDefaultConfigSelector(serviceConfig) {
    return {
        invoke(methodName, metadata) {
            var _a, _b;
            const splitName = methodName.split('/').filter(x => x.length > 0);
            const service = (_a = splitName[0]) !== null && _a !== void 0 ? _a : '';
            const method = (_b = splitName[1]) !== null && _b !== void 0 ? _b : '';
            if (serviceConfig && serviceConfig.methodConfig) {
                /* Check for the following in order, and return the first method
                * config that matches:
                * 1. A name that exactly matches the service and method
                * 2. A name with no method set that matches the service
                * 3. An empty name
                */
                for (const matchLevel of NAME_MATCH_LEVEL_ORDER) {
                    const matchingConfig = findMatchingConfig(service, method, serviceConfig.methodConfig, matchLevel);
                    if (matchingConfig) {
                        return {
                            methodConfig: matchingConfig,
                            pickInformation: {},
                            status: constants_1$a.Status.OK,
                            dynamicFilterFactories: [],
                        };
                    }
                }
            }
            return {
                methodConfig: { name: [] },
                pickInformation: {},
                status: constants_1$a.Status.OK,
                dynamicFilterFactories: [],
            };
        },
        unref() { }
    };
}
class ResolvingLoadBalancer {
    /**
     * Wrapper class that behaves like a `LoadBalancer` and also handles name
     * resolution internally.
     * @param target The address of the backend to connect to.
     * @param channelControlHelper `ChannelControlHelper` instance provided by
     *     this load balancer's owner.
     * @param defaultServiceConfig The default service configuration to be used
     *     if none is provided by the name resolver. A `null` value indicates
     *     that the default behavior should be the default unconfigured behavior.
     *     In practice, that means using the "pick first" load balancer
     *     implmentation
     */
    constructor(target, channelControlHelper, channelOptions, onSuccessfulResolution, onFailedResolution) {
        this.target = target;
        this.channelControlHelper = channelControlHelper;
        this.channelOptions = channelOptions;
        this.onSuccessfulResolution = onSuccessfulResolution;
        this.onFailedResolution = onFailedResolution;
        this.latestChildState = connectivity_state_1$1.ConnectivityState.IDLE;
        this.latestChildPicker = new picker_1$1.QueuePicker(this);
        this.latestChildErrorMessage = null;
        /**
         * This resolving load balancer's current connectivity state.
         */
        this.currentState = connectivity_state_1$1.ConnectivityState.IDLE;
        /**
         * The service config object from the last successful resolution, if
         * available. A value of null indicates that we have not yet received a valid
         * service config from the resolver.
         */
        this.previousServiceConfig = null;
        /**
         * Indicates whether we should attempt to resolve again after the backoff
         * timer runs out.
         */
        this.continueResolving = false;
        if (channelOptions['grpc.service_config']) {
            this.defaultServiceConfig = (0, service_config_1.validateServiceConfig)(JSON.parse(channelOptions['grpc.service_config']));
        }
        else {
            this.defaultServiceConfig = {
                loadBalancingConfig: [],
                methodConfig: [],
            };
        }
        this.updateState(connectivity_state_1$1.ConnectivityState.IDLE, new picker_1$1.QueuePicker(this), null);
        this.childLoadBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler({
            createSubchannel: channelControlHelper.createSubchannel.bind(channelControlHelper),
            requestReresolution: () => {
                /* If the backoffTimeout is running, we're still backing off from
                 * making resolve requests, so we shouldn't make another one here.
                 * In that case, the backoff timer callback will call
                 * updateResolution */
                if (this.backoffTimeout.isRunning()) {
                    trace$1('requestReresolution delayed by backoff timer until ' +
                        this.backoffTimeout.getEndTime().toISOString());
                    this.continueResolving = true;
                }
                else {
                    this.updateResolution();
                }
            },
            updateState: (newState, picker, errorMessage) => {
                this.latestChildState = newState;
                this.latestChildPicker = picker;
                this.latestChildErrorMessage = errorMessage;
                this.updateState(newState, picker, errorMessage);
            },
            addChannelzChild: channelControlHelper.addChannelzChild.bind(channelControlHelper),
            removeChannelzChild: channelControlHelper.removeChannelzChild.bind(channelControlHelper),
        });
        this.innerResolver = (0, resolver_1$1.createResolver)(target, {
            onSuccessfulResolution: (endpointList, serviceConfig, serviceConfigError, configSelector, attributes) => {
                var _a;
                this.backoffTimeout.stop();
                this.backoffTimeout.reset();
                let workingServiceConfig = null;
                /* This first group of conditionals implements the algorithm described
                 * in https://github.com/grpc/proposal/blob/master/A21-service-config-error-handling.md
                 * in the section called "Behavior on receiving a new gRPC Config".
                 */
                if (serviceConfig === null) {
                    // Step 4 and 5
                    if (serviceConfigError === null) {
                        // Step 5
                        this.previousServiceConfig = null;
                        workingServiceConfig = this.defaultServiceConfig;
                    }
                    else {
                        // Step 4
                        if (this.previousServiceConfig === null) {
                            // Step 4.ii
                            this.handleResolutionFailure(serviceConfigError);
                        }
                        else {
                            // Step 4.i
                            workingServiceConfig = this.previousServiceConfig;
                        }
                    }
                }
                else {
                    // Step 3
                    workingServiceConfig = serviceConfig;
                    this.previousServiceConfig = serviceConfig;
                }
                const workingConfigList = (_a = workingServiceConfig === null || workingServiceConfig === void 0 ? void 0 : workingServiceConfig.loadBalancingConfig) !== null && _a !== void 0 ? _a : [];
                const loadBalancingConfig = (0, load_balancer_1.selectLbConfigFromList)(workingConfigList, true);
                if (loadBalancingConfig === null) {
                    // There were load balancing configs but none are supported. This counts as a resolution failure
                    this.handleResolutionFailure({
                        code: constants_1$a.Status.UNAVAILABLE,
                        details: 'All load balancer options in service config are not compatible',
                        metadata: new metadata_1$5.Metadata(),
                    });
                    configSelector === null || configSelector === void 0 ? void 0 : configSelector.unref();
                    return;
                }
                this.childLoadBalancer.updateAddressList(endpointList, loadBalancingConfig, Object.assign(Object.assign({}, this.channelOptions), attributes));
                const finalServiceConfig = workingServiceConfig !== null && workingServiceConfig !== void 0 ? workingServiceConfig : this.defaultServiceConfig;
                this.onSuccessfulResolution(finalServiceConfig, configSelector !== null && configSelector !== void 0 ? configSelector : getDefaultConfigSelector(finalServiceConfig));
            },
            onError: (error) => {
                this.handleResolutionFailure(error);
            },
        }, channelOptions);
        const backoffOptions = {
            initialDelay: channelOptions['grpc.initial_reconnect_backoff_ms'],
            maxDelay: channelOptions['grpc.max_reconnect_backoff_ms'],
        };
        this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(() => {
            if (this.continueResolving) {
                this.updateResolution();
                this.continueResolving = false;
            }
            else {
                this.updateState(this.latestChildState, this.latestChildPicker, this.latestChildErrorMessage);
            }
        }, backoffOptions);
        this.backoffTimeout.unref();
    }
    updateResolution() {
        this.innerResolver.updateResolution();
        if (this.currentState === connectivity_state_1$1.ConnectivityState.IDLE) {
            /* this.latestChildPicker is initialized as new QueuePicker(this), which
             * is an appropriate value here if the child LB policy is unset.
             * Otherwise, we want to delegate to the child here, in case that
             * triggers something. */
            this.updateState(connectivity_state_1$1.ConnectivityState.CONNECTING, this.latestChildPicker, this.latestChildErrorMessage);
        }
        this.backoffTimeout.runOnce();
    }
    updateState(connectivityState, picker, errorMessage) {
        trace$1((0, uri_parser_1$3.uriToString)(this.target) +
            ' ' +
            connectivity_state_1$1.ConnectivityState[this.currentState] +
            ' -> ' +
            connectivity_state_1$1.ConnectivityState[connectivityState]);
        // Ensure that this.exitIdle() is called by the picker
        if (connectivityState === connectivity_state_1$1.ConnectivityState.IDLE) {
            picker = new picker_1$1.QueuePicker(this, picker);
        }
        this.currentState = connectivityState;
        this.channelControlHelper.updateState(connectivityState, picker, errorMessage);
    }
    handleResolutionFailure(error) {
        if (this.latestChildState === connectivity_state_1$1.ConnectivityState.IDLE) {
            this.updateState(connectivity_state_1$1.ConnectivityState.TRANSIENT_FAILURE, new picker_1$1.UnavailablePicker(error), error.details);
            this.onFailedResolution(error);
        }
    }
    exitIdle() {
        if (this.currentState === connectivity_state_1$1.ConnectivityState.IDLE ||
            this.currentState === connectivity_state_1$1.ConnectivityState.TRANSIENT_FAILURE) {
            if (this.backoffTimeout.isRunning()) {
                this.continueResolving = true;
            }
            else {
                this.updateResolution();
            }
        }
        this.childLoadBalancer.exitIdle();
    }
    updateAddressList(endpointList, lbConfig) {
        throw new Error('updateAddressList not supported on ResolvingLoadBalancer');
    }
    resetBackoff() {
        this.backoffTimeout.reset();
        this.childLoadBalancer.resetBackoff();
    }
    destroy() {
        this.childLoadBalancer.destroy();
        this.innerResolver.destroy();
        this.backoffTimeout.reset();
        this.backoffTimeout.stop();
        this.latestChildState = connectivity_state_1$1.ConnectivityState.IDLE;
        this.latestChildPicker = new picker_1$1.QueuePicker(this);
        this.currentState = connectivity_state_1$1.ConnectivityState.IDLE;
        this.previousServiceConfig = null;
        this.continueResolving = false;
    }
    getTypeName() {
        return 'resolving_load_balancer';
    }
}
resolvingLoadBalancer.ResolvingLoadBalancer = ResolvingLoadBalancer;

var subchannelPool = {};

var channelOptions = {};

/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(channelOptions, "__esModule", { value: true });
channelOptions.recognizedOptions = void 0;
channelOptions.channelOptionsEqual = channelOptionsEqual;
/**
 * This is for checking provided options at runtime. This is an object for
 * easier membership checking.
 */
channelOptions.recognizedOptions = {
    'grpc.ssl_target_name_override': true,
    'grpc.primary_user_agent': true,
    'grpc.secondary_user_agent': true,
    'grpc.default_authority': true,
    'grpc.keepalive_time_ms': true,
    'grpc.keepalive_timeout_ms': true,
    'grpc.keepalive_permit_without_calls': true,
    'grpc.service_config': true,
    'grpc.max_concurrent_streams': true,
    'grpc.initial_reconnect_backoff_ms': true,
    'grpc.max_reconnect_backoff_ms': true,
    'grpc.use_local_subchannel_pool': true,
    'grpc.max_send_message_length': true,
    'grpc.max_receive_message_length': true,
    'grpc.enable_http_proxy': true,
    'grpc.enable_channelz': true,
    'grpc.dns_min_time_between_resolutions_ms': true,
    'grpc.enable_retries': true,
    'grpc.per_rpc_retry_buffer_size': true,
    'grpc.retry_buffer_size': true,
    'grpc.max_connection_age_ms': true,
    'grpc.max_connection_age_grace_ms': true,
    'grpc-node.max_session_memory': true,
    'grpc.service_config_disable_resolution': true,
    'grpc.client_idle_timeout_ms': true,
    'grpc-node.tls_enable_trace': true,
    'grpc.lb.ring_hash.ring_size_cap': true,
    'grpc-node.retry_max_attempts_limit': true,
    'grpc-node.flow_control_window': true,
};
function channelOptionsEqual(options1, options2) {
    const keys1 = Object.keys(options1).sort();
    const keys2 = Object.keys(options2).sort();
    if (keys1.length !== keys2.length) {
        return false;
    }
    for (let i = 0; i < keys1.length; i += 1) {
        if (keys1[i] !== keys2[i]) {
            return false;
        }
        if (options1[keys1[i]] !== options2[keys2[i]]) {
            return false;
        }
    }
    return true;
}

var subchannel = {};

var subchannelAddress = {};

/*
 * Copyright 2021 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(subchannelAddress, "__esModule", { value: true });
subchannelAddress.EndpointMap = void 0;
subchannelAddress.isTcpSubchannelAddress = isTcpSubchannelAddress;
subchannelAddress.subchannelAddressEqual = subchannelAddressEqual;
subchannelAddress.subchannelAddressToString = subchannelAddressToString;
subchannelAddress.stringToSubchannelAddress = stringToSubchannelAddress;
subchannelAddress.endpointEqual = endpointEqual;
subchannelAddress.endpointToString = endpointToString;
subchannelAddress.endpointHasAddress = endpointHasAddress;
const net_1$1 = require$$0$3;
function isTcpSubchannelAddress(address) {
    return 'port' in address;
}
function subchannelAddressEqual(address1, address2) {
    if (!address1 && !address2) {
        return true;
    }
    if (!address1 || !address2) {
        return false;
    }
    if (isTcpSubchannelAddress(address1)) {
        return (isTcpSubchannelAddress(address2) &&
            address1.host === address2.host &&
            address1.port === address2.port);
    }
    else {
        return !isTcpSubchannelAddress(address2) && address1.path === address2.path;
    }
}
function subchannelAddressToString(address) {
    if (isTcpSubchannelAddress(address)) {
        if ((0, net_1$1.isIPv6)(address.host)) {
            return '[' + address.host + ']:' + address.port;
        }
        else {
            return address.host + ':' + address.port;
        }
    }
    else {
        return address.path;
    }
}
const DEFAULT_PORT = 443;
function stringToSubchannelAddress(addressString, port) {
    if ((0, net_1$1.isIP)(addressString)) {
        return {
            host: addressString,
            port: port !== null && port !== void 0 ? port : DEFAULT_PORT,
        };
    }
    else {
        return {
            path: addressString,
        };
    }
}
function endpointEqual(endpoint1, endpoint2) {
    if (endpoint1.addresses.length !== endpoint2.addresses.length) {
        return false;
    }
    for (let i = 0; i < endpoint1.addresses.length; i++) {
        if (!subchannelAddressEqual(endpoint1.addresses[i], endpoint2.addresses[i])) {
            return false;
        }
    }
    return true;
}
function endpointToString(endpoint) {
    return ('[' + endpoint.addresses.map(subchannelAddressToString).join(', ') + ']');
}
function endpointHasAddress(endpoint, expectedAddress) {
    for (const address of endpoint.addresses) {
        if (subchannelAddressEqual(address, expectedAddress)) {
            return true;
        }
    }
    return false;
}
function endpointEqualUnordered(endpoint1, endpoint2) {
    if (endpoint1.addresses.length !== endpoint2.addresses.length) {
        return false;
    }
    for (const address1 of endpoint1.addresses) {
        let matchFound = false;
        for (const address2 of endpoint2.addresses) {
            if (subchannelAddressEqual(address1, address2)) {
                matchFound = true;
                break;
            }
        }
        if (!matchFound) {
            return false;
        }
    }
    return true;
}
class EndpointMap {
    constructor() {
        this.map = new Set();
    }
    get size() {
        return this.map.size;
    }
    getForSubchannelAddress(address) {
        for (const entry of this.map) {
            if (endpointHasAddress(entry.key, address)) {
                return entry.value;
            }
        }
        return undefined;
    }
    /**
     * Delete any entries in this map with keys that are not in endpoints
     * @param endpoints
     */
    deleteMissing(endpoints) {
        const removedValues = [];
        for (const entry of this.map) {
            let foundEntry = false;
            for (const endpoint of endpoints) {
                if (endpointEqualUnordered(endpoint, entry.key)) {
                    foundEntry = true;
                }
            }
            if (!foundEntry) {
                removedValues.push(entry.value);
                this.map.delete(entry);
            }
        }
        return removedValues;
    }
    get(endpoint) {
        for (const entry of this.map) {
            if (endpointEqualUnordered(endpoint, entry.key)) {
                return entry.value;
            }
        }
        return undefined;
    }
    set(endpoint, mapEntry) {
        for (const entry of this.map) {
            if (endpointEqualUnordered(endpoint, entry.key)) {
                entry.value = mapEntry;
                return;
            }
        }
        this.map.add({ key: endpoint, value: mapEntry });
    }
    delete(endpoint) {
        for (const entry of this.map) {
            if (endpointEqualUnordered(endpoint, entry.key)) {
                this.map.delete(entry);
                return;
            }
        }
    }
    has(endpoint) {
        for (const entry of this.map) {
            if (endpointEqualUnordered(endpoint, entry.key)) {
                return true;
            }
        }
        return false;
    }
    clear() {
        this.map.clear();
    }
    *keys() {
        for (const entry of this.map) {
            yield entry.key;
        }
    }
    *values() {
        for (const entry of this.map) {
            yield entry.value;
        }
    }
    *entries() {
        for (const entry of this.map) {
            yield [entry.key, entry.value];
        }
    }
}
subchannelAddress.EndpointMap = EndpointMap;

var channelz = {};

var extendStatics = function(e, r) {
    extendStatics = Object.setPrototypeOf || {
        __proto__: []
    } instanceof Array && function(e, r) {
        e.__proto__ = r;
    } || function(e, r) {
        for (var t in r) if (Object.prototype.hasOwnProperty.call(r, t)) e[t] = r[t];
    };
    return extendStatics(e, r);
};

function __extends(e, r) {
    if (typeof r !== "function" && r !== null) throw new TypeError("Class extends value " + String(r) + " is not a constructor or null");
    extendStatics(e, r);
    function __() {
        this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : (__.prototype = r.prototype, new __);
}

function __generator(e, r) {
    var t = {
        label: 0,
        sent: function() {
            if (s[0] & 1) throw s[1];
            return s[1];
        },
        trys: [],
        ops: []
    }, i, n, s, h;
    return h = {
        next: verb(0),
        throw: verb(1),
        return: verb(2)
    }, typeof Symbol === "function" && (h[Symbol.iterator] = function() {
        return this;
    }), h;
    function verb(e) {
        return function(r) {
            return step([ e, r ]);
        };
    }
    function step(a) {
        if (i) throw new TypeError("Generator is already executing.");
        while (h && (h = 0, a[0] && (t = 0)), t) try {
            if (i = 1, n && (s = a[0] & 2 ? n["return"] : a[0] ? n["throw"] || ((s = n["return"]) && s.call(n), 
            0) : n.next) && !(s = s.call(n, a[1])).done) return s;
            if (n = 0, s) a = [ a[0] & 2, s.value ];
            switch (a[0]) {
              case 0:
              case 1:
                s = a;
                break;

              case 4:
                t.label++;
                return {
                    value: a[1],
                    done: false
                };

              case 5:
                t.label++;
                n = a[1];
                a = [ 0 ];
                continue;

              case 7:
                a = t.ops.pop();
                t.trys.pop();
                continue;

              default:
                if (!(s = t.trys, s = s.length > 0 && s[s.length - 1]) && (a[0] === 6 || a[0] === 2)) {
                    t = 0;
                    continue;
                }
                if (a[0] === 3 && (!s || a[1] > s[0] && a[1] < s[3])) {
                    t.label = a[1];
                    break;
                }
                if (a[0] === 6 && t.label < s[1]) {
                    t.label = s[1];
                    s = a;
                    break;
                }
                if (s && t.label < s[2]) {
                    t.label = s[2];
                    t.ops.push(a);
                    break;
                }
                if (s[2]) t.ops.pop();
                t.trys.pop();
                continue;
            }
            a = r.call(e, t);
        } catch (e) {
            a = [ 6, e ];
            n = 0;
        } finally {
            i = s = 0;
        }
        if (a[0] & 5) throw a[1];
        return {
            value: a[0] ? a[1] : void 0,
            done: true
        };
    }
}

typeof SuppressedError === "function" ? SuppressedError : function(e, r, t) {
    var i = new Error(t);
    return i.name = "SuppressedError", i.error = e, i.suppressed = r, i;
};

var TreeNode = function() {
    function TreeNode(e, r, t) {
        if (t === void 0) {
            t = 1;
        }
        this.t = undefined;
        this.i = undefined;
        this.h = undefined;
        this.u = e;
        this.o = r;
        this.l = t;
    }
    TreeNode.prototype.v = function() {
        var e = this;
        var r = e.h.h === e;
        if (r && e.l === 1) {
            e = e.i;
        } else if (e.t) {
            e = e.t;
            while (e.i) {
                e = e.i;
            }
        } else {
            if (r) {
                return e.h;
            }
            var t = e.h;
            while (t.t === e) {
                e = t;
                t = e.h;
            }
            e = t;
        }
        return e;
    };
    TreeNode.prototype.p = function() {
        var e = this;
        if (e.i) {
            e = e.i;
            while (e.t) {
                e = e.t;
            }
            return e;
        } else {
            var r = e.h;
            while (r.i === e) {
                e = r;
                r = e.h;
            }
            if (e.i !== r) {
                return r;
            } else return e;
        }
    };
    TreeNode.prototype.T = function() {
        var e = this.h;
        var r = this.i;
        var t = r.t;
        if (e.h === this) e.h = r; else if (e.t === this) e.t = r; else e.i = r;
        r.h = e;
        r.t = this;
        this.h = r;
        this.i = t;
        if (t) t.h = this;
        return r;
    };
    TreeNode.prototype.I = function() {
        var e = this.h;
        var r = this.t;
        var t = r.i;
        if (e.h === this) e.h = r; else if (e.t === this) e.t = r; else e.i = r;
        r.h = e;
        r.i = this;
        this.h = r;
        this.t = t;
        if (t) t.h = this;
        return r;
    };
    return TreeNode;
}();

var TreeNodeEnableIndex = function(e) {
    __extends(TreeNodeEnableIndex, e);
    function TreeNodeEnableIndex() {
        var r = e !== null && e.apply(this, arguments) || this;
        r.O = 1;
        return r;
    }
    TreeNodeEnableIndex.prototype.T = function() {
        var r = e.prototype.T.call(this);
        this.M();
        r.M();
        return r;
    };
    TreeNodeEnableIndex.prototype.I = function() {
        var r = e.prototype.I.call(this);
        this.M();
        r.M();
        return r;
    };
    TreeNodeEnableIndex.prototype.M = function() {
        this.O = 1;
        if (this.t) {
            this.O += this.t.O;
        }
        if (this.i) {
            this.O += this.i.O;
        }
    };
    return TreeNodeEnableIndex;
}(TreeNode);

var ContainerIterator = function() {
    function ContainerIterator(e) {
        if (e === void 0) {
            e = 0;
        }
        this.iteratorType = e;
    }
    ContainerIterator.prototype.equals = function(e) {
        return this.C === e.C;
    };
    return ContainerIterator;
}();

var Base = function() {
    function Base() {
        this._ = 0;
    }
    Object.defineProperty(Base.prototype, "length", {
        get: function() {
            return this._;
        },
        enumerable: false,
        configurable: true
    });
    Base.prototype.size = function() {
        return this._;
    };
    Base.prototype.empty = function() {
        return this._ === 0;
    };
    return Base;
}();

var Container = function(e) {
    __extends(Container, e);
    function Container() {
        return e !== null && e.apply(this, arguments) || this;
    }
    return Container;
}(Base);

function throwIteratorAccessError() {
    throw new RangeError("Iterator access denied!");
}

var TreeContainer = function(e) {
    __extends(TreeContainer, e);
    function TreeContainer(r, t) {
        if (r === void 0) {
            r = function(e, r) {
                if (e < r) return -1;
                if (e > r) return 1;
                return 0;
            };
        }
        if (t === void 0) {
            t = false;
        }
        var i = e.call(this) || this;
        i.N = undefined;
        i.g = r;
        i.enableIndex = t;
        i.S = t ? TreeNodeEnableIndex : TreeNode;
        i.A = new i.S;
        return i;
    }
    TreeContainer.prototype.m = function(e, r) {
        var t = this.A;
        while (e) {
            var i = this.g(e.u, r);
            if (i < 0) {
                e = e.i;
            } else if (i > 0) {
                t = e;
                e = e.t;
            } else return e;
        }
        return t;
    };
    TreeContainer.prototype.B = function(e, r) {
        var t = this.A;
        while (e) {
            var i = this.g(e.u, r);
            if (i <= 0) {
                e = e.i;
            } else {
                t = e;
                e = e.t;
            }
        }
        return t;
    };
    TreeContainer.prototype.j = function(e, r) {
        var t = this.A;
        while (e) {
            var i = this.g(e.u, r);
            if (i < 0) {
                t = e;
                e = e.i;
            } else if (i > 0) {
                e = e.t;
            } else return e;
        }
        return t;
    };
    TreeContainer.prototype.k = function(e, r) {
        var t = this.A;
        while (e) {
            var i = this.g(e.u, r);
            if (i < 0) {
                t = e;
                e = e.i;
            } else {
                e = e.t;
            }
        }
        return t;
    };
    TreeContainer.prototype.R = function(e) {
        while (true) {
            var r = e.h;
            if (r === this.A) return;
            if (e.l === 1) {
                e.l = 0;
                return;
            }
            if (e === r.t) {
                var t = r.i;
                if (t.l === 1) {
                    t.l = 0;
                    r.l = 1;
                    if (r === this.N) {
                        this.N = r.T();
                    } else r.T();
                } else {
                    if (t.i && t.i.l === 1) {
                        t.l = r.l;
                        r.l = 0;
                        t.i.l = 0;
                        if (r === this.N) {
                            this.N = r.T();
                        } else r.T();
                        return;
                    } else if (t.t && t.t.l === 1) {
                        t.l = 1;
                        t.t.l = 0;
                        t.I();
                    } else {
                        t.l = 1;
                        e = r;
                    }
                }
            } else {
                var t = r.t;
                if (t.l === 1) {
                    t.l = 0;
                    r.l = 1;
                    if (r === this.N) {
                        this.N = r.I();
                    } else r.I();
                } else {
                    if (t.t && t.t.l === 1) {
                        t.l = r.l;
                        r.l = 0;
                        t.t.l = 0;
                        if (r === this.N) {
                            this.N = r.I();
                        } else r.I();
                        return;
                    } else if (t.i && t.i.l === 1) {
                        t.l = 1;
                        t.i.l = 0;
                        t.T();
                    } else {
                        t.l = 1;
                        e = r;
                    }
                }
            }
        }
    };
    TreeContainer.prototype.G = function(e) {
        if (this._ === 1) {
            this.clear();
            return;
        }
        var r = e;
        while (r.t || r.i) {
            if (r.i) {
                r = r.i;
                while (r.t) r = r.t;
            } else {
                r = r.t;
            }
            var t = e.u;
            e.u = r.u;
            r.u = t;
            var i = e.o;
            e.o = r.o;
            r.o = i;
            e = r;
        }
        if (this.A.t === r) {
            this.A.t = r.h;
        } else if (this.A.i === r) {
            this.A.i = r.h;
        }
        this.R(r);
        var n = r.h;
        if (r === n.t) {
            n.t = undefined;
        } else n.i = undefined;
        this._ -= 1;
        this.N.l = 0;
        if (this.enableIndex) {
            while (n !== this.A) {
                n.O -= 1;
                n = n.h;
            }
        }
    };
    TreeContainer.prototype.P = function(e) {
        var r = typeof e === "number" ? e : undefined;
        var t = typeof e === "function" ? e : undefined;
        var i = typeof e === "undefined" ? [] : undefined;
        var n = 0;
        var s = this.N;
        var h = [];
        while (h.length || s) {
            if (s) {
                h.push(s);
                s = s.t;
            } else {
                s = h.pop();
                if (n === r) return s;
                i && i.push(s);
                t && t(s, n, this);
                n += 1;
                s = s.i;
            }
        }
        return i;
    };
    TreeContainer.prototype.q = function(e) {
        while (true) {
            var r = e.h;
            if (r.l === 0) return;
            var t = r.h;
            if (r === t.t) {
                var i = t.i;
                if (i && i.l === 1) {
                    i.l = r.l = 0;
                    if (t === this.N) return;
                    t.l = 1;
                    e = t;
                    continue;
                } else if (e === r.i) {
                    e.l = 0;
                    if (e.t) {
                        e.t.h = r;
                    }
                    if (e.i) {
                        e.i.h = t;
                    }
                    r.i = e.t;
                    t.t = e.i;
                    e.t = r;
                    e.i = t;
                    if (t === this.N) {
                        this.N = e;
                        this.A.h = e;
                    } else {
                        var n = t.h;
                        if (n.t === t) {
                            n.t = e;
                        } else n.i = e;
                    }
                    e.h = t.h;
                    r.h = e;
                    t.h = e;
                    t.l = 1;
                } else {
                    r.l = 0;
                    if (t === this.N) {
                        this.N = t.I();
                    } else t.I();
                    t.l = 1;
                    return;
                }
            } else {
                var i = t.t;
                if (i && i.l === 1) {
                    i.l = r.l = 0;
                    if (t === this.N) return;
                    t.l = 1;
                    e = t;
                    continue;
                } else if (e === r.t) {
                    e.l = 0;
                    if (e.t) {
                        e.t.h = t;
                    }
                    if (e.i) {
                        e.i.h = r;
                    }
                    t.i = e.t;
                    r.t = e.i;
                    e.t = t;
                    e.i = r;
                    if (t === this.N) {
                        this.N = e;
                        this.A.h = e;
                    } else {
                        var n = t.h;
                        if (n.t === t) {
                            n.t = e;
                        } else n.i = e;
                    }
                    e.h = t.h;
                    r.h = e;
                    t.h = e;
                    t.l = 1;
                } else {
                    r.l = 0;
                    if (t === this.N) {
                        this.N = t.T();
                    } else t.T();
                    t.l = 1;
                    return;
                }
            }
            if (this.enableIndex) {
                r.M();
                t.M();
                e.M();
            }
            return;
        }
    };
    TreeContainer.prototype.D = function(e, r, t) {
        if (this.N === undefined) {
            this._ += 1;
            this.N = new this.S(e, r, 0);
            this.N.h = this.A;
            this.A.h = this.A.t = this.A.i = this.N;
            return this._;
        }
        var i;
        var n = this.A.t;
        var s = this.g(n.u, e);
        if (s === 0) {
            n.o = r;
            return this._;
        } else if (s > 0) {
            n.t = new this.S(e, r);
            n.t.h = n;
            i = n.t;
            this.A.t = i;
        } else {
            var h = this.A.i;
            var a = this.g(h.u, e);
            if (a === 0) {
                h.o = r;
                return this._;
            } else if (a < 0) {
                h.i = new this.S(e, r);
                h.i.h = h;
                i = h.i;
                this.A.i = i;
            } else {
                if (t !== undefined) {
                    var u = t.C;
                    if (u !== this.A) {
                        var f = this.g(u.u, e);
                        if (f === 0) {
                            u.o = r;
                            return this._;
                        } else if (f > 0) {
                            var o = u.v();
                            var d = this.g(o.u, e);
                            if (d === 0) {
                                o.o = r;
                                return this._;
                            } else if (d < 0) {
                                i = new this.S(e, r);
                                if (o.i === undefined) {
                                    o.i = i;
                                    i.h = o;
                                } else {
                                    u.t = i;
                                    i.h = u;
                                }
                            }
                        }
                    }
                }
                if (i === undefined) {
                    i = this.N;
                    while (true) {
                        var c = this.g(i.u, e);
                        if (c > 0) {
                            if (i.t === undefined) {
                                i.t = new this.S(e, r);
                                i.t.h = i;
                                i = i.t;
                                break;
                            }
                            i = i.t;
                        } else if (c < 0) {
                            if (i.i === undefined) {
                                i.i = new this.S(e, r);
                                i.i.h = i;
                                i = i.i;
                                break;
                            }
                            i = i.i;
                        } else {
                            i.o = r;
                            return this._;
                        }
                    }
                }
            }
        }
        if (this.enableIndex) {
            var l = i.h;
            while (l !== this.A) {
                l.O += 1;
                l = l.h;
            }
        }
        this.q(i);
        this._ += 1;
        return this._;
    };
    TreeContainer.prototype.F = function(e, r) {
        while (e) {
            var t = this.g(e.u, r);
            if (t < 0) {
                e = e.i;
            } else if (t > 0) {
                e = e.t;
            } else return e;
        }
        return e || this.A;
    };
    TreeContainer.prototype.clear = function() {
        this._ = 0;
        this.N = undefined;
        this.A.h = undefined;
        this.A.t = this.A.i = undefined;
    };
    TreeContainer.prototype.updateKeyByIterator = function(e, r) {
        var t = e.C;
        if (t === this.A) {
            throwIteratorAccessError();
        }
        if (this._ === 1) {
            t.u = r;
            return true;
        }
        var i = t.p().u;
        if (t === this.A.t) {
            if (this.g(i, r) > 0) {
                t.u = r;
                return true;
            }
            return false;
        }
        var n = t.v().u;
        if (t === this.A.i) {
            if (this.g(n, r) < 0) {
                t.u = r;
                return true;
            }
            return false;
        }
        if (this.g(n, r) >= 0 || this.g(i, r) <= 0) return false;
        t.u = r;
        return true;
    };
    TreeContainer.prototype.eraseElementByPos = function(e) {
        if (e < 0 || e > this._ - 1) {
            throw new RangeError;
        }
        var r = this.P(e);
        this.G(r);
        return this._;
    };
    TreeContainer.prototype.eraseElementByKey = function(e) {
        if (this._ === 0) return false;
        var r = this.F(this.N, e);
        if (r === this.A) return false;
        this.G(r);
        return true;
    };
    TreeContainer.prototype.eraseElementByIterator = function(e) {
        var r = e.C;
        if (r === this.A) {
            throwIteratorAccessError();
        }
        var t = r.i === undefined;
        var i = e.iteratorType === 0;
        if (i) {
            if (t) e.next();
        } else {
            if (!t || r.t === undefined) e.next();
        }
        this.G(r);
        return e;
    };
    TreeContainer.prototype.getHeight = function() {
        if (this._ === 0) return 0;
        function traversal(e) {
            if (!e) return 0;
            return Math.max(traversal(e.t), traversal(e.i)) + 1;
        }
        return traversal(this.N);
    };
    return TreeContainer;
}(Container);

var TreeIterator = function(e) {
    __extends(TreeIterator, e);
    function TreeIterator(r, t, i) {
        var n = e.call(this, i) || this;
        n.C = r;
        n.A = t;
        if (n.iteratorType === 0) {
            n.pre = function() {
                if (this.C === this.A.t) {
                    throwIteratorAccessError();
                }
                this.C = this.C.v();
                return this;
            };
            n.next = function() {
                if (this.C === this.A) {
                    throwIteratorAccessError();
                }
                this.C = this.C.p();
                return this;
            };
        } else {
            n.pre = function() {
                if (this.C === this.A.i) {
                    throwIteratorAccessError();
                }
                this.C = this.C.p();
                return this;
            };
            n.next = function() {
                if (this.C === this.A) {
                    throwIteratorAccessError();
                }
                this.C = this.C.v();
                return this;
            };
        }
        return n;
    }
    Object.defineProperty(TreeIterator.prototype, "index", {
        get: function() {
            var e = this.C;
            var r = this.A.h;
            if (e === this.A) {
                if (r) {
                    return r.O - 1;
                }
                return 0;
            }
            var t = 0;
            if (e.t) {
                t += e.t.O;
            }
            while (e !== r) {
                var i = e.h;
                if (e === i.i) {
                    t += 1;
                    if (i.t) {
                        t += i.t.O;
                    }
                }
                e = i;
            }
            return t;
        },
        enumerable: false,
        configurable: true
    });
    TreeIterator.prototype.isAccessible = function() {
        return this.C !== this.A;
    };
    return TreeIterator;
}(ContainerIterator);

var OrderedMapIterator = function(e) {
    __extends(OrderedMapIterator, e);
    function OrderedMapIterator(r, t, i, n) {
        var s = e.call(this, r, t, n) || this;
        s.container = i;
        return s;
    }
    Object.defineProperty(OrderedMapIterator.prototype, "pointer", {
        get: function() {
            if (this.C === this.A) {
                throwIteratorAccessError();
            }
            var e = this;
            return new Proxy([], {
                get: function(r, t) {
                    if (t === "0") return e.C.u; else if (t === "1") return e.C.o;
                    r[0] = e.C.u;
                    r[1] = e.C.o;
                    return r[t];
                },
                set: function(r, t, i) {
                    if (t !== "1") {
                        throw new TypeError("prop must be 1");
                    }
                    e.C.o = i;
                    return true;
                }
            });
        },
        enumerable: false,
        configurable: true
    });
    OrderedMapIterator.prototype.copy = function() {
        return new OrderedMapIterator(this.C, this.A, this.container, this.iteratorType);
    };
    return OrderedMapIterator;
}(TreeIterator);

var OrderedMap = function(e) {
    __extends(OrderedMap, e);
    function OrderedMap(r, t, i) {
        if (r === void 0) {
            r = [];
        }
        var n = e.call(this, t, i) || this;
        var s = n;
        r.forEach((function(e) {
            s.setElement(e[0], e[1]);
        }));
        return n;
    }
    OrderedMap.prototype.begin = function() {
        return new OrderedMapIterator(this.A.t || this.A, this.A, this);
    };
    OrderedMap.prototype.end = function() {
        return new OrderedMapIterator(this.A, this.A, this);
    };
    OrderedMap.prototype.rBegin = function() {
        return new OrderedMapIterator(this.A.i || this.A, this.A, this, 1);
    };
    OrderedMap.prototype.rEnd = function() {
        return new OrderedMapIterator(this.A, this.A, this, 1);
    };
    OrderedMap.prototype.front = function() {
        if (this._ === 0) return;
        var e = this.A.t;
        return [ e.u, e.o ];
    };
    OrderedMap.prototype.back = function() {
        if (this._ === 0) return;
        var e = this.A.i;
        return [ e.u, e.o ];
    };
    OrderedMap.prototype.lowerBound = function(e) {
        var r = this.m(this.N, e);
        return new OrderedMapIterator(r, this.A, this);
    };
    OrderedMap.prototype.upperBound = function(e) {
        var r = this.B(this.N, e);
        return new OrderedMapIterator(r, this.A, this);
    };
    OrderedMap.prototype.reverseLowerBound = function(e) {
        var r = this.j(this.N, e);
        return new OrderedMapIterator(r, this.A, this);
    };
    OrderedMap.prototype.reverseUpperBound = function(e) {
        var r = this.k(this.N, e);
        return new OrderedMapIterator(r, this.A, this);
    };
    OrderedMap.prototype.forEach = function(e) {
        this.P((function(r, t, i) {
            e([ r.u, r.o ], t, i);
        }));
    };
    OrderedMap.prototype.setElement = function(e, r, t) {
        return this.D(e, r, t);
    };
    OrderedMap.prototype.getElementByPos = function(e) {
        if (e < 0 || e > this._ - 1) {
            throw new RangeError;
        }
        var r = this.P(e);
        return [ r.u, r.o ];
    };
    OrderedMap.prototype.find = function(e) {
        var r = this.F(this.N, e);
        return new OrderedMapIterator(r, this.A, this);
    };
    OrderedMap.prototype.getElementByKey = function(e) {
        var r = this.F(this.N, e);
        return r.o;
    };
    OrderedMap.prototype.union = function(e) {
        var r = this;
        e.forEach((function(e) {
            r.setElement(e[0], e[1]);
        }));
        return this._;
    };
    OrderedMap.prototype[Symbol.iterator] = function() {
        var e, r, t, i;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                e = this._;
                r = this.P();
                t = 0;
                n.label = 1;

              case 1:
                if (!(t < e)) return [ 3, 4 ];
                i = r[t];
                return [ 4, [ i.u, i.o ] ];

              case 2:
                n.sent();
                n.label = 3;

              case 3:
                ++t;
                return [ 3, 1 ];

              case 4:
                return [ 2 ];
            }
        }));
    };
    return OrderedMap;
}(TreeContainer);

var esm = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OrderedMap: OrderedMap
});

var require$$1 = /*@__PURE__*/getAugmentedNamespace(esm);

var admin = {};

var hasRequiredAdmin;

function requireAdmin () {
	if (hasRequiredAdmin) return admin;
	hasRequiredAdmin = 1;
	/*
	 * Copyright 2021 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(admin, "__esModule", { value: true });
	admin.registerAdminService = registerAdminService;
	admin.addAdminServicesToServer = addAdminServicesToServer;
	const registeredAdminServices = [];
	function registerAdminService(getServiceDefinition, getHandlers) {
	    registeredAdminServices.push({ getServiceDefinition, getHandlers });
	}
	function addAdminServicesToServer(server) {
	    for (const { getServiceDefinition, getHandlers } of registeredAdminServices) {
	        server.addService(getServiceDefinition(), getHandlers());
	    }
	}
	
	return admin;
}

var makeClient = {};

var client = {};

var call = {};

/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(call, "__esModule", { value: true });
call.ClientDuplexStreamImpl = call.ClientWritableStreamImpl = call.ClientReadableStreamImpl = call.ClientUnaryCallImpl = void 0;
call.callErrorFromStatus = callErrorFromStatus;
const events_1$1 = require$$0$4;
const stream_1$1 = require$$1$2;
const constants_1$9 = constants;
/**
 * Construct a ServiceError from a StatusObject. This function exists primarily
 * as an attempt to make the error stack trace clearly communicate that the
 * error is not necessarily a problem in gRPC itself.
 * @param status
 */
function callErrorFromStatus(status, callerStack) {
    const message = `${status.code} ${constants_1$9.Status[status.code]}: ${status.details}`;
    const error = new Error(message);
    const stack = `${error.stack}\nfor call at\n${callerStack}`;
    return Object.assign(new Error(message), status, { stack });
}
class ClientUnaryCallImpl extends events_1$1.EventEmitter {
    constructor() {
        super();
    }
    cancel() {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1$9.Status.CANCELLED, 'Cancelled on client');
    }
    getPeer() {
        var _a, _b;
        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';
    }
}
call.ClientUnaryCallImpl = ClientUnaryCallImpl;
class ClientReadableStreamImpl extends stream_1$1.Readable {
    constructor(deserialize) {
        super({ objectMode: true });
        this.deserialize = deserialize;
    }
    cancel() {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1$9.Status.CANCELLED, 'Cancelled on client');
    }
    getPeer() {
        var _a, _b;
        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';
    }
    _read(_size) {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();
    }
}
call.ClientReadableStreamImpl = ClientReadableStreamImpl;
class ClientWritableStreamImpl extends stream_1$1.Writable {
    constructor(serialize) {
        super({ objectMode: true });
        this.serialize = serialize;
    }
    cancel() {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1$9.Status.CANCELLED, 'Cancelled on client');
    }
    getPeer() {
        var _a, _b;
        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';
    }
    _write(chunk, encoding, cb) {
        var _a;
        const context = {
            callback: cb,
        };
        const flags = Number(encoding);
        if (!Number.isNaN(flags)) {
            context.flags = flags;
        }
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);
    }
    _final(cb) {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();
        cb();
    }
}
call.ClientWritableStreamImpl = ClientWritableStreamImpl;
class ClientDuplexStreamImpl extends stream_1$1.Duplex {
    constructor(serialize, deserialize) {
        super({ objectMode: true });
        this.serialize = serialize;
        this.deserialize = deserialize;
    }
    cancel() {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1$9.Status.CANCELLED, 'Cancelled on client');
    }
    getPeer() {
        var _a, _b;
        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';
    }
    _read(_size) {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();
    }
    _write(chunk, encoding, cb) {
        var _a;
        const context = {
            callback: cb,
        };
        const flags = Number(encoding);
        if (!Number.isNaN(flags)) {
            context.flags = flags;
        }
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);
    }
    _final(cb) {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();
        cb();
    }
}
call.ClientDuplexStreamImpl = ClientDuplexStreamImpl;

var clientInterceptors = {};

var callInterface = {};

var hasRequiredCallInterface;

function requireCallInterface () {
	if (hasRequiredCallInterface) return callInterface;
	hasRequiredCallInterface = 1;
	/*
	 * Copyright 2022 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(callInterface, "__esModule", { value: true });
	callInterface.InterceptingListenerImpl = void 0;
	callInterface.isInterceptingListener = isInterceptingListener;
	function isInterceptingListener(listener) {
	    return (listener.onReceiveMetadata !== undefined &&
	        listener.onReceiveMetadata.length === 1);
	}
	class InterceptingListenerImpl {
	    constructor(listener, nextListener) {
	        this.listener = listener;
	        this.nextListener = nextListener;
	        this.processingMetadata = false;
	        this.hasPendingMessage = false;
	        this.processingMessage = false;
	        this.pendingStatus = null;
	    }
	    processPendingMessage() {
	        if (this.hasPendingMessage) {
	            this.nextListener.onReceiveMessage(this.pendingMessage);
	            this.pendingMessage = null;
	            this.hasPendingMessage = false;
	        }
	    }
	    processPendingStatus() {
	        if (this.pendingStatus) {
	            this.nextListener.onReceiveStatus(this.pendingStatus);
	        }
	    }
	    onReceiveMetadata(metadata) {
	        this.processingMetadata = true;
	        this.listener.onReceiveMetadata(metadata, metadata => {
	            this.processingMetadata = false;
	            this.nextListener.onReceiveMetadata(metadata);
	            this.processPendingMessage();
	            this.processPendingStatus();
	        });
	    }
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    onReceiveMessage(message) {
	        /* If this listener processes messages asynchronously, the last message may
	         * be reordered with respect to the status */
	        this.processingMessage = true;
	        this.listener.onReceiveMessage(message, msg => {
	            this.processingMessage = false;
	            if (this.processingMetadata) {
	                this.pendingMessage = msg;
	                this.hasPendingMessage = true;
	            }
	            else {
	                this.nextListener.onReceiveMessage(msg);
	                this.processPendingStatus();
	            }
	        });
	    }
	    onReceiveStatus(status) {
	        this.listener.onReceiveStatus(status, processedStatus => {
	            if (this.processingMetadata || this.processingMessage) {
	                this.pendingStatus = processedStatus;
	            }
	            else {
	                this.nextListener.onReceiveStatus(processedStatus);
	            }
	        });
	    }
	}
	callInterface.InterceptingListenerImpl = InterceptingListenerImpl;
	
	return callInterface;
}

var hasRequiredClientInterceptors;

function requireClientInterceptors () {
	if (hasRequiredClientInterceptors) return clientInterceptors;
	hasRequiredClientInterceptors = 1;
	/*
	 * Copyright 2019 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(clientInterceptors, "__esModule", { value: true });
	clientInterceptors.InterceptingCall = clientInterceptors.RequesterBuilder = clientInterceptors.ListenerBuilder = clientInterceptors.InterceptorConfigurationError = void 0;
	clientInterceptors.getInterceptingCall = getInterceptingCall;
	const metadata_1 = metadata;
	const call_interface_1 = requireCallInterface();
	const constants_1 = constants;
	const error_1 = error;
	/**
	 * Error class associated with passing both interceptors and interceptor
	 * providers to a client constructor or as call options.
	 */
	class InterceptorConfigurationError extends Error {
	    constructor(message) {
	        super(message);
	        this.name = 'InterceptorConfigurationError';
	        Error.captureStackTrace(this, InterceptorConfigurationError);
	    }
	}
	clientInterceptors.InterceptorConfigurationError = InterceptorConfigurationError;
	class ListenerBuilder {
	    constructor() {
	        this.metadata = undefined;
	        this.message = undefined;
	        this.status = undefined;
	    }
	    withOnReceiveMetadata(onReceiveMetadata) {
	        this.metadata = onReceiveMetadata;
	        return this;
	    }
	    withOnReceiveMessage(onReceiveMessage) {
	        this.message = onReceiveMessage;
	        return this;
	    }
	    withOnReceiveStatus(onReceiveStatus) {
	        this.status = onReceiveStatus;
	        return this;
	    }
	    build() {
	        return {
	            onReceiveMetadata: this.metadata,
	            onReceiveMessage: this.message,
	            onReceiveStatus: this.status,
	        };
	    }
	}
	clientInterceptors.ListenerBuilder = ListenerBuilder;
	class RequesterBuilder {
	    constructor() {
	        this.start = undefined;
	        this.message = undefined;
	        this.halfClose = undefined;
	        this.cancel = undefined;
	    }
	    withStart(start) {
	        this.start = start;
	        return this;
	    }
	    withSendMessage(sendMessage) {
	        this.message = sendMessage;
	        return this;
	    }
	    withHalfClose(halfClose) {
	        this.halfClose = halfClose;
	        return this;
	    }
	    withCancel(cancel) {
	        this.cancel = cancel;
	        return this;
	    }
	    build() {
	        return {
	            start: this.start,
	            sendMessage: this.message,
	            halfClose: this.halfClose,
	            cancel: this.cancel,
	        };
	    }
	}
	clientInterceptors.RequesterBuilder = RequesterBuilder;
	/**
	 * A Listener with a default pass-through implementation of each method. Used
	 * for filling out Listeners with some methods omitted.
	 */
	const defaultListener = {
	    onReceiveMetadata: (metadata, next) => {
	        next(metadata);
	    },
	    onReceiveMessage: (message, next) => {
	        next(message);
	    },
	    onReceiveStatus: (status, next) => {
	        next(status);
	    },
	};
	/**
	 * A Requester with a default pass-through implementation of each method. Used
	 * for filling out Requesters with some methods omitted.
	 */
	const defaultRequester = {
	    start: (metadata, listener, next) => {
	        next(metadata, listener);
	    },
	    sendMessage: (message, next) => {
	        next(message);
	    },
	    halfClose: next => {
	        next();
	    },
	    cancel: next => {
	        next();
	    },
	};
	class InterceptingCall {
	    constructor(nextCall, requester) {
	        var _a, _b, _c, _d;
	        this.nextCall = nextCall;
	        /**
	         * Indicates that metadata has been passed to the requester's start
	         * method but it has not been passed to the corresponding next callback
	         */
	        this.processingMetadata = false;
	        /**
	         * Message context for a pending message that is waiting for
	         */
	        this.pendingMessageContext = null;
	        /**
	         * Indicates that a message has been passed to the requester's sendMessage
	         * method but it has not been passed to the corresponding next callback
	         */
	        this.processingMessage = false;
	        /**
	         * Indicates that a status was received but could not be propagated because
	         * a message was still being processed.
	         */
	        this.pendingHalfClose = false;
	        if (requester) {
	            this.requester = {
	                start: (_a = requester.start) !== null && _a !== void 0 ? _a : defaultRequester.start,
	                sendMessage: (_b = requester.sendMessage) !== null && _b !== void 0 ? _b : defaultRequester.sendMessage,
	                halfClose: (_c = requester.halfClose) !== null && _c !== void 0 ? _c : defaultRequester.halfClose,
	                cancel: (_d = requester.cancel) !== null && _d !== void 0 ? _d : defaultRequester.cancel,
	            };
	        }
	        else {
	            this.requester = defaultRequester;
	        }
	    }
	    cancelWithStatus(status, details) {
	        this.requester.cancel(() => {
	            this.nextCall.cancelWithStatus(status, details);
	        });
	    }
	    getPeer() {
	        return this.nextCall.getPeer();
	    }
	    processPendingMessage() {
	        if (this.pendingMessageContext) {
	            this.nextCall.sendMessageWithContext(this.pendingMessageContext, this.pendingMessage);
	            this.pendingMessageContext = null;
	            this.pendingMessage = null;
	        }
	    }
	    processPendingHalfClose() {
	        if (this.pendingHalfClose) {
	            this.nextCall.halfClose();
	        }
	    }
	    start(metadata, interceptingListener) {
	        var _a, _b, _c, _d, _e, _f;
	        const fullInterceptingListener = {
	            onReceiveMetadata: (_b = (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(interceptingListener)) !== null && _b !== void 0 ? _b : (metadata => { }),
	            onReceiveMessage: (_d = (_c = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _c === void 0 ? void 0 : _c.bind(interceptingListener)) !== null && _d !== void 0 ? _d : (message => { }),
	            onReceiveStatus: (_f = (_e = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _e === void 0 ? void 0 : _e.bind(interceptingListener)) !== null && _f !== void 0 ? _f : (status => { }),
	        };
	        this.processingMetadata = true;
	        this.requester.start(metadata, fullInterceptingListener, (md, listener) => {
	            var _a, _b, _c;
	            this.processingMetadata = false;
	            let finalInterceptingListener;
	            if ((0, call_interface_1.isInterceptingListener)(listener)) {
	                finalInterceptingListener = listener;
	            }
	            else {
	                const fullListener = {
	                    onReceiveMetadata: (_a = listener.onReceiveMetadata) !== null && _a !== void 0 ? _a : defaultListener.onReceiveMetadata,
	                    onReceiveMessage: (_b = listener.onReceiveMessage) !== null && _b !== void 0 ? _b : defaultListener.onReceiveMessage,
	                    onReceiveStatus: (_c = listener.onReceiveStatus) !== null && _c !== void 0 ? _c : defaultListener.onReceiveStatus,
	                };
	                finalInterceptingListener = new call_interface_1.InterceptingListenerImpl(fullListener, fullInterceptingListener);
	            }
	            this.nextCall.start(md, finalInterceptingListener);
	            this.processPendingMessage();
	            this.processPendingHalfClose();
	        });
	    }
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    sendMessageWithContext(context, message) {
	        this.processingMessage = true;
	        this.requester.sendMessage(message, finalMessage => {
	            this.processingMessage = false;
	            if (this.processingMetadata) {
	                this.pendingMessageContext = context;
	                this.pendingMessage = message;
	            }
	            else {
	                this.nextCall.sendMessageWithContext(context, finalMessage);
	                this.processPendingHalfClose();
	            }
	        });
	    }
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    sendMessage(message) {
	        this.sendMessageWithContext({}, message);
	    }
	    startRead() {
	        this.nextCall.startRead();
	    }
	    halfClose() {
	        this.requester.halfClose(() => {
	            if (this.processingMetadata || this.processingMessage) {
	                this.pendingHalfClose = true;
	            }
	            else {
	                this.nextCall.halfClose();
	            }
	        });
	    }
	}
	clientInterceptors.InterceptingCall = InterceptingCall;
	function getCall(channel, path, options) {
	    var _a, _b;
	    const deadline = (_a = options.deadline) !== null && _a !== void 0 ? _a : Infinity;
	    const host = options.host;
	    const parent = (_b = options.parent) !== null && _b !== void 0 ? _b : null;
	    const propagateFlags = options.propagate_flags;
	    const credentials = options.credentials;
	    const call = channel.createCall(path, deadline, host, parent, propagateFlags);
	    if (credentials) {
	        call.setCredentials(credentials);
	    }
	    return call;
	}
	/**
	 * InterceptingCall implementation that directly owns the underlying Call
	 * object and handles serialization and deseraizliation.
	 */
	class BaseInterceptingCall {
	    constructor(call, 
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    methodDefinition) {
	        this.call = call;
	        this.methodDefinition = methodDefinition;
	    }
	    cancelWithStatus(status, details) {
	        this.call.cancelWithStatus(status, details);
	    }
	    getPeer() {
	        return this.call.getPeer();
	    }
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    sendMessageWithContext(context, message) {
	        let serialized;
	        try {
	            serialized = this.methodDefinition.requestSerialize(message);
	        }
	        catch (e) {
	            this.call.cancelWithStatus(constants_1.Status.INTERNAL, `Request message serialization failure: ${(0, error_1.getErrorMessage)(e)}`);
	            return;
	        }
	        this.call.sendMessageWithContext(context, serialized);
	    }
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    sendMessage(message) {
	        this.sendMessageWithContext({}, message);
	    }
	    start(metadata, interceptingListener) {
	        let readError = null;
	        this.call.start(metadata, {
	            onReceiveMetadata: metadata => {
	                var _a;
	                (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, metadata);
	            },
	            onReceiveMessage: message => {
	                var _a;
	                // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                let deserialized;
	                try {
	                    deserialized = this.methodDefinition.responseDeserialize(message);
	                }
	                catch (e) {
	                    readError = {
	                        code: constants_1.Status.INTERNAL,
	                        details: `Response message parsing error: ${(0, error_1.getErrorMessage)(e)}`,
	                        metadata: new metadata_1.Metadata(),
	                    };
	                    this.call.cancelWithStatus(readError.code, readError.details);
	                    return;
	                }
	                (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, deserialized);
	            },
	            onReceiveStatus: status => {
	                var _a, _b;
	                if (readError) {
	                    (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, readError);
	                }
	                else {
	                    (_b = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _b === void 0 ? void 0 : _b.call(interceptingListener, status);
	                }
	            },
	        });
	    }
	    startRead() {
	        this.call.startRead();
	    }
	    halfClose() {
	        this.call.halfClose();
	    }
	}
	/**
	 * BaseInterceptingCall with special-cased behavior for methods with unary
	 * responses.
	 */
	class BaseUnaryInterceptingCall extends BaseInterceptingCall {
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    constructor(call, methodDefinition) {
	        super(call, methodDefinition);
	    }
	    start(metadata, listener) {
	        var _a, _b;
	        let receivedMessage = false;
	        const wrapperListener = {
	            onReceiveMetadata: (_b = (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(listener)) !== null && _b !== void 0 ? _b : (metadata => { }),
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            onReceiveMessage: (message) => {
	                var _a;
	                receivedMessage = true;
	                (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(listener, message);
	            },
	            onReceiveStatus: (status) => {
	                var _a, _b;
	                if (!receivedMessage) {
	                    (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(listener, null);
	                }
	                (_b = listener === null || listener === void 0 ? void 0 : listener.onReceiveStatus) === null || _b === void 0 ? void 0 : _b.call(listener, status);
	            },
	        };
	        super.start(metadata, wrapperListener);
	        this.call.startRead();
	    }
	}
	/**
	 * BaseInterceptingCall with special-cased behavior for methods with streaming
	 * responses.
	 */
	class BaseStreamingInterceptingCall extends BaseInterceptingCall {
	}
	function getBottomInterceptingCall(channel, options, 
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	methodDefinition) {
	    const call = getCall(channel, methodDefinition.path, options);
	    if (methodDefinition.responseStream) {
	        return new BaseStreamingInterceptingCall(call, methodDefinition);
	    }
	    else {
	        return new BaseUnaryInterceptingCall(call, methodDefinition);
	    }
	}
	function getInterceptingCall(interceptorArgs, 
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	methodDefinition, options, channel) {
	    if (interceptorArgs.clientInterceptors.length > 0 &&
	        interceptorArgs.clientInterceptorProviders.length > 0) {
	        throw new InterceptorConfigurationError('Both interceptors and interceptor_providers were passed as options ' +
	            'to the client constructor. Only one of these is allowed.');
	    }
	    if (interceptorArgs.callInterceptors.length > 0 &&
	        interceptorArgs.callInterceptorProviders.length > 0) {
	        throw new InterceptorConfigurationError('Both interceptors and interceptor_providers were passed as call ' +
	            'options. Only one of these is allowed.');
	    }
	    let interceptors = [];
	    // Interceptors passed to the call override interceptors passed to the client constructor
	    if (interceptorArgs.callInterceptors.length > 0 ||
	        interceptorArgs.callInterceptorProviders.length > 0) {
	        interceptors = []
	            .concat(interceptorArgs.callInterceptors, interceptorArgs.callInterceptorProviders.map(provider => provider(methodDefinition)))
	            .filter(interceptor => interceptor);
	        // Filter out falsy values when providers return nothing
	    }
	    else {
	        interceptors = []
	            .concat(interceptorArgs.clientInterceptors, interceptorArgs.clientInterceptorProviders.map(provider => provider(methodDefinition)))
	            .filter(interceptor => interceptor);
	        // Filter out falsy values when providers return nothing
	    }
	    const interceptorOptions = Object.assign({}, options, {
	        method_definition: methodDefinition,
	    });
	    /* For each interceptor in the list, the nextCall function passed to it is
	     * based on the next interceptor in the list, using a nextCall function
	     * constructed with the following interceptor in the list, and so on. The
	     * initialValue, which is effectively at the end of the list, is a nextCall
	     * function that invokes getBottomInterceptingCall, the result of which
	     * handles (de)serialization and also gets the underlying call from the
	     * channel. */
	    const getCall = interceptors.reduceRight((nextCall, nextInterceptor) => {
	        return currentOptions => nextInterceptor(currentOptions, nextCall);
	    }, (finalOptions) => getBottomInterceptingCall(channel, finalOptions, methodDefinition));
	    return getCall(interceptorOptions);
	}
	
	return clientInterceptors;
}

var hasRequiredClient;

function requireClient () {
	if (hasRequiredClient) return client;
	hasRequiredClient = 1;
	/*
	 * Copyright 2019 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(client, "__esModule", { value: true });
	client.Client = void 0;
	const call_1 = call;
	const channel_1 = requireChannel();
	const connectivity_state_1 = connectivityState;
	const constants_1 = constants;
	const metadata_1 = metadata;
	const client_interceptors_1 = requireClientInterceptors();
	const CHANNEL_SYMBOL = Symbol();
	const INTERCEPTOR_SYMBOL = Symbol();
	const INTERCEPTOR_PROVIDER_SYMBOL = Symbol();
	const CALL_INVOCATION_TRANSFORMER_SYMBOL = Symbol();
	function isFunction(arg) {
	    return typeof arg === 'function';
	}
	function getErrorStackString(error) {
	    var _a;
	    return ((_a = error.stack) === null || _a === void 0 ? void 0 : _a.split('\n').slice(1).join('\n')) || 'no stack trace available';
	}
	/**
	 * A generic gRPC client. Primarily useful as a base class for all generated
	 * clients.
	 */
	class Client {
	    constructor(address, credentials, options = {}) {
	        var _a, _b;
	        options = Object.assign({}, options);
	        this[INTERCEPTOR_SYMBOL] = (_a = options.interceptors) !== null && _a !== void 0 ? _a : [];
	        delete options.interceptors;
	        this[INTERCEPTOR_PROVIDER_SYMBOL] = (_b = options.interceptor_providers) !== null && _b !== void 0 ? _b : [];
	        delete options.interceptor_providers;
	        if (this[INTERCEPTOR_SYMBOL].length > 0 &&
	            this[INTERCEPTOR_PROVIDER_SYMBOL].length > 0) {
	            throw new Error('Both interceptors and interceptor_providers were passed as options ' +
	                'to the client constructor. Only one of these is allowed.');
	        }
	        this[CALL_INVOCATION_TRANSFORMER_SYMBOL] =
	            options.callInvocationTransformer;
	        delete options.callInvocationTransformer;
	        if (options.channelOverride) {
	            this[CHANNEL_SYMBOL] = options.channelOverride;
	        }
	        else if (options.channelFactoryOverride) {
	            const channelFactoryOverride = options.channelFactoryOverride;
	            delete options.channelFactoryOverride;
	            this[CHANNEL_SYMBOL] = channelFactoryOverride(address, credentials, options);
	        }
	        else {
	            this[CHANNEL_SYMBOL] = new channel_1.ChannelImplementation(address, credentials, options);
	        }
	    }
	    close() {
	        this[CHANNEL_SYMBOL].close();
	    }
	    getChannel() {
	        return this[CHANNEL_SYMBOL];
	    }
	    waitForReady(deadline, callback) {
	        const checkState = (err) => {
	            if (err) {
	                callback(new Error('Failed to connect before the deadline'));
	                return;
	            }
	            let newState;
	            try {
	                newState = this[CHANNEL_SYMBOL].getConnectivityState(true);
	            }
	            catch (e) {
	                callback(new Error('The channel has been closed'));
	                return;
	            }
	            if (newState === connectivity_state_1.ConnectivityState.READY) {
	                callback();
	            }
	            else {
	                try {
	                    this[CHANNEL_SYMBOL].watchConnectivityState(newState, deadline, checkState);
	                }
	                catch (e) {
	                    callback(new Error('The channel has been closed'));
	                }
	            }
	        };
	        setImmediate(checkState);
	    }
	    checkOptionalUnaryResponseArguments(arg1, arg2, arg3) {
	        if (isFunction(arg1)) {
	            return { metadata: new metadata_1.Metadata(), options: {}, callback: arg1 };
	        }
	        else if (isFunction(arg2)) {
	            if (arg1 instanceof metadata_1.Metadata) {
	                return { metadata: arg1, options: {}, callback: arg2 };
	            }
	            else {
	                return { metadata: new metadata_1.Metadata(), options: arg1, callback: arg2 };
	            }
	        }
	        else {
	            if (!(arg1 instanceof metadata_1.Metadata &&
	                arg2 instanceof Object &&
	                isFunction(arg3))) {
	                throw new Error('Incorrect arguments passed');
	            }
	            return { metadata: arg1, options: arg2, callback: arg3 };
	        }
	    }
	    makeUnaryRequest(method, serialize, deserialize, argument, metadata, options, callback) {
	        var _a, _b;
	        const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);
	        const methodDefinition = {
	            path: method,
	            requestStream: false,
	            responseStream: false,
	            requestSerialize: serialize,
	            responseDeserialize: deserialize,
	        };
	        let callProperties = {
	            argument: argument,
	            metadata: checkedArguments.metadata,
	            call: new call_1.ClientUnaryCallImpl(),
	            channel: this[CHANNEL_SYMBOL],
	            methodDefinition: methodDefinition,
	            callOptions: checkedArguments.options,
	            callback: checkedArguments.callback,
	        };
	        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
	            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
	        }
	        const emitter = callProperties.call;
	        const interceptorArgs = {
	            clientInterceptors: this[INTERCEPTOR_SYMBOL],
	            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
	            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
	            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : [],
	        };
	        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
	        /* This needs to happen before the emitter is used. Unfortunately we can't
	         * enforce this with the type system. We need to construct this emitter
	         * before calling the CallInvocationTransformer, and we need to create the
	         * call after that. */
	        emitter.call = call;
	        let responseMessage = null;
	        let receivedStatus = false;
	        let callerStackError = new Error();
	        call.start(callProperties.metadata, {
	            onReceiveMetadata: metadata => {
	                emitter.emit('metadata', metadata);
	            },
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            onReceiveMessage(message) {
	                if (responseMessage !== null) {
	                    call.cancelWithStatus(constants_1.Status.UNIMPLEMENTED, 'Too many responses received');
	                }
	                responseMessage = message;
	            },
	            onReceiveStatus(status) {
	                if (receivedStatus) {
	                    return;
	                }
	                receivedStatus = true;
	                if (status.code === constants_1.Status.OK) {
	                    if (responseMessage === null) {
	                        const callerStack = getErrorStackString(callerStackError);
	                        callProperties.callback((0, call_1.callErrorFromStatus)({
	                            code: constants_1.Status.UNIMPLEMENTED,
	                            details: 'No message received',
	                            metadata: status.metadata,
	                        }, callerStack));
	                    }
	                    else {
	                        callProperties.callback(null, responseMessage);
	                    }
	                }
	                else {
	                    const callerStack = getErrorStackString(callerStackError);
	                    callProperties.callback((0, call_1.callErrorFromStatus)(status, callerStack));
	                }
	                /* Avoid retaining the callerStackError object in the call context of
	                 * the status event handler. */
	                callerStackError = null;
	                emitter.emit('status', status);
	            },
	        });
	        call.sendMessage(argument);
	        call.halfClose();
	        return emitter;
	    }
	    makeClientStreamRequest(method, serialize, deserialize, metadata, options, callback) {
	        var _a, _b;
	        const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);
	        const methodDefinition = {
	            path: method,
	            requestStream: true,
	            responseStream: false,
	            requestSerialize: serialize,
	            responseDeserialize: deserialize,
	        };
	        let callProperties = {
	            metadata: checkedArguments.metadata,
	            call: new call_1.ClientWritableStreamImpl(serialize),
	            channel: this[CHANNEL_SYMBOL],
	            methodDefinition: methodDefinition,
	            callOptions: checkedArguments.options,
	            callback: checkedArguments.callback,
	        };
	        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
	            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
	        }
	        const emitter = callProperties.call;
	        const interceptorArgs = {
	            clientInterceptors: this[INTERCEPTOR_SYMBOL],
	            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
	            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
	            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : [],
	        };
	        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
	        /* This needs to happen before the emitter is used. Unfortunately we can't
	         * enforce this with the type system. We need to construct this emitter
	         * before calling the CallInvocationTransformer, and we need to create the
	         * call after that. */
	        emitter.call = call;
	        let responseMessage = null;
	        let receivedStatus = false;
	        let callerStackError = new Error();
	        call.start(callProperties.metadata, {
	            onReceiveMetadata: metadata => {
	                emitter.emit('metadata', metadata);
	            },
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            onReceiveMessage(message) {
	                if (responseMessage !== null) {
	                    call.cancelWithStatus(constants_1.Status.UNIMPLEMENTED, 'Too many responses received');
	                }
	                responseMessage = message;
	                call.startRead();
	            },
	            onReceiveStatus(status) {
	                if (receivedStatus) {
	                    return;
	                }
	                receivedStatus = true;
	                if (status.code === constants_1.Status.OK) {
	                    if (responseMessage === null) {
	                        const callerStack = getErrorStackString(callerStackError);
	                        callProperties.callback((0, call_1.callErrorFromStatus)({
	                            code: constants_1.Status.UNIMPLEMENTED,
	                            details: 'No message received',
	                            metadata: status.metadata,
	                        }, callerStack));
	                    }
	                    else {
	                        callProperties.callback(null, responseMessage);
	                    }
	                }
	                else {
	                    const callerStack = getErrorStackString(callerStackError);
	                    callProperties.callback((0, call_1.callErrorFromStatus)(status, callerStack));
	                }
	                /* Avoid retaining the callerStackError object in the call context of
	                 * the status event handler. */
	                callerStackError = null;
	                emitter.emit('status', status);
	            },
	        });
	        return emitter;
	    }
	    checkMetadataAndOptions(arg1, arg2) {
	        let metadata;
	        let options;
	        if (arg1 instanceof metadata_1.Metadata) {
	            metadata = arg1;
	            if (arg2) {
	                options = arg2;
	            }
	            else {
	                options = {};
	            }
	        }
	        else {
	            if (arg1) {
	                options = arg1;
	            }
	            else {
	                options = {};
	            }
	            metadata = new metadata_1.Metadata();
	        }
	        return { metadata, options };
	    }
	    makeServerStreamRequest(method, serialize, deserialize, argument, metadata, options) {
	        var _a, _b;
	        const checkedArguments = this.checkMetadataAndOptions(metadata, options);
	        const methodDefinition = {
	            path: method,
	            requestStream: false,
	            responseStream: true,
	            requestSerialize: serialize,
	            responseDeserialize: deserialize,
	        };
	        let callProperties = {
	            argument: argument,
	            metadata: checkedArguments.metadata,
	            call: new call_1.ClientReadableStreamImpl(deserialize),
	            channel: this[CHANNEL_SYMBOL],
	            methodDefinition: methodDefinition,
	            callOptions: checkedArguments.options,
	        };
	        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
	            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
	        }
	        const stream = callProperties.call;
	        const interceptorArgs = {
	            clientInterceptors: this[INTERCEPTOR_SYMBOL],
	            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
	            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
	            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : [],
	        };
	        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
	        /* This needs to happen before the emitter is used. Unfortunately we can't
	         * enforce this with the type system. We need to construct this emitter
	         * before calling the CallInvocationTransformer, and we need to create the
	         * call after that. */
	        stream.call = call;
	        let receivedStatus = false;
	        let callerStackError = new Error();
	        call.start(callProperties.metadata, {
	            onReceiveMetadata(metadata) {
	                stream.emit('metadata', metadata);
	            },
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            onReceiveMessage(message) {
	                stream.push(message);
	            },
	            onReceiveStatus(status) {
	                if (receivedStatus) {
	                    return;
	                }
	                receivedStatus = true;
	                stream.push(null);
	                if (status.code !== constants_1.Status.OK) {
	                    const callerStack = getErrorStackString(callerStackError);
	                    stream.emit('error', (0, call_1.callErrorFromStatus)(status, callerStack));
	                }
	                /* Avoid retaining the callerStackError object in the call context of
	                 * the status event handler. */
	                callerStackError = null;
	                stream.emit('status', status);
	            },
	        });
	        call.sendMessage(argument);
	        call.halfClose();
	        return stream;
	    }
	    makeBidiStreamRequest(method, serialize, deserialize, metadata, options) {
	        var _a, _b;
	        const checkedArguments = this.checkMetadataAndOptions(metadata, options);
	        const methodDefinition = {
	            path: method,
	            requestStream: true,
	            responseStream: true,
	            requestSerialize: serialize,
	            responseDeserialize: deserialize,
	        };
	        let callProperties = {
	            metadata: checkedArguments.metadata,
	            call: new call_1.ClientDuplexStreamImpl(serialize, deserialize),
	            channel: this[CHANNEL_SYMBOL],
	            methodDefinition: methodDefinition,
	            callOptions: checkedArguments.options,
	        };
	        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
	            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
	        }
	        const stream = callProperties.call;
	        const interceptorArgs = {
	            clientInterceptors: this[INTERCEPTOR_SYMBOL],
	            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
	            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
	            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : [],
	        };
	        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
	        /* This needs to happen before the emitter is used. Unfortunately we can't
	         * enforce this with the type system. We need to construct this emitter
	         * before calling the CallInvocationTransformer, and we need to create the
	         * call after that. */
	        stream.call = call;
	        let receivedStatus = false;
	        let callerStackError = new Error();
	        call.start(callProperties.metadata, {
	            onReceiveMetadata(metadata) {
	                stream.emit('metadata', metadata);
	            },
	            onReceiveMessage(message) {
	                stream.push(message);
	            },
	            onReceiveStatus(status) {
	                if (receivedStatus) {
	                    return;
	                }
	                receivedStatus = true;
	                stream.push(null);
	                if (status.code !== constants_1.Status.OK) {
	                    const callerStack = getErrorStackString(callerStackError);
	                    stream.emit('error', (0, call_1.callErrorFromStatus)(status, callerStack));
	                }
	                /* Avoid retaining the callerStackError object in the call context of
	                 * the status event handler. */
	                callerStackError = null;
	                stream.emit('status', status);
	            },
	        });
	        return stream;
	    }
	}
	client.Client = Client;
	
	return client;
}

var hasRequiredMakeClient;

function requireMakeClient () {
	if (hasRequiredMakeClient) return makeClient;
	hasRequiredMakeClient = 1;
	/*
	 * Copyright 2019 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(makeClient, "__esModule", { value: true });
	makeClient.makeClientConstructor = makeClientConstructor;
	makeClient.loadPackageDefinition = loadPackageDefinition;
	const client_1 = requireClient();
	/**
	 * Map with short names for each of the requester maker functions. Used in
	 * makeClientConstructor
	 * @private
	 */
	const requesterFuncs = {
	    unary: client_1.Client.prototype.makeUnaryRequest,
	    server_stream: client_1.Client.prototype.makeServerStreamRequest,
	    client_stream: client_1.Client.prototype.makeClientStreamRequest,
	    bidi: client_1.Client.prototype.makeBidiStreamRequest,
	};
	/**
	 * Returns true, if given key is included in the blacklisted
	 * keys.
	 * @param key key for check, string.
	 */
	function isPrototypePolluted(key) {
	    return ['__proto__', 'prototype', 'constructor'].includes(key);
	}
	/**
	 * Creates a constructor for a client with the given methods, as specified in
	 * the methods argument. The resulting class will have an instance method for
	 * each method in the service, which is a partial application of one of the
	 * [Client]{@link grpc.Client} request methods, depending on `requestSerialize`
	 * and `responseSerialize`, with the `method`, `serialize`, and `deserialize`
	 * arguments predefined.
	 * @param methods An object mapping method names to
	 *     method attributes
	 * @param serviceName The fully qualified name of the service
	 * @param classOptions An options object.
	 * @return New client constructor, which is a subclass of
	 *     {@link grpc.Client}, and has the same arguments as that constructor.
	 */
	function makeClientConstructor(methods, serviceName, classOptions) {
	    class ServiceClientImpl extends client_1.Client {
	    }
	    Object.keys(methods).forEach(name => {
	        if (isPrototypePolluted(name)) {
	            return;
	        }
	        const attrs = methods[name];
	        let methodType;
	        // TODO(murgatroid99): Verify that we don't need this anymore
	        if (typeof name === 'string' && name.charAt(0) === '$') {
	            throw new Error('Method names cannot start with $');
	        }
	        if (attrs.requestStream) {
	            if (attrs.responseStream) {
	                methodType = 'bidi';
	            }
	            else {
	                methodType = 'client_stream';
	            }
	        }
	        else {
	            if (attrs.responseStream) {
	                methodType = 'server_stream';
	            }
	            else {
	                methodType = 'unary';
	            }
	        }
	        const serialize = attrs.requestSerialize;
	        const deserialize = attrs.responseDeserialize;
	        const methodFunc = partial(requesterFuncs[methodType], attrs.path, serialize, deserialize);
	        ServiceClientImpl.prototype[name] = methodFunc;
	        // Associate all provided attributes with the method
	        Object.assign(ServiceClientImpl.prototype[name], attrs);
	        if (attrs.originalName && !isPrototypePolluted(attrs.originalName)) {
	            ServiceClientImpl.prototype[attrs.originalName] =
	                ServiceClientImpl.prototype[name];
	        }
	    });
	    ServiceClientImpl.service = methods;
	    ServiceClientImpl.serviceName = serviceName;
	    return ServiceClientImpl;
	}
	function partial(fn, path, serialize, deserialize) {
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    return function (...args) {
	        return fn.call(this, path, serialize, deserialize, ...args);
	    };
	}
	function isProtobufTypeDefinition(obj) {
	    return 'format' in obj;
	}
	/**
	 * Load a gRPC package definition as a gRPC object hierarchy.
	 * @param packageDef The package definition object.
	 * @return The resulting gRPC object.
	 */
	function loadPackageDefinition(packageDef) {
	    const result = {};
	    for (const serviceFqn in packageDef) {
	        if (Object.prototype.hasOwnProperty.call(packageDef, serviceFqn)) {
	            const service = packageDef[serviceFqn];
	            const nameComponents = serviceFqn.split('.');
	            if (nameComponents.some((comp) => isPrototypePolluted(comp))) {
	                continue;
	            }
	            const serviceName = nameComponents[nameComponents.length - 1];
	            let current = result;
	            for (const packageName of nameComponents.slice(0, -1)) {
	                if (!current[packageName]) {
	                    current[packageName] = {};
	                }
	                current = current[packageName];
	            }
	            if (isProtobufTypeDefinition(service)) {
	                current[serviceName] = service;
	            }
	            else {
	                current[serviceName] = makeClientConstructor(service, serviceName);
	            }
	        }
	    }
	    return result;
	}
	
	return makeClient;
}

var src$1 = {};

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

var lodash_camelcase;
var hasRequiredLodash_camelcase;

function requireLodash_camelcase () {
	if (hasRequiredLodash_camelcase) return lodash_camelcase;
	hasRequiredLodash_camelcase = 1;
	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/** Used to match words composed of alphanumeric characters. */
	var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	/** Used to match Latin Unicode letters (excluding mathematical operators). */
	var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
	    rsComboSymbolsRange = '\\u20d0-\\u20f0',
	    rsDingbatRange = '\\u2700-\\u27bf',
	    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	    rsPunctuationRange = '\\u2000-\\u206f',
	    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	    rsVarRange = '\\ufe0e\\ufe0f',
	    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	/** Used to compose unicode capture groups. */
	var rsApos = "['\u2019]",
	    rsAstral = '[' + rsAstralRange + ']',
	    rsBreak = '[' + rsBreakRange + ']',
	    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
	    rsDigits = '\\d+',
	    rsDingbat = '[' + rsDingbatRange + ']',
	    rsLower = '[' + rsLowerRange + ']',
	    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	    rsFitz = '\\ud83c[\\udffb-\\udfff]',
	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	    rsNonAstral = '[^' + rsAstralRange + ']',
	    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	    rsUpper = '[' + rsUpperRange + ']',
	    rsZWJ = '\\u200d';

	/** Used to compose unicode regexes. */
	var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
	    rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
	    rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	    rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	    reOptMod = rsModifier + '?',
	    rsOptVar = '[' + rsVarRange + ']?',
	    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
	    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	/** Used to match apostrophes. */
	var reApos = RegExp(rsApos, 'g');

	/**
	 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	 */
	var reComboMark = RegExp(rsCombo, 'g');

	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	/** Used to match complex or compound words. */
	var reUnicodeWord = RegExp([
	  rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	  rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
	  rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
	  rsUpper + '+' + rsOptUpperContr,
	  rsDigits,
	  rsEmoji
	].join('|'), 'g');

	/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

	/** Used to detect strings that need a more robust regexp to match words. */
	var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	/** Used to map Latin Unicode letters to basic Latin letters. */
	var deburredLetters = {
	  // Latin-1 Supplement block.
	  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	  '\xc7': 'C',  '\xe7': 'c',
	  '\xd0': 'D',  '\xf0': 'd',
	  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	  '\xd1': 'N',  '\xf1': 'n',
	  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	  '\xc6': 'Ae', '\xe6': 'ae',
	  '\xde': 'Th', '\xfe': 'th',
	  '\xdf': 'ss',
	  // Latin Extended-A block.
	  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	  '\u0134': 'J',  '\u0135': 'j',
	  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	  '\u0174': 'W',  '\u0175': 'w',
	  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	  '\u0132': 'IJ', '\u0133': 'ij',
	  '\u0152': 'Oe', '\u0153': 'oe',
	  '\u0149': "'n", '\u017f': 'ss'
	};

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array ? array.length : 0;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	/**
	 * Converts an ASCII `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function asciiToArray(string) {
	  return string.split('');
	}

	/**
	 * Splits an ASCII `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function asciiWords(string) {
	  return string.match(reAsciiWord) || [];
	}

	/**
	 * The base implementation of `_.propertyOf` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyOf(object) {
	  return function(key) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	 * letters to basic Latin letters.
	 *
	 * @private
	 * @param {string} letter The matched letter to deburr.
	 * @returns {string} Returns the deburred letter.
	 */
	var deburrLetter = basePropertyOf(deburredLetters);

	/**
	 * Checks if `string` contains Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	 */
	function hasUnicode(string) {
	  return reHasUnicode.test(string);
	}

	/**
	 * Checks if `string` contains a word composed of Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a word is found, else `false`.
	 */
	function hasUnicodeWord(string) {
	  return reHasUnicodeWord.test(string);
	}

	/**
	 * Converts `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function stringToArray(string) {
	  return hasUnicode(string)
	    ? unicodeToArray(string)
	    : asciiToArray(string);
	}

	/**
	 * Converts a Unicode `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function unicodeToArray(string) {
	  return string.match(reUnicode) || [];
	}

	/**
	 * Splits a Unicode `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function unicodeWords(string) {
	  return string.match(reUnicodeWord) || [];
	}

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var Symbol = root.Symbol;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = end > length ? length : end;
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	/**
	 * Casts `array` to a slice if it's needed.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {number} start The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the cast slice.
	 */
	function castSlice(array, start, end) {
	  var length = array.length;
	  end = end === undefined ? length : end;
	  return (!start && end >= length) ? array : baseSlice(array, start, end);
	}

	/**
	 * Creates a function like `_.lowerFirst`.
	 *
	 * @private
	 * @param {string} methodName The name of the `String` case method to use.
	 * @returns {Function} Returns the new case function.
	 */
	function createCaseFirst(methodName) {
	  return function(string) {
	    string = toString(string);

	    var strSymbols = hasUnicode(string)
	      ? stringToArray(string)
	      : undefined;

	    var chr = strSymbols
	      ? strSymbols[0]
	      : string.charAt(0);

	    var trailing = strSymbols
	      ? castSlice(strSymbols, 1).join('')
	      : string.slice(1);

	    return chr[methodName]() + trailing;
	  };
	}

	/**
	 * Creates a function like `_.camelCase`.
	 *
	 * @private
	 * @param {Function} callback The function to combine each word.
	 * @returns {Function} Returns the new compounder function.
	 */
	function createCompounder(callback) {
	  return function(string) {
	    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	  };
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}

	/**
	 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the camel cased string.
	 * @example
	 *
	 * _.camelCase('Foo Bar');
	 * // => 'fooBar'
	 *
	 * _.camelCase('--foo-bar--');
	 * // => 'fooBar'
	 *
	 * _.camelCase('__FOO_BAR__');
	 * // => 'fooBar'
	 */
	var camelCase = createCompounder(function(result, word, index) {
	  word = word.toLowerCase();
	  return result + (index ? capitalize(word) : word);
	});

	/**
	 * Converts the first character of `string` to upper case and the remaining
	 * to lower case.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to capitalize.
	 * @returns {string} Returns the capitalized string.
	 * @example
	 *
	 * _.capitalize('FRED');
	 * // => 'Fred'
	 */
	function capitalize(string) {
	  return upperFirst(toString(string).toLowerCase());
	}

	/**
	 * Deburrs `string` by converting
	 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	 * letters to basic Latin letters and removing
	 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to deburr.
	 * @returns {string} Returns the deburred string.
	 * @example
	 *
	 * _.deburr('déjà vu');
	 * // => 'deja vu'
	 */
	function deburr(string) {
	  string = toString(string);
	  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	}

	/**
	 * Converts the first character of `string` to upper case.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.upperFirst('fred');
	 * // => 'Fred'
	 *
	 * _.upperFirst('FRED');
	 * // => 'FRED'
	 */
	var upperFirst = createCaseFirst('toUpperCase');

	/**
	 * Splits `string` into an array of its words.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {RegExp|string} [pattern] The pattern to match words.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the words of `string`.
	 * @example
	 *
	 * _.words('fred, barney, & pebbles');
	 * // => ['fred', 'barney', 'pebbles']
	 *
	 * _.words('fred, barney, & pebbles', /[^, ]+/g);
	 * // => ['fred', 'barney', '&', 'pebbles']
	 */
	function words(string, pattern, guard) {
	  string = toString(string);
	  pattern = guard ? undefined : pattern;

	  if (pattern === undefined) {
	    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	  }
	  return string.match(pattern) || [];
	}

	lodash_camelcase = camelCase;
	return lodash_camelcase;
}

var src = {exports: {}};

var indexLight = {exports: {}};

var indexMinimal = {};

var minimal = {};

var aspromise;
var hasRequiredAspromise;

function requireAspromise () {
	if (hasRequiredAspromise) return aspromise;
	hasRequiredAspromise = 1;
	aspromise = asPromise;

	/**
	 * Callback as used by {@link util.asPromise}.
	 * @typedef asPromiseCallback
	 * @type {function}
	 * @param {Error|null} error Error, if any
	 * @param {...*} params Additional arguments
	 * @returns {undefined}
	 */

	/**
	 * Returns a promise from a node-style callback function.
	 * @memberof util
	 * @param {asPromiseCallback} fn Function to call
	 * @param {*} ctx Function context
	 * @param {...*} params Function arguments
	 * @returns {Promise<*>} Promisified function
	 */
	function asPromise(fn, ctx/*, varargs */) {
	    var params  = new Array(arguments.length - 1),
	        offset  = 0,
	        index   = 2,
	        pending = true;
	    while (index < arguments.length)
	        params[offset++] = arguments[index++];
	    return new Promise(function executor(resolve, reject) {
	        params[offset] = function callback(err/*, varargs */) {
	            if (pending) {
	                pending = false;
	                if (err)
	                    reject(err);
	                else {
	                    var params = new Array(arguments.length - 1),
	                        offset = 0;
	                    while (offset < params.length)
	                        params[offset++] = arguments[offset];
	                    resolve.apply(null, params);
	                }
	            }
	        };
	        try {
	            fn.apply(ctx || null, params);
	        } catch (err) {
	            if (pending) {
	                pending = false;
	                reject(err);
	            }
	        }
	    });
	}
	return aspromise;
}

var base64 = {};

var hasRequiredBase64;

function requireBase64 () {
	if (hasRequiredBase64) return base64;
	hasRequiredBase64 = 1;
	(function (exports) {

		/**
		 * A minimal base64 implementation for number arrays.
		 * @memberof util
		 * @namespace
		 */
		var base64 = exports;

		/**
		 * Calculates the byte length of a base64 encoded string.
		 * @param {string} string Base64 encoded string
		 * @returns {number} Byte length
		 */
		base64.length = function length(string) {
		    var p = string.length;
		    if (!p)
		        return 0;
		    var n = 0;
		    while (--p % 4 > 1 && string.charAt(p) === "=")
		        ++n;
		    return Math.ceil(string.length * 3) / 4 - n;
		};

		// Base64 encoding table
		var b64 = new Array(64);

		// Base64 decoding table
		var s64 = new Array(123);

		// 65..90, 97..122, 48..57, 43, 47
		for (var i = 0; i < 64;)
		    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

		/**
		 * Encodes a buffer to a base64 encoded string.
		 * @param {Uint8Array} buffer Source buffer
		 * @param {number} start Source start
		 * @param {number} end Source end
		 * @returns {string} Base64 encoded string
		 */
		base64.encode = function encode(buffer, start, end) {
		    var parts = null,
		        chunk = [];
		    var i = 0, // output index
		        j = 0, // goto index
		        t;     // temporary
		    while (start < end) {
		        var b = buffer[start++];
		        switch (j) {
		            case 0:
		                chunk[i++] = b64[b >> 2];
		                t = (b & 3) << 4;
		                j = 1;
		                break;
		            case 1:
		                chunk[i++] = b64[t | b >> 4];
		                t = (b & 15) << 2;
		                j = 2;
		                break;
		            case 2:
		                chunk[i++] = b64[t | b >> 6];
		                chunk[i++] = b64[b & 63];
		                j = 0;
		                break;
		        }
		        if (i > 8191) {
		            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
		            i = 0;
		        }
		    }
		    if (j) {
		        chunk[i++] = b64[t];
		        chunk[i++] = 61;
		        if (j === 1)
		            chunk[i++] = 61;
		    }
		    if (parts) {
		        if (i)
		            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
		        return parts.join("");
		    }
		    return String.fromCharCode.apply(String, chunk.slice(0, i));
		};

		var invalidEncoding = "invalid encoding";

		/**
		 * Decodes a base64 encoded string to a buffer.
		 * @param {string} string Source string
		 * @param {Uint8Array} buffer Destination buffer
		 * @param {number} offset Destination offset
		 * @returns {number} Number of bytes written
		 * @throws {Error} If encoding is invalid
		 */
		base64.decode = function decode(string, buffer, offset) {
		    var start = offset;
		    var j = 0, // goto index
		        t;     // temporary
		    for (var i = 0; i < string.length;) {
		        var c = string.charCodeAt(i++);
		        if (c === 61 && j > 1)
		            break;
		        if ((c = s64[c]) === undefined)
		            throw Error(invalidEncoding);
		        switch (j) {
		            case 0:
		                t = c;
		                j = 1;
		                break;
		            case 1:
		                buffer[offset++] = t << 2 | (c & 48) >> 4;
		                t = c;
		                j = 2;
		                break;
		            case 2:
		                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
		                t = c;
		                j = 3;
		                break;
		            case 3:
		                buffer[offset++] = (t & 3) << 6 | c;
		                j = 0;
		                break;
		        }
		    }
		    if (j === 1)
		        throw Error(invalidEncoding);
		    return offset - start;
		};

		/**
		 * Tests if the specified string appears to be base64 encoded.
		 * @param {string} string String to test
		 * @returns {boolean} `true` if probably base64 encoded, otherwise false
		 */
		base64.test = function test(string) {
		    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
		}; 
	} (base64));
	return base64;
}

var eventemitter;
var hasRequiredEventemitter;

function requireEventemitter () {
	if (hasRequiredEventemitter) return eventemitter;
	hasRequiredEventemitter = 1;
	eventemitter = EventEmitter;

	/**
	 * Constructs a new event emitter instance.
	 * @classdesc A minimal event emitter.
	 * @memberof util
	 * @constructor
	 */
	function EventEmitter() {

	    /**
	     * Registered listeners.
	     * @type {Object.<string,*>}
	     * @private
	     */
	    this._listeners = {};
	}

	/**
	 * Registers an event listener.
	 * @param {string} evt Event name
	 * @param {function} fn Listener
	 * @param {*} [ctx] Listener context
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter.prototype.on = function on(evt, fn, ctx) {
	    (this._listeners[evt] || (this._listeners[evt] = [])).push({
	        fn  : fn,
	        ctx : ctx || this
	    });
	    return this;
	};

	/**
	 * Removes an event listener or any matching listeners if arguments are omitted.
	 * @param {string} [evt] Event name. Removes all listeners if omitted.
	 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter.prototype.off = function off(evt, fn) {
	    if (evt === undefined)
	        this._listeners = {};
	    else {
	        if (fn === undefined)
	            this._listeners[evt] = [];
	        else {
	            var listeners = this._listeners[evt];
	            for (var i = 0; i < listeners.length;)
	                if (listeners[i].fn === fn)
	                    listeners.splice(i, 1);
	                else
	                    ++i;
	        }
	    }
	    return this;
	};

	/**
	 * Emits an event by calling its listeners with the specified arguments.
	 * @param {string} evt Event name
	 * @param {...*} args Arguments
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter.prototype.emit = function emit(evt) {
	    var listeners = this._listeners[evt];
	    if (listeners) {
	        var args = [],
	            i = 1;
	        for (; i < arguments.length;)
	            args.push(arguments[i++]);
	        for (i = 0; i < listeners.length;)
	            listeners[i].fn.apply(listeners[i++].ctx, args);
	    }
	    return this;
	};
	return eventemitter;
}

var float;
var hasRequiredFloat;

function requireFloat () {
	if (hasRequiredFloat) return float;
	hasRequiredFloat = 1;

	float = factory(factory);

	/**
	 * Reads / writes floats / doubles from / to buffers.
	 * @name util.float
	 * @namespace
	 */

	/**
	 * Writes a 32 bit float to a buffer using little endian byte order.
	 * @name util.float.writeFloatLE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Writes a 32 bit float to a buffer using big endian byte order.
	 * @name util.float.writeFloatBE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Reads a 32 bit float from a buffer using little endian byte order.
	 * @name util.float.readFloatLE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Reads a 32 bit float from a buffer using big endian byte order.
	 * @name util.float.readFloatBE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Writes a 64 bit double to a buffer using little endian byte order.
	 * @name util.float.writeDoubleLE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Writes a 64 bit double to a buffer using big endian byte order.
	 * @name util.float.writeDoubleBE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Reads a 64 bit double from a buffer using little endian byte order.
	 * @name util.float.readDoubleLE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Reads a 64 bit double from a buffer using big endian byte order.
	 * @name util.float.readDoubleBE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	// Factory function for the purpose of node-based testing in modified global environments
	function factory(exports) {

	    // float: typed array
	    if (typeof Float32Array !== "undefined") (function() {

	        var f32 = new Float32Array([ -0 ]),
	            f8b = new Uint8Array(f32.buffer),
	            le  = f8b[3] === 128;

	        function writeFloat_f32_cpy(val, buf, pos) {
	            f32[0] = val;
	            buf[pos    ] = f8b[0];
	            buf[pos + 1] = f8b[1];
	            buf[pos + 2] = f8b[2];
	            buf[pos + 3] = f8b[3];
	        }

	        function writeFloat_f32_rev(val, buf, pos) {
	            f32[0] = val;
	            buf[pos    ] = f8b[3];
	            buf[pos + 1] = f8b[2];
	            buf[pos + 2] = f8b[1];
	            buf[pos + 3] = f8b[0];
	        }

	        /* istanbul ignore next */
	        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
	        /* istanbul ignore next */
	        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

	        function readFloat_f32_cpy(buf, pos) {
	            f8b[0] = buf[pos    ];
	            f8b[1] = buf[pos + 1];
	            f8b[2] = buf[pos + 2];
	            f8b[3] = buf[pos + 3];
	            return f32[0];
	        }

	        function readFloat_f32_rev(buf, pos) {
	            f8b[3] = buf[pos    ];
	            f8b[2] = buf[pos + 1];
	            f8b[1] = buf[pos + 2];
	            f8b[0] = buf[pos + 3];
	            return f32[0];
	        }

	        /* istanbul ignore next */
	        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
	        /* istanbul ignore next */
	        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

	    // float: ieee754
	    })(); else (function() {

	        function writeFloat_ieee754(writeUint, val, buf, pos) {
	            var sign = val < 0 ? 1 : 0;
	            if (sign)
	                val = -val;
	            if (val === 0)
	                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
	            else if (isNaN(val))
	                writeUint(2143289344, buf, pos);
	            else if (val > 3.4028234663852886e+38) // +-Infinity
	                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
	            else if (val < 1.1754943508222875e-38) // denormal
	                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
	            else {
	                var exponent = Math.floor(Math.log(val) / Math.LN2),
	                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
	                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
	            }
	        }

	        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
	        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

	        function readFloat_ieee754(readUint, buf, pos) {
	            var uint = readUint(buf, pos),
	                sign = (uint >> 31) * 2 + 1,
	                exponent = uint >>> 23 & 255,
	                mantissa = uint & 8388607;
	            return exponent === 255
	                ? mantissa
	                ? NaN
	                : sign * Infinity
	                : exponent === 0 // denormal
	                ? sign * 1.401298464324817e-45 * mantissa
	                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
	        }

	        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
	        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

	    })();

	    // double: typed array
	    if (typeof Float64Array !== "undefined") (function() {

	        var f64 = new Float64Array([-0]),
	            f8b = new Uint8Array(f64.buffer),
	            le  = f8b[7] === 128;

	        function writeDouble_f64_cpy(val, buf, pos) {
	            f64[0] = val;
	            buf[pos    ] = f8b[0];
	            buf[pos + 1] = f8b[1];
	            buf[pos + 2] = f8b[2];
	            buf[pos + 3] = f8b[3];
	            buf[pos + 4] = f8b[4];
	            buf[pos + 5] = f8b[5];
	            buf[pos + 6] = f8b[6];
	            buf[pos + 7] = f8b[7];
	        }

	        function writeDouble_f64_rev(val, buf, pos) {
	            f64[0] = val;
	            buf[pos    ] = f8b[7];
	            buf[pos + 1] = f8b[6];
	            buf[pos + 2] = f8b[5];
	            buf[pos + 3] = f8b[4];
	            buf[pos + 4] = f8b[3];
	            buf[pos + 5] = f8b[2];
	            buf[pos + 6] = f8b[1];
	            buf[pos + 7] = f8b[0];
	        }

	        /* istanbul ignore next */
	        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
	        /* istanbul ignore next */
	        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

	        function readDouble_f64_cpy(buf, pos) {
	            f8b[0] = buf[pos    ];
	            f8b[1] = buf[pos + 1];
	            f8b[2] = buf[pos + 2];
	            f8b[3] = buf[pos + 3];
	            f8b[4] = buf[pos + 4];
	            f8b[5] = buf[pos + 5];
	            f8b[6] = buf[pos + 6];
	            f8b[7] = buf[pos + 7];
	            return f64[0];
	        }

	        function readDouble_f64_rev(buf, pos) {
	            f8b[7] = buf[pos    ];
	            f8b[6] = buf[pos + 1];
	            f8b[5] = buf[pos + 2];
	            f8b[4] = buf[pos + 3];
	            f8b[3] = buf[pos + 4];
	            f8b[2] = buf[pos + 5];
	            f8b[1] = buf[pos + 6];
	            f8b[0] = buf[pos + 7];
	            return f64[0];
	        }

	        /* istanbul ignore next */
	        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
	        /* istanbul ignore next */
	        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

	    // double: ieee754
	    })(); else (function() {

	        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
	            var sign = val < 0 ? 1 : 0;
	            if (sign)
	                val = -val;
	            if (val === 0) {
	                writeUint(0, buf, pos + off0);
	                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
	            } else if (isNaN(val)) {
	                writeUint(0, buf, pos + off0);
	                writeUint(2146959360, buf, pos + off1);
	            } else if (val > 1.7976931348623157e+308) { // +-Infinity
	                writeUint(0, buf, pos + off0);
	                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
	            } else {
	                var mantissa;
	                if (val < 2.2250738585072014e-308) { // denormal
	                    mantissa = val / 5e-324;
	                    writeUint(mantissa >>> 0, buf, pos + off0);
	                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
	                } else {
	                    var exponent = Math.floor(Math.log(val) / Math.LN2);
	                    if (exponent === 1024)
	                        exponent = 1023;
	                    mantissa = val * Math.pow(2, -exponent);
	                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
	                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
	                }
	            }
	        }

	        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
	        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

	        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
	            var lo = readUint(buf, pos + off0),
	                hi = readUint(buf, pos + off1);
	            var sign = (hi >> 31) * 2 + 1,
	                exponent = hi >>> 20 & 2047,
	                mantissa = 4294967296 * (hi & 1048575) + lo;
	            return exponent === 2047
	                ? mantissa
	                ? NaN
	                : sign * Infinity
	                : exponent === 0 // denormal
	                ? sign * 5e-324 * mantissa
	                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
	        }

	        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
	        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

	    })();

	    return exports;
	}

	// uint helpers

	function writeUintLE(val, buf, pos) {
	    buf[pos    ] =  val        & 255;
	    buf[pos + 1] =  val >>> 8  & 255;
	    buf[pos + 2] =  val >>> 16 & 255;
	    buf[pos + 3] =  val >>> 24;
	}

	function writeUintBE(val, buf, pos) {
	    buf[pos    ] =  val >>> 24;
	    buf[pos + 1] =  val >>> 16 & 255;
	    buf[pos + 2] =  val >>> 8  & 255;
	    buf[pos + 3] =  val        & 255;
	}

	function readUintLE(buf, pos) {
	    return (buf[pos    ]
	          | buf[pos + 1] << 8
	          | buf[pos + 2] << 16
	          | buf[pos + 3] << 24) >>> 0;
	}

	function readUintBE(buf, pos) {
	    return (buf[pos    ] << 24
	          | buf[pos + 1] << 16
	          | buf[pos + 2] << 8
	          | buf[pos + 3]) >>> 0;
	}
	return float;
}

var inquire_1;
var hasRequiredInquire;

function requireInquire () {
	if (hasRequiredInquire) return inquire_1;
	hasRequiredInquire = 1;
	inquire_1 = inquire;

	/**
	 * Requires a module only if available.
	 * @memberof util
	 * @param {string} moduleName Module to require
	 * @returns {?Object} Required module if available and not empty, otherwise `null`
	 */
	function inquire(moduleName) {
	    try {
	        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
	        if (mod && (mod.length || Object.keys(mod).length))
	            return mod;
	    } catch (e) {} // eslint-disable-line no-empty
	    return null;
	}
	return inquire_1;
}

var utf8 = {};

var hasRequiredUtf8;

function requireUtf8 () {
	if (hasRequiredUtf8) return utf8;
	hasRequiredUtf8 = 1;
	(function (exports) {

		/**
		 * A minimal UTF8 implementation for number arrays.
		 * @memberof util
		 * @namespace
		 */
		var utf8 = exports;

		/**
		 * Calculates the UTF8 byte length of a string.
		 * @param {string} string String
		 * @returns {number} Byte length
		 */
		utf8.length = function utf8_length(string) {
		    var len = 0,
		        c = 0;
		    for (var i = 0; i < string.length; ++i) {
		        c = string.charCodeAt(i);
		        if (c < 128)
		            len += 1;
		        else if (c < 2048)
		            len += 2;
		        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
		            ++i;
		            len += 4;
		        } else
		            len += 3;
		    }
		    return len;
		};

		/**
		 * Reads UTF8 bytes as a string.
		 * @param {Uint8Array} buffer Source buffer
		 * @param {number} start Source start
		 * @param {number} end Source end
		 * @returns {string} String read
		 */
		utf8.read = function utf8_read(buffer, start, end) {
		    var len = end - start;
		    if (len < 1)
		        return "";
		    var parts = null,
		        chunk = [],
		        i = 0, // char offset
		        t;     // temporary
		    while (start < end) {
		        t = buffer[start++];
		        if (t < 128)
		            chunk[i++] = t;
		        else if (t > 191 && t < 224)
		            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
		        else if (t > 239 && t < 365) {
		            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
		            chunk[i++] = 0xD800 + (t >> 10);
		            chunk[i++] = 0xDC00 + (t & 1023);
		        } else
		            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
		        if (i > 8191) {
		            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
		            i = 0;
		        }
		    }
		    if (parts) {
		        if (i)
		            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
		        return parts.join("");
		    }
		    return String.fromCharCode.apply(String, chunk.slice(0, i));
		};

		/**
		 * Writes a string as UTF8 bytes.
		 * @param {string} string Source string
		 * @param {Uint8Array} buffer Destination buffer
		 * @param {number} offset Destination offset
		 * @returns {number} Bytes written
		 */
		utf8.write = function utf8_write(string, buffer, offset) {
		    var start = offset,
		        c1, // character 1
		        c2; // character 2
		    for (var i = 0; i < string.length; ++i) {
		        c1 = string.charCodeAt(i);
		        if (c1 < 128) {
		            buffer[offset++] = c1;
		        } else if (c1 < 2048) {
		            buffer[offset++] = c1 >> 6       | 192;
		            buffer[offset++] = c1       & 63 | 128;
		        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
		            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
		            ++i;
		            buffer[offset++] = c1 >> 18      | 240;
		            buffer[offset++] = c1 >> 12 & 63 | 128;
		            buffer[offset++] = c1 >> 6  & 63 | 128;
		            buffer[offset++] = c1       & 63 | 128;
		        } else {
		            buffer[offset++] = c1 >> 12      | 224;
		            buffer[offset++] = c1 >> 6  & 63 | 128;
		            buffer[offset++] = c1       & 63 | 128;
		        }
		    }
		    return offset - start;
		}; 
	} (utf8));
	return utf8;
}

var pool_1;
var hasRequiredPool;

function requirePool () {
	if (hasRequiredPool) return pool_1;
	hasRequiredPool = 1;
	pool_1 = pool;

	/**
	 * An allocator as used by {@link util.pool}.
	 * @typedef PoolAllocator
	 * @type {function}
	 * @param {number} size Buffer size
	 * @returns {Uint8Array} Buffer
	 */

	/**
	 * A slicer as used by {@link util.pool}.
	 * @typedef PoolSlicer
	 * @type {function}
	 * @param {number} start Start offset
	 * @param {number} end End offset
	 * @returns {Uint8Array} Buffer slice
	 * @this {Uint8Array}
	 */

	/**
	 * A general purpose buffer pool.
	 * @memberof util
	 * @function
	 * @param {PoolAllocator} alloc Allocator
	 * @param {PoolSlicer} slice Slicer
	 * @param {number} [size=8192] Slab size
	 * @returns {PoolAllocator} Pooled allocator
	 */
	function pool(alloc, slice, size) {
	    var SIZE   = size || 8192;
	    var MAX    = SIZE >>> 1;
	    var slab   = null;
	    var offset = SIZE;
	    return function pool_alloc(size) {
	        if (size < 1 || size > MAX)
	            return alloc(size);
	        if (offset + size > SIZE) {
	            slab = alloc(SIZE);
	            offset = 0;
	        }
	        var buf = slice.call(slab, offset, offset += size);
	        if (offset & 7) // align to 32 bit
	            offset = (offset | 7) + 1;
	        return buf;
	    };
	}
	return pool_1;
}

var longbits;
var hasRequiredLongbits;

function requireLongbits () {
	if (hasRequiredLongbits) return longbits;
	hasRequiredLongbits = 1;
	longbits = LongBits;

	var util = requireMinimal();

	/**
	 * Constructs new long bits.
	 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
	 * @memberof util
	 * @constructor
	 * @param {number} lo Low 32 bits, unsigned
	 * @param {number} hi High 32 bits, unsigned
	 */
	function LongBits(lo, hi) {

	    // note that the casts below are theoretically unnecessary as of today, but older statically
	    // generated converter code might still call the ctor with signed 32bits. kept for compat.

	    /**
	     * Low bits.
	     * @type {number}
	     */
	    this.lo = lo >>> 0;

	    /**
	     * High bits.
	     * @type {number}
	     */
	    this.hi = hi >>> 0;
	}

	/**
	 * Zero bits.
	 * @memberof util.LongBits
	 * @type {util.LongBits}
	 */
	var zero = LongBits.zero = new LongBits(0, 0);

	zero.toNumber = function() { return 0; };
	zero.zzEncode = zero.zzDecode = function() { return this; };
	zero.length = function() { return 1; };

	/**
	 * Zero hash.
	 * @memberof util.LongBits
	 * @type {string}
	 */
	var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

	/**
	 * Constructs new long bits from the specified number.
	 * @param {number} value Value
	 * @returns {util.LongBits} Instance
	 */
	LongBits.fromNumber = function fromNumber(value) {
	    if (value === 0)
	        return zero;
	    var sign = value < 0;
	    if (sign)
	        value = -value;
	    var lo = value >>> 0,
	        hi = (value - lo) / 4294967296 >>> 0;
	    if (sign) {
	        hi = ~hi >>> 0;
	        lo = ~lo >>> 0;
	        if (++lo > 4294967295) {
	            lo = 0;
	            if (++hi > 4294967295)
	                hi = 0;
	        }
	    }
	    return new LongBits(lo, hi);
	};

	/**
	 * Constructs new long bits from a number, long or string.
	 * @param {Long|number|string} value Value
	 * @returns {util.LongBits} Instance
	 */
	LongBits.from = function from(value) {
	    if (typeof value === "number")
	        return LongBits.fromNumber(value);
	    if (util.isString(value)) {
	        /* istanbul ignore else */
	        if (util.Long)
	            value = util.Long.fromString(value);
	        else
	            return LongBits.fromNumber(parseInt(value, 10));
	    }
	    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
	};

	/**
	 * Converts this long bits to a possibly unsafe JavaScript number.
	 * @param {boolean} [unsigned=false] Whether unsigned or not
	 * @returns {number} Possibly unsafe number
	 */
	LongBits.prototype.toNumber = function toNumber(unsigned) {
	    if (!unsigned && this.hi >>> 31) {
	        var lo = ~this.lo + 1 >>> 0,
	            hi = ~this.hi     >>> 0;
	        if (!lo)
	            hi = hi + 1 >>> 0;
	        return -(lo + hi * 4294967296);
	    }
	    return this.lo + this.hi * 4294967296;
	};

	/**
	 * Converts this long bits to a long.
	 * @param {boolean} [unsigned=false] Whether unsigned or not
	 * @returns {Long} Long
	 */
	LongBits.prototype.toLong = function toLong(unsigned) {
	    return util.Long
	        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
	        /* istanbul ignore next */
	        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
	};

	var charCodeAt = String.prototype.charCodeAt;

	/**
	 * Constructs new long bits from the specified 8 characters long hash.
	 * @param {string} hash Hash
	 * @returns {util.LongBits} Bits
	 */
	LongBits.fromHash = function fromHash(hash) {
	    if (hash === zeroHash)
	        return zero;
	    return new LongBits(
	        ( charCodeAt.call(hash, 0)
	        | charCodeAt.call(hash, 1) << 8
	        | charCodeAt.call(hash, 2) << 16
	        | charCodeAt.call(hash, 3) << 24) >>> 0
	    ,
	        ( charCodeAt.call(hash, 4)
	        | charCodeAt.call(hash, 5) << 8
	        | charCodeAt.call(hash, 6) << 16
	        | charCodeAt.call(hash, 7) << 24) >>> 0
	    );
	};

	/**
	 * Converts this long bits to a 8 characters long hash.
	 * @returns {string} Hash
	 */
	LongBits.prototype.toHash = function toHash() {
	    return String.fromCharCode(
	        this.lo        & 255,
	        this.lo >>> 8  & 255,
	        this.lo >>> 16 & 255,
	        this.lo >>> 24      ,
	        this.hi        & 255,
	        this.hi >>> 8  & 255,
	        this.hi >>> 16 & 255,
	        this.hi >>> 24
	    );
	};

	/**
	 * Zig-zag encodes this long bits.
	 * @returns {util.LongBits} `this`
	 */
	LongBits.prototype.zzEncode = function zzEncode() {
	    var mask =   this.hi >> 31;
	    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
	    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
	    return this;
	};

	/**
	 * Zig-zag decodes this long bits.
	 * @returns {util.LongBits} `this`
	 */
	LongBits.prototype.zzDecode = function zzDecode() {
	    var mask = -(this.lo & 1);
	    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
	    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
	    return this;
	};

	/**
	 * Calculates the length of this longbits when encoded as a varint.
	 * @returns {number} Length
	 */
	LongBits.prototype.length = function length() {
	    var part0 =  this.lo,
	        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
	        part2 =  this.hi >>> 24;
	    return part2 === 0
	         ? part1 === 0
	           ? part0 < 16384
	             ? part0 < 128 ? 1 : 2
	             : part0 < 2097152 ? 3 : 4
	           : part1 < 16384
	             ? part1 < 128 ? 5 : 6
	             : part1 < 2097152 ? 7 : 8
	         : part2 < 128 ? 9 : 10;
	};
	return longbits;
}

var hasRequiredMinimal;

function requireMinimal () {
	if (hasRequiredMinimal) return minimal;
	hasRequiredMinimal = 1;
	(function (exports) {
		var util = exports;

		// used to return a Promise where callback is omitted
		util.asPromise = requireAspromise();

		// converts to / from base64 encoded strings
		util.base64 = requireBase64();

		// base class of rpc.Service
		util.EventEmitter = requireEventemitter();

		// float handling accross browsers
		util.float = requireFloat();

		// requires modules optionally and hides the call from bundlers
		util.inquire = requireInquire();

		// converts to / from utf8 encoded strings
		util.utf8 = requireUtf8();

		// provides a node-like buffer pool in the browser
		util.pool = requirePool();

		// utility to work with the low and high bits of a 64 bit value
		util.LongBits = requireLongbits();

		/**
		 * Whether running within node or not.
		 * @memberof util
		 * @type {boolean}
		 */
		util.isNode = Boolean(typeof commonjsGlobal !== "undefined"
		                   && commonjsGlobal
		                   && commonjsGlobal.process
		                   && commonjsGlobal.process.versions
		                   && commonjsGlobal.process.versions.node);

		/**
		 * Global object reference.
		 * @memberof util
		 * @type {Object}
		 */
		util.global = util.isNode && commonjsGlobal
		           || typeof window !== "undefined" && window
		           || typeof self   !== "undefined" && self
		           || commonjsGlobal; // eslint-disable-line no-invalid-this

		/**
		 * An immuable empty array.
		 * @memberof util
		 * @type {Array.<*>}
		 * @const
		 */
		util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

		/**
		 * An immutable empty object.
		 * @type {Object}
		 * @const
		 */
		util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

		/**
		 * Tests if the specified value is an integer.
		 * @function
		 * @param {*} value Value to test
		 * @returns {boolean} `true` if the value is an integer
		 */
		util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
		    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
		};

		/**
		 * Tests if the specified value is a string.
		 * @param {*} value Value to test
		 * @returns {boolean} `true` if the value is a string
		 */
		util.isString = function isString(value) {
		    return typeof value === "string" || value instanceof String;
		};

		/**
		 * Tests if the specified value is a non-null object.
		 * @param {*} value Value to test
		 * @returns {boolean} `true` if the value is a non-null object
		 */
		util.isObject = function isObject(value) {
		    return value && typeof value === "object";
		};

		/**
		 * Checks if a property on a message is considered to be present.
		 * This is an alias of {@link util.isSet}.
		 * @function
		 * @param {Object} obj Plain object or message instance
		 * @param {string} prop Property name
		 * @returns {boolean} `true` if considered to be present, otherwise `false`
		 */
		util.isset =

		/**
		 * Checks if a property on a message is considered to be present.
		 * @param {Object} obj Plain object or message instance
		 * @param {string} prop Property name
		 * @returns {boolean} `true` if considered to be present, otherwise `false`
		 */
		util.isSet = function isSet(obj, prop) {
		    var value = obj[prop];
		    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
		        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
		    return false;
		};

		/**
		 * Any compatible Buffer instance.
		 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
		 * @interface Buffer
		 * @extends Uint8Array
		 */

		/**
		 * Node's Buffer class if available.
		 * @type {Constructor<Buffer>}
		 */
		util.Buffer = (function() {
		    try {
		        var Buffer = util.inquire("buffer").Buffer;
		        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
		        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
		    } catch (e) {
		        /* istanbul ignore next */
		        return null;
		    }
		})();

		// Internal alias of or polyfull for Buffer.from.
		util._Buffer_from = null;

		// Internal alias of or polyfill for Buffer.allocUnsafe.
		util._Buffer_allocUnsafe = null;

		/**
		 * Creates a new buffer of whatever type supported by the environment.
		 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
		 * @returns {Uint8Array|Buffer} Buffer
		 */
		util.newBuffer = function newBuffer(sizeOrArray) {
		    /* istanbul ignore next */
		    return typeof sizeOrArray === "number"
		        ? util.Buffer
		            ? util._Buffer_allocUnsafe(sizeOrArray)
		            : new util.Array(sizeOrArray)
		        : util.Buffer
		            ? util._Buffer_from(sizeOrArray)
		            : typeof Uint8Array === "undefined"
		                ? sizeOrArray
		                : new Uint8Array(sizeOrArray);
		};

		/**
		 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
		 * @type {Constructor<Uint8Array>}
		 */
		util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

		/**
		 * Any compatible Long instance.
		 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
		 * @interface Long
		 * @property {number} low Low bits
		 * @property {number} high High bits
		 * @property {boolean} unsigned Whether unsigned or not
		 */

		/**
		 * Long.js's Long class if available.
		 * @type {Constructor<Long>}
		 */
		util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
		         || /* istanbul ignore next */ util.global.Long
		         || util.inquire("long");

		/**
		 * Regular expression used to verify 2 bit (`bool`) map keys.
		 * @type {RegExp}
		 * @const
		 */
		util.key2Re = /^true|false|0|1$/;

		/**
		 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
		 * @type {RegExp}
		 * @const
		 */
		util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

		/**
		 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
		 * @type {RegExp}
		 * @const
		 */
		util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

		/**
		 * Converts a number or long to an 8 characters long hash string.
		 * @param {Long|number} value Value to convert
		 * @returns {string} Hash
		 */
		util.longToHash = function longToHash(value) {
		    return value
		        ? util.LongBits.from(value).toHash()
		        : util.LongBits.zeroHash;
		};

		/**
		 * Converts an 8 characters long hash string to a long or number.
		 * @param {string} hash Hash
		 * @param {boolean} [unsigned=false] Whether unsigned or not
		 * @returns {Long|number} Original value
		 */
		util.longFromHash = function longFromHash(hash, unsigned) {
		    var bits = util.LongBits.fromHash(hash);
		    if (util.Long)
		        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
		    return bits.toNumber(Boolean(unsigned));
		};

		/**
		 * Merges the properties of the source object into the destination object.
		 * @memberof util
		 * @param {Object.<string,*>} dst Destination object
		 * @param {Object.<string,*>} src Source object
		 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
		 * @returns {Object.<string,*>} Destination object
		 */
		function merge(dst, src, ifNotSet) { // used by converters
		    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
		        if (dst[keys[i]] === undefined || !ifNotSet)
		            dst[keys[i]] = src[keys[i]];
		    return dst;
		}

		util.merge = merge;

		/**
		 * Converts the first character of a string to lower case.
		 * @param {string} str String to convert
		 * @returns {string} Converted string
		 */
		util.lcFirst = function lcFirst(str) {
		    return str.charAt(0).toLowerCase() + str.substring(1);
		};

		/**
		 * Creates a custom error constructor.
		 * @memberof util
		 * @param {string} name Error name
		 * @returns {Constructor<Error>} Custom error constructor
		 */
		function newError(name) {

		    function CustomError(message, properties) {

		        if (!(this instanceof CustomError))
		            return new CustomError(message, properties);

		        // Error.call(this, message);
		        // ^ just returns a new error instance because the ctor can be called as a function

		        Object.defineProperty(this, "message", { get: function() { return message; } });

		        /* istanbul ignore next */
		        if (Error.captureStackTrace) // node
		            Error.captureStackTrace(this, CustomError);
		        else
		            Object.defineProperty(this, "stack", { value: new Error().stack || "" });

		        if (properties)
		            merge(this, properties);
		    }

		    CustomError.prototype = Object.create(Error.prototype, {
		        constructor: {
		            value: CustomError,
		            writable: true,
		            enumerable: false,
		            configurable: true,
		        },
		        name: {
		            get: function get() { return name; },
		            set: undefined,
		            enumerable: false,
		            // configurable: false would accurately preserve the behavior of
		            // the original, but I'm guessing that was not intentional.
		            // For an actual error subclass, this property would
		            // be configurable.
		            configurable: true,
		        },
		        toString: {
		            value: function value() { return this.name + ": " + this.message; },
		            writable: true,
		            enumerable: false,
		            configurable: true,
		        },
		    });

		    return CustomError;
		}

		util.newError = newError;

		/**
		 * Constructs a new protocol error.
		 * @classdesc Error subclass indicating a protocol specifc error.
		 * @memberof util
		 * @extends Error
		 * @template T extends Message<T>
		 * @constructor
		 * @param {string} message Error message
		 * @param {Object.<string,*>} [properties] Additional properties
		 * @example
		 * try {
		 *     MyMessage.decode(someBuffer); // throws if required fields are missing
		 * } catch (e) {
		 *     if (e instanceof ProtocolError && e.instance)
		 *         console.log("decoded so far: " + JSON.stringify(e.instance));
		 * }
		 */
		util.ProtocolError = newError("ProtocolError");

		/**
		 * So far decoded message instance.
		 * @name util.ProtocolError#instance
		 * @type {Message<T>}
		 */

		/**
		 * A OneOf getter as returned by {@link util.oneOfGetter}.
		 * @typedef OneOfGetter
		 * @type {function}
		 * @returns {string|undefined} Set field name, if any
		 */

		/**
		 * Builds a getter for a oneof's present field name.
		 * @param {string[]} fieldNames Field names
		 * @returns {OneOfGetter} Unbound getter
		 */
		util.oneOfGetter = function getOneOf(fieldNames) {
		    var fieldMap = {};
		    for (var i = 0; i < fieldNames.length; ++i)
		        fieldMap[fieldNames[i]] = 1;

		    /**
		     * @returns {string|undefined} Set field name, if any
		     * @this Object
		     * @ignore
		     */
		    return function() { // eslint-disable-line consistent-return
		        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
		            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
		                return keys[i];
		    };
		};

		/**
		 * A OneOf setter as returned by {@link util.oneOfSetter}.
		 * @typedef OneOfSetter
		 * @type {function}
		 * @param {string|undefined} value Field name
		 * @returns {undefined}
		 */

		/**
		 * Builds a setter for a oneof's present field name.
		 * @param {string[]} fieldNames Field names
		 * @returns {OneOfSetter} Unbound setter
		 */
		util.oneOfSetter = function setOneOf(fieldNames) {

		    /**
		     * @param {string} name Field name
		     * @returns {undefined}
		     * @this Object
		     * @ignore
		     */
		    return function(name) {
		        for (var i = 0; i < fieldNames.length; ++i)
		            if (fieldNames[i] !== name)
		                delete this[fieldNames[i]];
		    };
		};

		/**
		 * Default conversion options used for {@link Message#toJSON} implementations.
		 *
		 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
		 *
		 * - Longs become strings
		 * - Enums become string keys
		 * - Bytes become base64 encoded strings
		 * - (Sub-)Messages become plain objects
		 * - Maps become plain objects with all string keys
		 * - Repeated fields become arrays
		 * - NaN and Infinity for float and double fields become strings
		 *
		 * @type {IConversionOptions}
		 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
		 */
		util.toJSONOptions = {
		    longs: String,
		    enums: String,
		    bytes: String,
		    json: true
		};

		// Sets up buffer utility according to the environment (called in index-minimal)
		util._configure = function() {
		    var Buffer = util.Buffer;
		    /* istanbul ignore if */
		    if (!Buffer) {
		        util._Buffer_from = util._Buffer_allocUnsafe = null;
		        return;
		    }
		    // because node 4.x buffers are incompatible & immutable
		    // see: https://github.com/dcodeIO/protobuf.js/pull/665
		    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
		        /* istanbul ignore next */
		        function Buffer_from(value, encoding) {
		            return new Buffer(value, encoding);
		        };
		    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
		        /* istanbul ignore next */
		        function Buffer_allocUnsafe(size) {
		            return new Buffer(size);
		        };
		}; 
	} (minimal));
	return minimal;
}

var writer;
var hasRequiredWriter;

function requireWriter () {
	if (hasRequiredWriter) return writer;
	hasRequiredWriter = 1;
	writer = Writer;

	var util      = requireMinimal();

	var BufferWriter; // cyclic

	var LongBits  = util.LongBits,
	    base64    = util.base64,
	    utf8      = util.utf8;

	/**
	 * Constructs a new writer operation instance.
	 * @classdesc Scheduled writer operation.
	 * @constructor
	 * @param {function(*, Uint8Array, number)} fn Function to call
	 * @param {number} len Value byte length
	 * @param {*} val Value to write
	 * @ignore
	 */
	function Op(fn, len, val) {

	    /**
	     * Function to call.
	     * @type {function(Uint8Array, number, *)}
	     */
	    this.fn = fn;

	    /**
	     * Value byte length.
	     * @type {number}
	     */
	    this.len = len;

	    /**
	     * Next operation.
	     * @type {Writer.Op|undefined}
	     */
	    this.next = undefined;

	    /**
	     * Value to write.
	     * @type {*}
	     */
	    this.val = val; // type varies
	}

	/* istanbul ignore next */
	function noop() {} // eslint-disable-line no-empty-function

	/**
	 * Constructs a new writer state instance.
	 * @classdesc Copied writer state.
	 * @memberof Writer
	 * @constructor
	 * @param {Writer} writer Writer to copy state from
	 * @ignore
	 */
	function State(writer) {

	    /**
	     * Current head.
	     * @type {Writer.Op}
	     */
	    this.head = writer.head;

	    /**
	     * Current tail.
	     * @type {Writer.Op}
	     */
	    this.tail = writer.tail;

	    /**
	     * Current buffer length.
	     * @type {number}
	     */
	    this.len = writer.len;

	    /**
	     * Next state.
	     * @type {State|null}
	     */
	    this.next = writer.states;
	}

	/**
	 * Constructs a new writer instance.
	 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
	 * @constructor
	 */
	function Writer() {

	    /**
	     * Current length.
	     * @type {number}
	     */
	    this.len = 0;

	    /**
	     * Operations head.
	     * @type {Object}
	     */
	    this.head = new Op(noop, 0, 0);

	    /**
	     * Operations tail
	     * @type {Object}
	     */
	    this.tail = this.head;

	    /**
	     * Linked forked states.
	     * @type {Object|null}
	     */
	    this.states = null;

	    // When a value is written, the writer calculates its byte length and puts it into a linked
	    // list of operations to perform when finish() is called. This both allows us to allocate
	    // buffers of the exact required size and reduces the amount of work we have to do compared
	    // to first calculating over objects and then encoding over objects. In our case, the encoding
	    // part is just a linked list walk calling operations with already prepared values.
	}

	var create = function create() {
	    return util.Buffer
	        ? function create_buffer_setup() {
	            return (Writer.create = function create_buffer() {
	                return new BufferWriter();
	            })();
	        }
	        /* istanbul ignore next */
	        : function create_array() {
	            return new Writer();
	        };
	};

	/**
	 * Creates a new writer.
	 * @function
	 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
	 */
	Writer.create = create();

	/**
	 * Allocates a buffer of the specified size.
	 * @param {number} size Buffer size
	 * @returns {Uint8Array} Buffer
	 */
	Writer.alloc = function alloc(size) {
	    return new util.Array(size);
	};

	// Use Uint8Array buffer pool in the browser, just like node does with buffers
	/* istanbul ignore else */
	if (util.Array !== Array)
	    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);

	/**
	 * Pushes a new operation to the queue.
	 * @param {function(Uint8Array, number, *)} fn Function to call
	 * @param {number} len Value byte length
	 * @param {number} val Value to write
	 * @returns {Writer} `this`
	 * @private
	 */
	Writer.prototype._push = function push(fn, len, val) {
	    this.tail = this.tail.next = new Op(fn, len, val);
	    this.len += len;
	    return this;
	};

	function writeByte(val, buf, pos) {
	    buf[pos] = val & 255;
	}

	function writeVarint32(val, buf, pos) {
	    while (val > 127) {
	        buf[pos++] = val & 127 | 128;
	        val >>>= 7;
	    }
	    buf[pos] = val;
	}

	/**
	 * Constructs a new varint writer operation instance.
	 * @classdesc Scheduled varint writer operation.
	 * @extends Op
	 * @constructor
	 * @param {number} len Value byte length
	 * @param {number} val Value to write
	 * @ignore
	 */
	function VarintOp(len, val) {
	    this.len = len;
	    this.next = undefined;
	    this.val = val;
	}

	VarintOp.prototype = Object.create(Op.prototype);
	VarintOp.prototype.fn = writeVarint32;

	/**
	 * Writes an unsigned 32 bit value as a varint.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.uint32 = function write_uint32(value) {
	    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
	    // uint32 is by far the most frequently used operation and benefits significantly from this.
	    this.len += (this.tail = this.tail.next = new VarintOp(
	        (value = value >>> 0)
	                < 128       ? 1
	        : value < 16384     ? 2
	        : value < 2097152   ? 3
	        : value < 268435456 ? 4
	        :                     5,
	    value)).len;
	    return this;
	};

	/**
	 * Writes a signed 32 bit value as a varint.
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.int32 = function write_int32(value) {
	    return value < 0
	        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
	        : this.uint32(value);
	};

	/**
	 * Writes a 32 bit value as a varint, zig-zag encoded.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.sint32 = function write_sint32(value) {
	    return this.uint32((value << 1 ^ value >> 31) >>> 0);
	};

	function writeVarint64(val, buf, pos) {
	    while (val.hi) {
	        buf[pos++] = val.lo & 127 | 128;
	        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
	        val.hi >>>= 7;
	    }
	    while (val.lo > 127) {
	        buf[pos++] = val.lo & 127 | 128;
	        val.lo = val.lo >>> 7;
	    }
	    buf[pos++] = val.lo;
	}

	/**
	 * Writes an unsigned 64 bit value as a varint.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.uint64 = function write_uint64(value) {
	    var bits = LongBits.from(value);
	    return this._push(writeVarint64, bits.length(), bits);
	};

	/**
	 * Writes a signed 64 bit value as a varint.
	 * @function
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.int64 = Writer.prototype.uint64;

	/**
	 * Writes a signed 64 bit value as a varint, zig-zag encoded.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.sint64 = function write_sint64(value) {
	    var bits = LongBits.from(value).zzEncode();
	    return this._push(writeVarint64, bits.length(), bits);
	};

	/**
	 * Writes a boolish value as a varint.
	 * @param {boolean} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.bool = function write_bool(value) {
	    return this._push(writeByte, 1, value ? 1 : 0);
	};

	function writeFixed32(val, buf, pos) {
	    buf[pos    ] =  val         & 255;
	    buf[pos + 1] =  val >>> 8   & 255;
	    buf[pos + 2] =  val >>> 16  & 255;
	    buf[pos + 3] =  val >>> 24;
	}

	/**
	 * Writes an unsigned 32 bit value as fixed 32 bits.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.fixed32 = function write_fixed32(value) {
	    return this._push(writeFixed32, 4, value >>> 0);
	};

	/**
	 * Writes a signed 32 bit value as fixed 32 bits.
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.sfixed32 = Writer.prototype.fixed32;

	/**
	 * Writes an unsigned 64 bit value as fixed 64 bits.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.fixed64 = function write_fixed64(value) {
	    var bits = LongBits.from(value);
	    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
	};

	/**
	 * Writes a signed 64 bit value as fixed 64 bits.
	 * @function
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.sfixed64 = Writer.prototype.fixed64;

	/**
	 * Writes a float (32 bit).
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.float = function write_float(value) {
	    return this._push(util.float.writeFloatLE, 4, value);
	};

	/**
	 * Writes a double (64 bit float).
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.double = function write_double(value) {
	    return this._push(util.float.writeDoubleLE, 8, value);
	};

	var writeBytes = util.Array.prototype.set
	    ? function writeBytes_set(val, buf, pos) {
	        buf.set(val, pos); // also works for plain array values
	    }
	    /* istanbul ignore next */
	    : function writeBytes_for(val, buf, pos) {
	        for (var i = 0; i < val.length; ++i)
	            buf[pos + i] = val[i];
	    };

	/**
	 * Writes a sequence of bytes.
	 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.bytes = function write_bytes(value) {
	    var len = value.length >>> 0;
	    if (!len)
	        return this._push(writeByte, 1, 0);
	    if (util.isString(value)) {
	        var buf = Writer.alloc(len = base64.length(value));
	        base64.decode(value, buf, 0);
	        value = buf;
	    }
	    return this.uint32(len)._push(writeBytes, len, value);
	};

	/**
	 * Writes a string.
	 * @param {string} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.string = function write_string(value) {
	    var len = utf8.length(value);
	    return len
	        ? this.uint32(len)._push(utf8.write, len, value)
	        : this._push(writeByte, 1, 0);
	};

	/**
	 * Forks this writer's state by pushing it to a stack.
	 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
	 * @returns {Writer} `this`
	 */
	Writer.prototype.fork = function fork() {
	    this.states = new State(this);
	    this.head = this.tail = new Op(noop, 0, 0);
	    this.len = 0;
	    return this;
	};

	/**
	 * Resets this instance to the last state.
	 * @returns {Writer} `this`
	 */
	Writer.prototype.reset = function reset() {
	    if (this.states) {
	        this.head   = this.states.head;
	        this.tail   = this.states.tail;
	        this.len    = this.states.len;
	        this.states = this.states.next;
	    } else {
	        this.head = this.tail = new Op(noop, 0, 0);
	        this.len  = 0;
	    }
	    return this;
	};

	/**
	 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
	 * @returns {Writer} `this`
	 */
	Writer.prototype.ldelim = function ldelim() {
	    var head = this.head,
	        tail = this.tail,
	        len  = this.len;
	    this.reset().uint32(len);
	    if (len) {
	        this.tail.next = head.next; // skip noop
	        this.tail = tail;
	        this.len += len;
	    }
	    return this;
	};

	/**
	 * Finishes the write operation.
	 * @returns {Uint8Array} Finished buffer
	 */
	Writer.prototype.finish = function finish() {
	    var head = this.head.next, // skip noop
	        buf  = this.constructor.alloc(this.len),
	        pos  = 0;
	    while (head) {
	        head.fn(head.val, buf, pos);
	        pos += head.len;
	        head = head.next;
	    }
	    // this.head = this.tail = null;
	    return buf;
	};

	Writer._configure = function(BufferWriter_) {
	    BufferWriter = BufferWriter_;
	    Writer.create = create();
	    BufferWriter._configure();
	};
	return writer;
}

var writer_buffer;
var hasRequiredWriter_buffer;

function requireWriter_buffer () {
	if (hasRequiredWriter_buffer) return writer_buffer;
	hasRequiredWriter_buffer = 1;
	writer_buffer = BufferWriter;

	// extends Writer
	var Writer = requireWriter();
	(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

	var util = requireMinimal();

	/**
	 * Constructs a new buffer writer instance.
	 * @classdesc Wire format writer using node buffers.
	 * @extends Writer
	 * @constructor
	 */
	function BufferWriter() {
	    Writer.call(this);
	}

	BufferWriter._configure = function () {
	    /**
	     * Allocates a buffer of the specified size.
	     * @function
	     * @param {number} size Buffer size
	     * @returns {Buffer} Buffer
	     */
	    BufferWriter.alloc = util._Buffer_allocUnsafe;

	    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set"
	        ? function writeBytesBuffer_set(val, buf, pos) {
	          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
	          // also works for plain array values
	        }
	        /* istanbul ignore next */
	        : function writeBytesBuffer_copy(val, buf, pos) {
	          if (val.copy) // Buffer values
	            val.copy(buf, pos, 0, val.length);
	          else for (var i = 0; i < val.length;) // plain array values
	            buf[pos++] = val[i++];
	        };
	};


	/**
	 * @override
	 */
	BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
	    if (util.isString(value))
	        value = util._Buffer_from(value, "base64");
	    var len = value.length >>> 0;
	    this.uint32(len);
	    if (len)
	        this._push(BufferWriter.writeBytesBuffer, len, value);
	    return this;
	};

	function writeStringBuffer(val, buf, pos) {
	    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
	        util.utf8.write(val, buf, pos);
	    else if (buf.utf8Write)
	        buf.utf8Write(val, pos);
	    else
	        buf.write(val, pos);
	}

	/**
	 * @override
	 */
	BufferWriter.prototype.string = function write_string_buffer(value) {
	    var len = util.Buffer.byteLength(value);
	    this.uint32(len);
	    if (len)
	        this._push(writeStringBuffer, len, value);
	    return this;
	};


	/**
	 * Finishes the write operation.
	 * @name BufferWriter#finish
	 * @function
	 * @returns {Buffer} Finished buffer
	 */

	BufferWriter._configure();
	return writer_buffer;
}

var reader;
var hasRequiredReader;

function requireReader () {
	if (hasRequiredReader) return reader;
	hasRequiredReader = 1;
	reader = Reader;

	var util      = requireMinimal();

	var BufferReader; // cyclic

	var LongBits  = util.LongBits,
	    utf8      = util.utf8;

	/* istanbul ignore next */
	function indexOutOfRange(reader, writeLength) {
	    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
	}

	/**
	 * Constructs a new reader instance using the specified buffer.
	 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
	 * @constructor
	 * @param {Uint8Array} buffer Buffer to read from
	 */
	function Reader(buffer) {

	    /**
	     * Read buffer.
	     * @type {Uint8Array}
	     */
	    this.buf = buffer;

	    /**
	     * Read buffer position.
	     * @type {number}
	     */
	    this.pos = 0;

	    /**
	     * Read buffer length.
	     * @type {number}
	     */
	    this.len = buffer.length;
	}

	var create_array = typeof Uint8Array !== "undefined"
	    ? function create_typed_array(buffer) {
	        if (buffer instanceof Uint8Array || Array.isArray(buffer))
	            return new Reader(buffer);
	        throw Error("illegal buffer");
	    }
	    /* istanbul ignore next */
	    : function create_array(buffer) {
	        if (Array.isArray(buffer))
	            return new Reader(buffer);
	        throw Error("illegal buffer");
	    };

	var create = function create() {
	    return util.Buffer
	        ? function create_buffer_setup(buffer) {
	            return (Reader.create = function create_buffer(buffer) {
	                return util.Buffer.isBuffer(buffer)
	                    ? new BufferReader(buffer)
	                    /* istanbul ignore next */
	                    : create_array(buffer);
	            })(buffer);
	        }
	        /* istanbul ignore next */
	        : create_array;
	};

	/**
	 * Creates a new reader using the specified buffer.
	 * @function
	 * @param {Uint8Array|Buffer} buffer Buffer to read from
	 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
	 * @throws {Error} If `buffer` is not a valid buffer
	 */
	Reader.create = create();

	Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;

	/**
	 * Reads a varint as an unsigned 32 bit value.
	 * @function
	 * @returns {number} Value read
	 */
	Reader.prototype.uint32 = (function read_uint32_setup() {
	    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
	    return function read_uint32() {
	        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

	        /* istanbul ignore if */
	        if ((this.pos += 5) > this.len) {
	            this.pos = this.len;
	            throw indexOutOfRange(this, 10);
	        }
	        return value;
	    };
	})();

	/**
	 * Reads a varint as a signed 32 bit value.
	 * @returns {number} Value read
	 */
	Reader.prototype.int32 = function read_int32() {
	    return this.uint32() | 0;
	};

	/**
	 * Reads a zig-zag encoded varint as a signed 32 bit value.
	 * @returns {number} Value read
	 */
	Reader.prototype.sint32 = function read_sint32() {
	    var value = this.uint32();
	    return value >>> 1 ^ -(value & 1) | 0;
	};

	/* eslint-disable no-invalid-this */

	function readLongVarint() {
	    // tends to deopt with local vars for octet etc.
	    var bits = new LongBits(0, 0);
	    var i = 0;
	    if (this.len - this.pos > 4) { // fast route (lo)
	        for (; i < 4; ++i) {
	            // 1st..4th
	            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	        // 5th
	        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
	        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
	        if (this.buf[this.pos++] < 128)
	            return bits;
	        i = 0;
	    } else {
	        for (; i < 3; ++i) {
	            /* istanbul ignore if */
	            if (this.pos >= this.len)
	                throw indexOutOfRange(this);
	            // 1st..3th
	            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	        // 4th
	        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
	        return bits;
	    }
	    if (this.len - this.pos > 4) { // fast route (hi)
	        for (; i < 5; ++i) {
	            // 6th..10th
	            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	    } else {
	        for (; i < 5; ++i) {
	            /* istanbul ignore if */
	            if (this.pos >= this.len)
	                throw indexOutOfRange(this);
	            // 6th..10th
	            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	    }
	    /* istanbul ignore next */
	    throw Error("invalid varint encoding");
	}

	/* eslint-enable no-invalid-this */

	/**
	 * Reads a varint as a signed 64 bit value.
	 * @name Reader#int64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a varint as an unsigned 64 bit value.
	 * @name Reader#uint64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a zig-zag encoded varint as a signed 64 bit value.
	 * @name Reader#sint64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a varint as a boolean.
	 * @returns {boolean} Value read
	 */
	Reader.prototype.bool = function read_bool() {
	    return this.uint32() !== 0;
	};

	function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
	    return (buf[end - 4]
	          | buf[end - 3] << 8
	          | buf[end - 2] << 16
	          | buf[end - 1] << 24) >>> 0;
	}

	/**
	 * Reads fixed 32 bits as an unsigned 32 bit integer.
	 * @returns {number} Value read
	 */
	Reader.prototype.fixed32 = function read_fixed32() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len)
	        throw indexOutOfRange(this, 4);

	    return readFixed32_end(this.buf, this.pos += 4);
	};

	/**
	 * Reads fixed 32 bits as a signed 32 bit integer.
	 * @returns {number} Value read
	 */
	Reader.prototype.sfixed32 = function read_sfixed32() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len)
	        throw indexOutOfRange(this, 4);

	    return readFixed32_end(this.buf, this.pos += 4) | 0;
	};

	/* eslint-disable no-invalid-this */

	function readFixed64(/* this: Reader */) {

	    /* istanbul ignore if */
	    if (this.pos + 8 > this.len)
	        throw indexOutOfRange(this, 8);

	    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
	}

	/* eslint-enable no-invalid-this */

	/**
	 * Reads fixed 64 bits.
	 * @name Reader#fixed64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads zig-zag encoded fixed 64 bits.
	 * @name Reader#sfixed64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a float (32 bit) as a number.
	 * @function
	 * @returns {number} Value read
	 */
	Reader.prototype.float = function read_float() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len)
	        throw indexOutOfRange(this, 4);

	    var value = util.float.readFloatLE(this.buf, this.pos);
	    this.pos += 4;
	    return value;
	};

	/**
	 * Reads a double (64 bit float) as a number.
	 * @function
	 * @returns {number} Value read
	 */
	Reader.prototype.double = function read_double() {

	    /* istanbul ignore if */
	    if (this.pos + 8 > this.len)
	        throw indexOutOfRange(this, 4);

	    var value = util.float.readDoubleLE(this.buf, this.pos);
	    this.pos += 8;
	    return value;
	};

	/**
	 * Reads a sequence of bytes preceeded by its length as a varint.
	 * @returns {Uint8Array} Value read
	 */
	Reader.prototype.bytes = function read_bytes() {
	    var length = this.uint32(),
	        start  = this.pos,
	        end    = this.pos + length;

	    /* istanbul ignore if */
	    if (end > this.len)
	        throw indexOutOfRange(this, length);

	    this.pos += length;
	    if (Array.isArray(this.buf)) // plain array
	        return this.buf.slice(start, end);

	    if (start === end) { // fix for IE 10/Win8 and others' subarray returning array of size 1
	        var nativeBuffer = util.Buffer;
	        return nativeBuffer
	            ? nativeBuffer.alloc(0)
	            : new this.buf.constructor(0);
	    }
	    return this._slice.call(this.buf, start, end);
	};

	/**
	 * Reads a string preceeded by its byte length as a varint.
	 * @returns {string} Value read
	 */
	Reader.prototype.string = function read_string() {
	    var bytes = this.bytes();
	    return utf8.read(bytes, 0, bytes.length);
	};

	/**
	 * Skips the specified number of bytes if specified, otherwise skips a varint.
	 * @param {number} [length] Length if known, otherwise a varint is assumed
	 * @returns {Reader} `this`
	 */
	Reader.prototype.skip = function skip(length) {
	    if (typeof length === "number") {
	        /* istanbul ignore if */
	        if (this.pos + length > this.len)
	            throw indexOutOfRange(this, length);
	        this.pos += length;
	    } else {
	        do {
	            /* istanbul ignore if */
	            if (this.pos >= this.len)
	                throw indexOutOfRange(this);
	        } while (this.buf[this.pos++] & 128);
	    }
	    return this;
	};

	/**
	 * Skips the next element of the specified wire type.
	 * @param {number} wireType Wire type received
	 * @returns {Reader} `this`
	 */
	Reader.prototype.skipType = function(wireType) {
	    switch (wireType) {
	        case 0:
	            this.skip();
	            break;
	        case 1:
	            this.skip(8);
	            break;
	        case 2:
	            this.skip(this.uint32());
	            break;
	        case 3:
	            while ((wireType = this.uint32() & 7) !== 4) {
	                this.skipType(wireType);
	            }
	            break;
	        case 5:
	            this.skip(4);
	            break;

	        /* istanbul ignore next */
	        default:
	            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
	    }
	    return this;
	};

	Reader._configure = function(BufferReader_) {
	    BufferReader = BufferReader_;
	    Reader.create = create();
	    BufferReader._configure();

	    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
	    util.merge(Reader.prototype, {

	        int64: function read_int64() {
	            return readLongVarint.call(this)[fn](false);
	        },

	        uint64: function read_uint64() {
	            return readLongVarint.call(this)[fn](true);
	        },

	        sint64: function read_sint64() {
	            return readLongVarint.call(this).zzDecode()[fn](false);
	        },

	        fixed64: function read_fixed64() {
	            return readFixed64.call(this)[fn](true);
	        },

	        sfixed64: function read_sfixed64() {
	            return readFixed64.call(this)[fn](false);
	        }

	    });
	};
	return reader;
}

var reader_buffer;
var hasRequiredReader_buffer;

function requireReader_buffer () {
	if (hasRequiredReader_buffer) return reader_buffer;
	hasRequiredReader_buffer = 1;
	reader_buffer = BufferReader;

	// extends Reader
	var Reader = requireReader();
	(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

	var util = requireMinimal();

	/**
	 * Constructs a new buffer reader instance.
	 * @classdesc Wire format reader using node buffers.
	 * @extends Reader
	 * @constructor
	 * @param {Buffer} buffer Buffer to read from
	 */
	function BufferReader(buffer) {
	    Reader.call(this, buffer);

	    /**
	     * Read buffer.
	     * @name BufferReader#buf
	     * @type {Buffer}
	     */
	}

	BufferReader._configure = function () {
	    /* istanbul ignore else */
	    if (util.Buffer)
	        BufferReader.prototype._slice = util.Buffer.prototype.slice;
	};


	/**
	 * @override
	 */
	BufferReader.prototype.string = function read_string_buffer() {
	    var len = this.uint32(); // modifies pos
	    return this.buf.utf8Slice
	        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
	        : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
	};

	/**
	 * Reads a sequence of bytes preceeded by its length as a varint.
	 * @name BufferReader#bytes
	 * @function
	 * @returns {Buffer} Value read
	 */

	BufferReader._configure();
	return reader_buffer;
}

var rpc = {};

var service$1;
var hasRequiredService$1;

function requireService$1 () {
	if (hasRequiredService$1) return service$1;
	hasRequiredService$1 = 1;
	service$1 = Service;

	var util = requireMinimal();

	// Extends EventEmitter
	(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

	/**
	 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
	 *
	 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
	 * @typedef rpc.ServiceMethodCallback
	 * @template TRes extends Message<TRes>
	 * @type {function}
	 * @param {Error|null} error Error, if any
	 * @param {TRes} [response] Response message
	 * @returns {undefined}
	 */

	/**
	 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
	 * @typedef rpc.ServiceMethod
	 * @template TReq extends Message<TReq>
	 * @template TRes extends Message<TRes>
	 * @type {function}
	 * @param {TReq|Properties<TReq>} request Request message or plain object
	 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
	 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
	 */

	/**
	 * Constructs a new RPC service instance.
	 * @classdesc An RPC service as returned by {@link Service#create}.
	 * @exports rpc.Service
	 * @extends util.EventEmitter
	 * @constructor
	 * @param {RPCImpl} rpcImpl RPC implementation
	 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
	 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
	 */
	function Service(rpcImpl, requestDelimited, responseDelimited) {

	    if (typeof rpcImpl !== "function")
	        throw TypeError("rpcImpl must be a function");

	    util.EventEmitter.call(this);

	    /**
	     * RPC implementation. Becomes `null` once the service is ended.
	     * @type {RPCImpl|null}
	     */
	    this.rpcImpl = rpcImpl;

	    /**
	     * Whether requests are length-delimited.
	     * @type {boolean}
	     */
	    this.requestDelimited = Boolean(requestDelimited);

	    /**
	     * Whether responses are length-delimited.
	     * @type {boolean}
	     */
	    this.responseDelimited = Boolean(responseDelimited);
	}

	/**
	 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
	 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
	 * @param {Constructor<TReq>} requestCtor Request constructor
	 * @param {Constructor<TRes>} responseCtor Response constructor
	 * @param {TReq|Properties<TReq>} request Request message or plain object
	 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
	 * @returns {undefined}
	 * @template TReq extends Message<TReq>
	 * @template TRes extends Message<TRes>
	 */
	Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

	    if (!request)
	        throw TypeError("request must be specified");

	    var self = this;
	    if (!callback)
	        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

	    if (!self.rpcImpl) {
	        setTimeout(function() { callback(Error("already ended")); }, 0);
	        return undefined;
	    }

	    try {
	        return self.rpcImpl(
	            method,
	            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
	            function rpcCallback(err, response) {

	                if (err) {
	                    self.emit("error", err, method);
	                    return callback(err);
	                }

	                if (response === null) {
	                    self.end(/* endedByRPC */ true);
	                    return undefined;
	                }

	                if (!(response instanceof responseCtor)) {
	                    try {
	                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
	                    } catch (err) {
	                        self.emit("error", err, method);
	                        return callback(err);
	                    }
	                }

	                self.emit("data", response, method);
	                return callback(null, response);
	            }
	        );
	    } catch (err) {
	        self.emit("error", err, method);
	        setTimeout(function() { callback(err); }, 0);
	        return undefined;
	    }
	};

	/**
	 * Ends this service and emits the `end` event.
	 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
	 * @returns {rpc.Service} `this`
	 */
	Service.prototype.end = function end(endedByRPC) {
	    if (this.rpcImpl) {
	        if (!endedByRPC) // signal end to rpcImpl
	            this.rpcImpl(null, null, null);
	        this.rpcImpl = null;
	        this.emit("end").off();
	    }
	    return this;
	};
	return service$1;
}

var hasRequiredRpc;

function requireRpc () {
	if (hasRequiredRpc) return rpc;
	hasRequiredRpc = 1;
	(function (exports) {

		/**
		 * Streaming RPC helpers.
		 * @namespace
		 */
		var rpc = exports;

		/**
		 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
		 * @typedef RPCImpl
		 * @type {function}
		 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
		 * @param {Uint8Array} requestData Request data
		 * @param {RPCImplCallback} callback Callback function
		 * @returns {undefined}
		 * @example
		 * function rpcImpl(method, requestData, callback) {
		 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
		 *         throw Error("no such method");
		 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
		 *         callback(err, responseData);
		 *     });
		 * }
		 */

		/**
		 * Node-style callback as used by {@link RPCImpl}.
		 * @typedef RPCImplCallback
		 * @type {function}
		 * @param {Error|null} error Error, if any, otherwise `null`
		 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
		 * @returns {undefined}
		 */

		rpc.Service = requireService$1(); 
	} (rpc));
	return rpc;
}

var roots;
var hasRequiredRoots;

function requireRoots () {
	if (hasRequiredRoots) return roots;
	hasRequiredRoots = 1;
	roots = {};

	/**
	 * Named roots.
	 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
	 * Can also be used manually to make roots available across modules.
	 * @name roots
	 * @type {Object.<string,Root>}
	 * @example
	 * // pbjs -r myroot -o compiled.js ...
	 *
	 * // in another module:
	 * require("./compiled.js");
	 *
	 * // in any subsequent module:
	 * var root = protobuf.roots["myroot"];
	 */
	return roots;
}

var hasRequiredIndexMinimal;

function requireIndexMinimal () {
	if (hasRequiredIndexMinimal) return indexMinimal;
	hasRequiredIndexMinimal = 1;
	(function (exports) {
		var protobuf = exports;

		/**
		 * Build type, one of `"full"`, `"light"` or `"minimal"`.
		 * @name build
		 * @type {string}
		 * @const
		 */
		protobuf.build = "minimal";

		// Serialization
		protobuf.Writer       = requireWriter();
		protobuf.BufferWriter = requireWriter_buffer();
		protobuf.Reader       = requireReader();
		protobuf.BufferReader = requireReader_buffer();

		// Utility
		protobuf.util         = requireMinimal();
		protobuf.rpc          = requireRpc();
		protobuf.roots        = requireRoots();
		protobuf.configure    = configure;

		/* istanbul ignore next */
		/**
		 * Reconfigures the library according to the environment.
		 * @returns {undefined}
		 */
		function configure() {
		    protobuf.util._configure();
		    protobuf.Writer._configure(protobuf.BufferWriter);
		    protobuf.Reader._configure(protobuf.BufferReader);
		}

		// Set up buffer utility according to the environment
		configure(); 
	} (indexMinimal));
	return indexMinimal;
}

var util$2 = {exports: {}};

var codegen_1;
var hasRequiredCodegen;

function requireCodegen () {
	if (hasRequiredCodegen) return codegen_1;
	hasRequiredCodegen = 1;
	codegen_1 = codegen;

	/**
	 * Begins generating a function.
	 * @memberof util
	 * @param {string[]} functionParams Function parameter names
	 * @param {string} [functionName] Function name if not anonymous
	 * @returns {Codegen} Appender that appends code to the function's body
	 */
	function codegen(functionParams, functionName) {

	    /* istanbul ignore if */
	    if (typeof functionParams === "string") {
	        functionName = functionParams;
	        functionParams = undefined;
	    }

	    var body = [];

	    /**
	     * Appends code to the function's body or finishes generation.
	     * @typedef Codegen
	     * @type {function}
	     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any
	     * @param {...*} [formatParams] Format parameters
	     * @returns {Codegen|Function} Itself or the generated function if finished
	     * @throws {Error} If format parameter counts do not match
	     */

	    function Codegen(formatStringOrScope) {
	        // note that explicit array handling below makes this ~50% faster

	        // finish the function
	        if (typeof formatStringOrScope !== "string") {
	            var source = toString();
	            if (codegen.verbose)
	                console.log("codegen: " + source); // eslint-disable-line no-console
	            source = "return " + source;
	            if (formatStringOrScope) {
	                var scopeKeys   = Object.keys(formatStringOrScope),
	                    scopeParams = new Array(scopeKeys.length + 1),
	                    scopeValues = new Array(scopeKeys.length),
	                    scopeOffset = 0;
	                while (scopeOffset < scopeKeys.length) {
	                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];
	                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];
	                }
	                scopeParams[scopeOffset] = source;
	                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func
	            }
	            return Function(source)(); // eslint-disable-line no-new-func
	        }

	        // otherwise append to body
	        var formatParams = new Array(arguments.length - 1),
	            formatOffset = 0;
	        while (formatOffset < formatParams.length)
	            formatParams[formatOffset] = arguments[++formatOffset];
	        formatOffset = 0;
	        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {
	            var value = formatParams[formatOffset++];
	            switch ($1) {
	                case "d": case "f": return String(Number(value));
	                case "i": return String(Math.floor(value));
	                case "j": return JSON.stringify(value);
	                case "s": return String(value);
	            }
	            return "%";
	        });
	        if (formatOffset !== formatParams.length)
	            throw Error("parameter count mismatch");
	        body.push(formatStringOrScope);
	        return Codegen;
	    }

	    function toString(functionNameOverride) {
	        return "function " + (functionNameOverride || functionName || "") + "(" + (functionParams && functionParams.join(",") || "") + "){\n  " + body.join("\n  ") + "\n}";
	    }

	    Codegen.toString = toString;
	    return Codegen;
	}

	/**
	 * Begins generating a function.
	 * @memberof util
	 * @function codegen
	 * @param {string} [functionName] Function name if not anonymous
	 * @returns {Codegen} Appender that appends code to the function's body
	 * @variation 2
	 */

	/**
	 * When set to `true`, codegen will log generated code to console. Useful for debugging.
	 * @name util.codegen.verbose
	 * @type {boolean}
	 */
	codegen.verbose = false;
	return codegen_1;
}

var fetch_1;
var hasRequiredFetch;

function requireFetch () {
	if (hasRequiredFetch) return fetch_1;
	hasRequiredFetch = 1;
	fetch_1 = fetch;

	var asPromise = requireAspromise(),
	    inquire   = requireInquire();

	var fs = inquire("fs");

	/**
	 * Node-style callback as used by {@link util.fetch}.
	 * @typedef FetchCallback
	 * @type {function}
	 * @param {?Error} error Error, if any, otherwise `null`
	 * @param {string} [contents] File contents, if there hasn't been an error
	 * @returns {undefined}
	 */

	/**
	 * Options as used by {@link util.fetch}.
	 * @typedef FetchOptions
	 * @type {Object}
	 * @property {boolean} [binary=false] Whether expecting a binary response
	 * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest
	 */

	/**
	 * Fetches the contents of a file.
	 * @memberof util
	 * @param {string} filename File path or url
	 * @param {FetchOptions} options Fetch options
	 * @param {FetchCallback} callback Callback function
	 * @returns {undefined}
	 */
	function fetch(filename, options, callback) {
	    if (typeof options === "function") {
	        callback = options;
	        options = {};
	    } else if (!options)
	        options = {};

	    if (!callback)
	        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this

	    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.
	    if (!options.xhr && fs && fs.readFile)
	        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {
	            return err && typeof XMLHttpRequest !== "undefined"
	                ? fetch.xhr(filename, options, callback)
	                : err
	                ? callback(err)
	                : callback(null, options.binary ? contents : contents.toString("utf8"));
	        });

	    // use the XHR version otherwise.
	    return fetch.xhr(filename, options, callback);
	}

	/**
	 * Fetches the contents of a file.
	 * @name util.fetch
	 * @function
	 * @param {string} path File path or url
	 * @param {FetchCallback} callback Callback function
	 * @returns {undefined}
	 * @variation 2
	 */

	/**
	 * Fetches the contents of a file.
	 * @name util.fetch
	 * @function
	 * @param {string} path File path or url
	 * @param {FetchOptions} [options] Fetch options
	 * @returns {Promise<string|Uint8Array>} Promise
	 * @variation 3
	 */

	/**/
	fetch.xhr = function fetch_xhr(filename, options, callback) {
	    var xhr = new XMLHttpRequest();
	    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {

	        if (xhr.readyState !== 4)
	            return undefined;

	        // local cors security errors return status 0 / empty string, too. afaik this cannot be
	        // reliably distinguished from an actually empty file for security reasons. feel free
	        // to send a pull request if you are aware of a solution.
	        if (xhr.status !== 0 && xhr.status !== 200)
	            return callback(Error("status " + xhr.status));

	        // if binary data is expected, make sure that some sort of array is returned, even if
	        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.
	        if (options.binary) {
	            var buffer = xhr.response;
	            if (!buffer) {
	                buffer = [];
	                for (var i = 0; i < xhr.responseText.length; ++i)
	                    buffer.push(xhr.responseText.charCodeAt(i) & 255);
	            }
	            return callback(null, typeof Uint8Array !== "undefined" ? new Uint8Array(buffer) : buffer);
	        }
	        return callback(null, xhr.responseText);
	    };

	    if (options.binary) {
	        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers
	        if ("overrideMimeType" in xhr)
	            xhr.overrideMimeType("text/plain; charset=x-user-defined");
	        xhr.responseType = "arraybuffer";
	    }

	    xhr.open("GET", filename);
	    xhr.send();
	};
	return fetch_1;
}

var path = {};

var hasRequiredPath;

function requirePath () {
	if (hasRequiredPath) return path;
	hasRequiredPath = 1;
	(function (exports) {

		/**
		 * A minimal path module to resolve Unix, Windows and URL paths alike.
		 * @memberof util
		 * @namespace
		 */
		var path = exports;

		var isAbsolute =
		/**
		 * Tests if the specified path is absolute.
		 * @param {string} path Path to test
		 * @returns {boolean} `true` if path is absolute
		 */
		path.isAbsolute = function isAbsolute(path) {
		    return /^(?:\/|\w+:)/.test(path);
		};

		var normalize =
		/**
		 * Normalizes the specified path.
		 * @param {string} path Path to normalize
		 * @returns {string} Normalized path
		 */
		path.normalize = function normalize(path) {
		    path = path.replace(/\\/g, "/")
		               .replace(/\/{2,}/g, "/");
		    var parts    = path.split("/"),
		        absolute = isAbsolute(path),
		        prefix   = "";
		    if (absolute)
		        prefix = parts.shift() + "/";
		    for (var i = 0; i < parts.length;) {
		        if (parts[i] === "..") {
		            if (i > 0 && parts[i - 1] !== "..")
		                parts.splice(--i, 2);
		            else if (absolute)
		                parts.splice(i, 1);
		            else
		                ++i;
		        } else if (parts[i] === ".")
		            parts.splice(i, 1);
		        else
		            ++i;
		    }
		    return prefix + parts.join("/");
		};

		/**
		 * Resolves the specified include path against the specified origin path.
		 * @param {string} originPath Path to the origin file
		 * @param {string} includePath Include path relative to origin path
		 * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized
		 * @returns {string} Path to the include file
		 */
		path.resolve = function resolve(originPath, includePath, alreadyNormalized) {
		    if (!alreadyNormalized)
		        includePath = normalize(includePath);
		    if (isAbsolute(includePath))
		        return includePath;
		    if (!alreadyNormalized)
		        originPath = normalize(originPath);
		    return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize(originPath + "/" + includePath) : includePath;
		}; 
	} (path));
	return path;
}

var types = {};

var hasRequiredTypes;

function requireTypes () {
	if (hasRequiredTypes) return types;
	hasRequiredTypes = 1;
	(function (exports) {

		/**
		 * Common type constants.
		 * @namespace
		 */
		var types = exports;

		var util = requireUtil$1();

		var s = [
		    "double",   // 0
		    "float",    // 1
		    "int32",    // 2
		    "uint32",   // 3
		    "sint32",   // 4
		    "fixed32",  // 5
		    "sfixed32", // 6
		    "int64",    // 7
		    "uint64",   // 8
		    "sint64",   // 9
		    "fixed64",  // 10
		    "sfixed64", // 11
		    "bool",     // 12
		    "string",   // 13
		    "bytes"     // 14
		];

		function bake(values, offset) {
		    var i = 0, o = {};
		    offset |= 0;
		    while (i < values.length) o[s[i + offset]] = values[i++];
		    return o;
		}

		/**
		 * Basic type wire types.
		 * @type {Object.<string,number>}
		 * @const
		 * @property {number} double=1 Fixed64 wire type
		 * @property {number} float=5 Fixed32 wire type
		 * @property {number} int32=0 Varint wire type
		 * @property {number} uint32=0 Varint wire type
		 * @property {number} sint32=0 Varint wire type
		 * @property {number} fixed32=5 Fixed32 wire type
		 * @property {number} sfixed32=5 Fixed32 wire type
		 * @property {number} int64=0 Varint wire type
		 * @property {number} uint64=0 Varint wire type
		 * @property {number} sint64=0 Varint wire type
		 * @property {number} fixed64=1 Fixed64 wire type
		 * @property {number} sfixed64=1 Fixed64 wire type
		 * @property {number} bool=0 Varint wire type
		 * @property {number} string=2 Ldelim wire type
		 * @property {number} bytes=2 Ldelim wire type
		 */
		types.basic = bake([
		    /* double   */ 1,
		    /* float    */ 5,
		    /* int32    */ 0,
		    /* uint32   */ 0,
		    /* sint32   */ 0,
		    /* fixed32  */ 5,
		    /* sfixed32 */ 5,
		    /* int64    */ 0,
		    /* uint64   */ 0,
		    /* sint64   */ 0,
		    /* fixed64  */ 1,
		    /* sfixed64 */ 1,
		    /* bool     */ 0,
		    /* string   */ 2,
		    /* bytes    */ 2
		]);

		/**
		 * Basic type defaults.
		 * @type {Object.<string,*>}
		 * @const
		 * @property {number} double=0 Double default
		 * @property {number} float=0 Float default
		 * @property {number} int32=0 Int32 default
		 * @property {number} uint32=0 Uint32 default
		 * @property {number} sint32=0 Sint32 default
		 * @property {number} fixed32=0 Fixed32 default
		 * @property {number} sfixed32=0 Sfixed32 default
		 * @property {number} int64=0 Int64 default
		 * @property {number} uint64=0 Uint64 default
		 * @property {number} sint64=0 Sint32 default
		 * @property {number} fixed64=0 Fixed64 default
		 * @property {number} sfixed64=0 Sfixed64 default
		 * @property {boolean} bool=false Bool default
		 * @property {string} string="" String default
		 * @property {Array.<number>} bytes=Array(0) Bytes default
		 * @property {null} message=null Message default
		 */
		types.defaults = bake([
		    /* double   */ 0,
		    /* float    */ 0,
		    /* int32    */ 0,
		    /* uint32   */ 0,
		    /* sint32   */ 0,
		    /* fixed32  */ 0,
		    /* sfixed32 */ 0,
		    /* int64    */ 0,
		    /* uint64   */ 0,
		    /* sint64   */ 0,
		    /* fixed64  */ 0,
		    /* sfixed64 */ 0,
		    /* bool     */ false,
		    /* string   */ "",
		    /* bytes    */ util.emptyArray,
		    /* message  */ null
		]);

		/**
		 * Basic long type wire types.
		 * @type {Object.<string,number>}
		 * @const
		 * @property {number} int64=0 Varint wire type
		 * @property {number} uint64=0 Varint wire type
		 * @property {number} sint64=0 Varint wire type
		 * @property {number} fixed64=1 Fixed64 wire type
		 * @property {number} sfixed64=1 Fixed64 wire type
		 */
		types.long = bake([
		    /* int64    */ 0,
		    /* uint64   */ 0,
		    /* sint64   */ 0,
		    /* fixed64  */ 1,
		    /* sfixed64 */ 1
		], 7);

		/**
		 * Allowed types for map keys with their associated wire type.
		 * @type {Object.<string,number>}
		 * @const
		 * @property {number} int32=0 Varint wire type
		 * @property {number} uint32=0 Varint wire type
		 * @property {number} sint32=0 Varint wire type
		 * @property {number} fixed32=5 Fixed32 wire type
		 * @property {number} sfixed32=5 Fixed32 wire type
		 * @property {number} int64=0 Varint wire type
		 * @property {number} uint64=0 Varint wire type
		 * @property {number} sint64=0 Varint wire type
		 * @property {number} fixed64=1 Fixed64 wire type
		 * @property {number} sfixed64=1 Fixed64 wire type
		 * @property {number} bool=0 Varint wire type
		 * @property {number} string=2 Ldelim wire type
		 */
		types.mapKey = bake([
		    /* int32    */ 0,
		    /* uint32   */ 0,
		    /* sint32   */ 0,
		    /* fixed32  */ 5,
		    /* sfixed32 */ 5,
		    /* int64    */ 0,
		    /* uint64   */ 0,
		    /* sint64   */ 0,
		    /* fixed64  */ 1,
		    /* sfixed64 */ 1,
		    /* bool     */ 0,
		    /* string   */ 2
		], 2);

		/**
		 * Allowed types for packed repeated fields with their associated wire type.
		 * @type {Object.<string,number>}
		 * @const
		 * @property {number} double=1 Fixed64 wire type
		 * @property {number} float=5 Fixed32 wire type
		 * @property {number} int32=0 Varint wire type
		 * @property {number} uint32=0 Varint wire type
		 * @property {number} sint32=0 Varint wire type
		 * @property {number} fixed32=5 Fixed32 wire type
		 * @property {number} sfixed32=5 Fixed32 wire type
		 * @property {number} int64=0 Varint wire type
		 * @property {number} uint64=0 Varint wire type
		 * @property {number} sint64=0 Varint wire type
		 * @property {number} fixed64=1 Fixed64 wire type
		 * @property {number} sfixed64=1 Fixed64 wire type
		 * @property {number} bool=0 Varint wire type
		 */
		types.packed = bake([
		    /* double   */ 1,
		    /* float    */ 5,
		    /* int32    */ 0,
		    /* uint32   */ 0,
		    /* sint32   */ 0,
		    /* fixed32  */ 5,
		    /* sfixed32 */ 5,
		    /* int64    */ 0,
		    /* uint64   */ 0,
		    /* sint64   */ 0,
		    /* fixed64  */ 1,
		    /* sfixed64 */ 1,
		    /* bool     */ 0
		]); 
	} (types));
	return types;
}

var field;
var hasRequiredField;

function requireField () {
	if (hasRequiredField) return field;
	hasRequiredField = 1;
	field = Field;

	// extends ReflectionObject
	var ReflectionObject = requireObject();
	((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = "Field";

	var Enum  = require_enum(),
	    types = requireTypes(),
	    util  = requireUtil$1();

	var Type; // cyclic

	var ruleRe = /^required|optional|repeated$/;

	/**
	 * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.
	 * @name Field
	 * @classdesc Reflected message field.
	 * @extends FieldBase
	 * @constructor
	 * @param {string} name Unique name within its namespace
	 * @param {number} id Unique id within its namespace
	 * @param {string} type Value type
	 * @param {string|Object.<string,*>} [rule="optional"] Field rule
	 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
	 * @param {Object.<string,*>} [options] Declared options
	 */

	/**
	 * Constructs a field from a field descriptor.
	 * @param {string} name Field name
	 * @param {IField} json Field descriptor
	 * @returns {Field} Created field
	 * @throws {TypeError} If arguments are invalid
	 */
	Field.fromJSON = function fromJSON(name, json) {
	    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);
	};

	/**
	 * Not an actual constructor. Use {@link Field} instead.
	 * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.
	 * @exports FieldBase
	 * @extends ReflectionObject
	 * @constructor
	 * @param {string} name Unique name within its namespace
	 * @param {number} id Unique id within its namespace
	 * @param {string} type Value type
	 * @param {string|Object.<string,*>} [rule="optional"] Field rule
	 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
	 * @param {Object.<string,*>} [options] Declared options
	 * @param {string} [comment] Comment associated with this field
	 */
	function Field(name, id, type, rule, extend, options, comment) {

	    if (util.isObject(rule)) {
	        comment = extend;
	        options = rule;
	        rule = extend = undefined;
	    } else if (util.isObject(extend)) {
	        comment = options;
	        options = extend;
	        extend = undefined;
	    }

	    ReflectionObject.call(this, name, options);

	    if (!util.isInteger(id) || id < 0)
	        throw TypeError("id must be a non-negative integer");

	    if (!util.isString(type))
	        throw TypeError("type must be a string");

	    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))
	        throw TypeError("rule must be a string rule");

	    if (extend !== undefined && !util.isString(extend))
	        throw TypeError("extend must be a string");

	    /**
	     * Field rule, if any.
	     * @type {string|undefined}
	     */
	    if (rule === "proto3_optional") {
	        rule = "optional";
	    }
	    this.rule = rule && rule !== "optional" ? rule : undefined; // toJSON

	    /**
	     * Field type.
	     * @type {string}
	     */
	    this.type = type; // toJSON

	    /**
	     * Unique field id.
	     * @type {number}
	     */
	    this.id = id; // toJSON, marker

	    /**
	     * Extended type if different from parent.
	     * @type {string|undefined}
	     */
	    this.extend = extend || undefined; // toJSON

	    /**
	     * Whether this field is required.
	     * @type {boolean}
	     */
	    this.required = rule === "required";

	    /**
	     * Whether this field is optional.
	     * @type {boolean}
	     */
	    this.optional = !this.required;

	    /**
	     * Whether this field is repeated.
	     * @type {boolean}
	     */
	    this.repeated = rule === "repeated";

	    /**
	     * Whether this field is a map or not.
	     * @type {boolean}
	     */
	    this.map = false;

	    /**
	     * Message this field belongs to.
	     * @type {Type|null}
	     */
	    this.message = null;

	    /**
	     * OneOf this field belongs to, if any,
	     * @type {OneOf|null}
	     */
	    this.partOf = null;

	    /**
	     * The field type's default value.
	     * @type {*}
	     */
	    this.typeDefault = null;

	    /**
	     * The field's default value on prototypes.
	     * @type {*}
	     */
	    this.defaultValue = null;

	    /**
	     * Whether this field's value should be treated as a long.
	     * @type {boolean}
	     */
	    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;

	    /**
	     * Whether this field's value is a buffer.
	     * @type {boolean}
	     */
	    this.bytes = type === "bytes";

	    /**
	     * Resolved type if not a basic type.
	     * @type {Type|Enum|null}
	     */
	    this.resolvedType = null;

	    /**
	     * Sister-field within the extended type if a declaring extension field.
	     * @type {Field|null}
	     */
	    this.extensionField = null;

	    /**
	     * Sister-field within the declaring namespace if an extended field.
	     * @type {Field|null}
	     */
	    this.declaringField = null;

	    /**
	     * Internally remembers whether this field is packed.
	     * @type {boolean|null}
	     * @private
	     */
	    this._packed = null;

	    /**
	     * Comment for this field.
	     * @type {string|null}
	     */
	    this.comment = comment;
	}

	/**
	 * Determines whether this field is packed. Only relevant when repeated and working with proto2.
	 * @name Field#packed
	 * @type {boolean}
	 * @readonly
	 */
	Object.defineProperty(Field.prototype, "packed", {
	    get: function() {
	        // defaults to packed=true if not explicity set to false
	        if (this._packed === null)
	            this._packed = this.getOption("packed") !== false;
	        return this._packed;
	    }
	});

	/**
	 * @override
	 */
	Field.prototype.setOption = function setOption(name, value, ifNotSet) {
	    if (name === "packed") // clear cached before setting
	        this._packed = null;
	    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);
	};

	/**
	 * Field descriptor.
	 * @interface IField
	 * @property {string} [rule="optional"] Field rule
	 * @property {string} type Field type
	 * @property {number} id Field id
	 * @property {Object.<string,*>} [options] Field options
	 */

	/**
	 * Extension field descriptor.
	 * @interface IExtensionField
	 * @extends IField
	 * @property {string} extend Extended type
	 */

	/**
	 * Converts this field to a field descriptor.
	 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
	 * @returns {IField} Field descriptor
	 */
	Field.prototype.toJSON = function toJSON(toJSONOptions) {
	    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
	    return util.toObject([
	        "rule"    , this.rule !== "optional" && this.rule || undefined,
	        "type"    , this.type,
	        "id"      , this.id,
	        "extend"  , this.extend,
	        "options" , this.options,
	        "comment" , keepComments ? this.comment : undefined
	    ]);
	};

	/**
	 * Resolves this field's type references.
	 * @returns {Field} `this`
	 * @throws {Error} If any reference cannot be resolved
	 */
	Field.prototype.resolve = function resolve() {

	    if (this.resolved)
	        return this;

	    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it
	        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
	        if (this.resolvedType instanceof Type)
	            this.typeDefault = null;
	        else // instanceof Enum
	            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined
	    } else if (this.options && this.options.proto3_optional) {
	        // proto3 scalar value marked optional; should default to null
	        this.typeDefault = null;
	    }

	    // use explicitly set default value if present
	    if (this.options && this.options["default"] != null) {
	        this.typeDefault = this.options["default"];
	        if (this.resolvedType instanceof Enum && typeof this.typeDefault === "string")
	            this.typeDefault = this.resolvedType.values[this.typeDefault];
	    }

	    // remove unnecessary options
	    if (this.options) {
	        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))
	            delete this.options.packed;
	        if (!Object.keys(this.options).length)
	            this.options = undefined;
	    }

	    // convert to internal data type if necesssary
	    if (this.long) {
	        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");

	        /* istanbul ignore else */
	        if (Object.freeze)
	            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)

	    } else if (this.bytes && typeof this.typeDefault === "string") {
	        var buf;
	        if (util.base64.test(this.typeDefault))
	            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);
	        else
	            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
	        this.typeDefault = buf;
	    }

	    // take special care of maps and repeated fields
	    if (this.map)
	        this.defaultValue = util.emptyObject;
	    else if (this.repeated)
	        this.defaultValue = util.emptyArray;
	    else
	        this.defaultValue = this.typeDefault;

	    // ensure proper value on prototype
	    if (this.parent instanceof Type)
	        this.parent.ctor.prototype[this.name] = this.defaultValue;

	    return ReflectionObject.prototype.resolve.call(this);
	};

	/**
	 * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).
	 * @typedef FieldDecorator
	 * @type {function}
	 * @param {Object} prototype Target prototype
	 * @param {string} fieldName Field name
	 * @returns {undefined}
	 */

	/**
	 * Field decorator (TypeScript).
	 * @name Field.d
	 * @function
	 * @param {number} fieldId Field id
	 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"string"|"bool"|"bytes"|Object} fieldType Field type
	 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
	 * @param {T} [defaultValue] Default value
	 * @returns {FieldDecorator} Decorator function
	 * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]
	 */
	Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {

	    // submessage: decorate the submessage and use its name as the type
	    if (typeof fieldType === "function")
	        fieldType = util.decorateType(fieldType).name;

	    // enum reference: create a reflected copy of the enum and keep reuseing it
	    else if (fieldType && typeof fieldType === "object")
	        fieldType = util.decorateEnum(fieldType).name;

	    return function fieldDecorator(prototype, fieldName) {
	        util.decorateType(prototype.constructor)
	            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { "default": defaultValue }));
	    };
	};

	/**
	 * Field decorator (TypeScript).
	 * @name Field.d
	 * @function
	 * @param {number} fieldId Field id
	 * @param {Constructor<T>|string} fieldType Field type
	 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
	 * @returns {FieldDecorator} Decorator function
	 * @template T extends Message<T>
	 * @variation 2
	 */
	// like Field.d but without a default value

	// Sets up cyclic dependencies (called in index-light)
	Field._configure = function configure(Type_) {
	    Type = Type_;
	};
	return field;
}

var oneof;
var hasRequiredOneof;

function requireOneof () {
	if (hasRequiredOneof) return oneof;
	hasRequiredOneof = 1;
	oneof = OneOf;

	// extends ReflectionObject
	var ReflectionObject = requireObject();
	((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";

	var Field = requireField(),
	    util  = requireUtil$1();

	/**
	 * Constructs a new oneof instance.
	 * @classdesc Reflected oneof.
	 * @extends ReflectionObject
	 * @constructor
	 * @param {string} name Oneof name
	 * @param {string[]|Object.<string,*>} [fieldNames] Field names
	 * @param {Object.<string,*>} [options] Declared options
	 * @param {string} [comment] Comment associated with this field
	 */
	function OneOf(name, fieldNames, options, comment) {
	    if (!Array.isArray(fieldNames)) {
	        options = fieldNames;
	        fieldNames = undefined;
	    }
	    ReflectionObject.call(this, name, options);

	    /* istanbul ignore if */
	    if (!(fieldNames === undefined || Array.isArray(fieldNames)))
	        throw TypeError("fieldNames must be an Array");

	    /**
	     * Field names that belong to this oneof.
	     * @type {string[]}
	     */
	    this.oneof = fieldNames || []; // toJSON, marker

	    /**
	     * Fields that belong to this oneof as an array for iteration.
	     * @type {Field[]}
	     * @readonly
	     */
	    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent

	    /**
	     * Comment for this field.
	     * @type {string|null}
	     */
	    this.comment = comment;
	}

	/**
	 * Oneof descriptor.
	 * @interface IOneOf
	 * @property {Array.<string>} oneof Oneof field names
	 * @property {Object.<string,*>} [options] Oneof options
	 */

	/**
	 * Constructs a oneof from a oneof descriptor.
	 * @param {string} name Oneof name
	 * @param {IOneOf} json Oneof descriptor
	 * @returns {OneOf} Created oneof
	 * @throws {TypeError} If arguments are invalid
	 */
	OneOf.fromJSON = function fromJSON(name, json) {
	    return new OneOf(name, json.oneof, json.options, json.comment);
	};

	/**
	 * Converts this oneof to a oneof descriptor.
	 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
	 * @returns {IOneOf} Oneof descriptor
	 */
	OneOf.prototype.toJSON = function toJSON(toJSONOptions) {
	    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
	    return util.toObject([
	        "options" , this.options,
	        "oneof"   , this.oneof,
	        "comment" , keepComments ? this.comment : undefined
	    ]);
	};

	/**
	 * Adds the fields of the specified oneof to the parent if not already done so.
	 * @param {OneOf} oneof The oneof
	 * @returns {undefined}
	 * @inner
	 * @ignore
	 */
	function addFieldsToParent(oneof) {
	    if (oneof.parent)
	        for (var i = 0; i < oneof.fieldsArray.length; ++i)
	            if (!oneof.fieldsArray[i].parent)
	                oneof.parent.add(oneof.fieldsArray[i]);
	}

	/**
	 * Adds a field to this oneof and removes it from its current parent, if any.
	 * @param {Field} field Field to add
	 * @returns {OneOf} `this`
	 */
	OneOf.prototype.add = function add(field) {

	    /* istanbul ignore if */
	    if (!(field instanceof Field))
	        throw TypeError("field must be a Field");

	    if (field.parent && field.parent !== this.parent)
	        field.parent.remove(field);
	    this.oneof.push(field.name);
	    this.fieldsArray.push(field);
	    field.partOf = this; // field.parent remains null
	    addFieldsToParent(this);
	    return this;
	};

	/**
	 * Removes a field from this oneof and puts it back to the oneof's parent.
	 * @param {Field} field Field to remove
	 * @returns {OneOf} `this`
	 */
	OneOf.prototype.remove = function remove(field) {

	    /* istanbul ignore if */
	    if (!(field instanceof Field))
	        throw TypeError("field must be a Field");

	    var index = this.fieldsArray.indexOf(field);

	    /* istanbul ignore if */
	    if (index < 0)
	        throw Error(field + " is not a member of " + this);

	    this.fieldsArray.splice(index, 1);
	    index = this.oneof.indexOf(field.name);

	    /* istanbul ignore else */
	    if (index > -1) // theoretical
	        this.oneof.splice(index, 1);

	    field.partOf = null;
	    return this;
	};

	/**
	 * @override
	 */
	OneOf.prototype.onAdd = function onAdd(parent) {
	    ReflectionObject.prototype.onAdd.call(this, parent);
	    var self = this;
	    // Collect present fields
	    for (var i = 0; i < this.oneof.length; ++i) {
	        var field = parent.get(this.oneof[i]);
	        if (field && !field.partOf) {
	            field.partOf = self;
	            self.fieldsArray.push(field);
	        }
	    }
	    // Add not yet present fields
	    addFieldsToParent(this);
	};

	/**
	 * @override
	 */
	OneOf.prototype.onRemove = function onRemove(parent) {
	    for (var i = 0, field; i < this.fieldsArray.length; ++i)
	        if ((field = this.fieldsArray[i]).parent)
	            field.parent.remove(field);
	    ReflectionObject.prototype.onRemove.call(this, parent);
	};

	/**
	 * Decorator function as returned by {@link OneOf.d} (TypeScript).
	 * @typedef OneOfDecorator
	 * @type {function}
	 * @param {Object} prototype Target prototype
	 * @param {string} oneofName OneOf name
	 * @returns {undefined}
	 */

	/**
	 * OneOf decorator (TypeScript).
	 * @function
	 * @param {...string} fieldNames Field names
	 * @returns {OneOfDecorator} Decorator function
	 * @template T extends string
	 */
	OneOf.d = function decorateOneOf() {
	    var fieldNames = new Array(arguments.length),
	        index = 0;
	    while (index < arguments.length)
	        fieldNames[index] = arguments[index++];
	    return function oneOfDecorator(prototype, oneofName) {
	        util.decorateType(prototype.constructor)
	            .add(new OneOf(oneofName, fieldNames));
	        Object.defineProperty(prototype, oneofName, {
	            get: util.oneOfGetter(fieldNames),
	            set: util.oneOfSetter(fieldNames)
	        });
	    };
	};
	return oneof;
}

var namespace;
var hasRequiredNamespace;

function requireNamespace () {
	if (hasRequiredNamespace) return namespace;
	hasRequiredNamespace = 1;
	namespace = Namespace;

	// extends ReflectionObject
	var ReflectionObject = requireObject();
	((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";

	var Field    = requireField(),
	    util     = requireUtil$1(),
	    OneOf    = requireOneof();

	var Type,    // cyclic
	    Service,
	    Enum;

	/**
	 * Constructs a new namespace instance.
	 * @name Namespace
	 * @classdesc Reflected namespace.
	 * @extends NamespaceBase
	 * @constructor
	 * @param {string} name Namespace name
	 * @param {Object.<string,*>} [options] Declared options
	 */

	/**
	 * Constructs a namespace from JSON.
	 * @memberof Namespace
	 * @function
	 * @param {string} name Namespace name
	 * @param {Object.<string,*>} json JSON object
	 * @returns {Namespace} Created namespace
	 * @throws {TypeError} If arguments are invalid
	 */
	Namespace.fromJSON = function fromJSON(name, json) {
	    return new Namespace(name, json.options).addJSON(json.nested);
	};

	/**
	 * Converts an array of reflection objects to JSON.
	 * @memberof Namespace
	 * @param {ReflectionObject[]} array Object array
	 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
	 * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty
	 */
	function arrayToJSON(array, toJSONOptions) {
	    if (!(array && array.length))
	        return undefined;
	    var obj = {};
	    for (var i = 0; i < array.length; ++i)
	        obj[array[i].name] = array[i].toJSON(toJSONOptions);
	    return obj;
	}

	Namespace.arrayToJSON = arrayToJSON;

	/**
	 * Tests if the specified id is reserved.
	 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
	 * @param {number} id Id to test
	 * @returns {boolean} `true` if reserved, otherwise `false`
	 */
	Namespace.isReservedId = function isReservedId(reserved, id) {
	    if (reserved)
	        for (var i = 0; i < reserved.length; ++i)
	            if (typeof reserved[i] !== "string" && reserved[i][0] <= id && reserved[i][1] > id)
	                return true;
	    return false;
	};

	/**
	 * Tests if the specified name is reserved.
	 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
	 * @param {string} name Name to test
	 * @returns {boolean} `true` if reserved, otherwise `false`
	 */
	Namespace.isReservedName = function isReservedName(reserved, name) {
	    if (reserved)
	        for (var i = 0; i < reserved.length; ++i)
	            if (reserved[i] === name)
	                return true;
	    return false;
	};

	/**
	 * Not an actual constructor. Use {@link Namespace} instead.
	 * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.
	 * @exports NamespaceBase
	 * @extends ReflectionObject
	 * @abstract
	 * @constructor
	 * @param {string} name Namespace name
	 * @param {Object.<string,*>} [options] Declared options
	 * @see {@link Namespace}
	 */
	function Namespace(name, options) {
	    ReflectionObject.call(this, name, options);

	    /**
	     * Nested objects by name.
	     * @type {Object.<string,ReflectionObject>|undefined}
	     */
	    this.nested = undefined; // toJSON

	    /**
	     * Cached nested objects as an array.
	     * @type {ReflectionObject[]|null}
	     * @private
	     */
	    this._nestedArray = null;
	}

	function clearCache(namespace) {
	    namespace._nestedArray = null;
	    return namespace;
	}

	/**
	 * Nested objects of this namespace as an array for iteration.
	 * @name NamespaceBase#nestedArray
	 * @type {ReflectionObject[]}
	 * @readonly
	 */
	Object.defineProperty(Namespace.prototype, "nestedArray", {
	    get: function() {
	        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
	    }
	});

	/**
	 * Namespace descriptor.
	 * @interface INamespace
	 * @property {Object.<string,*>} [options] Namespace options
	 * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors
	 */

	/**
	 * Any extension field descriptor.
	 * @typedef AnyExtensionField
	 * @type {IExtensionField|IExtensionMapField}
	 */

	/**
	 * Any nested object descriptor.
	 * @typedef AnyNestedObject
	 * @type {IEnum|IType|IService|AnyExtensionField|INamespace|IOneOf}
	 */

	/**
	 * Converts this namespace to a namespace descriptor.
	 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
	 * @returns {INamespace} Namespace descriptor
	 */
	Namespace.prototype.toJSON = function toJSON(toJSONOptions) {
	    return util.toObject([
	        "options" , this.options,
	        "nested"  , arrayToJSON(this.nestedArray, toJSONOptions)
	    ]);
	};

	/**
	 * Adds nested objects to this namespace from nested object descriptors.
	 * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors
	 * @returns {Namespace} `this`
	 */
	Namespace.prototype.addJSON = function addJSON(nestedJson) {
	    var ns = this;
	    /* istanbul ignore else */
	    if (nestedJson) {
	        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {
	            nested = nestedJson[names[i]];
	            ns.add( // most to least likely
	                ( nested.fields !== undefined
	                ? Type.fromJSON
	                : nested.values !== undefined
	                ? Enum.fromJSON
	                : nested.methods !== undefined
	                ? Service.fromJSON
	                : nested.id !== undefined
	                ? Field.fromJSON
	                : Namespace.fromJSON )(names[i], nested)
	            );
	        }
	    }
	    return this;
	};

	/**
	 * Gets the nested object of the specified name.
	 * @param {string} name Nested object name
	 * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist
	 */
	Namespace.prototype.get = function get(name) {
	    return this.nested && this.nested[name]
	        || null;
	};

	/**
	 * Gets the values of the nested {@link Enum|enum} of the specified name.
	 * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.
	 * @param {string} name Nested enum name
	 * @returns {Object.<string,number>} Enum values
	 * @throws {Error} If there is no such enum
	 */
	Namespace.prototype.getEnum = function getEnum(name) {
	    if (this.nested && this.nested[name] instanceof Enum)
	        return this.nested[name].values;
	    throw Error("no such enum: " + name);
	};

	/**
	 * Adds a nested object to this namespace.
	 * @param {ReflectionObject} object Nested object to add
	 * @returns {Namespace} `this`
	 * @throws {TypeError} If arguments are invalid
	 * @throws {Error} If there is already a nested object with this name
	 */
	Namespace.prototype.add = function add(object) {

	    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type  || object instanceof OneOf || object instanceof Enum || object instanceof Service || object instanceof Namespace))
	        throw TypeError("object must be a valid nested object");

	    if (!this.nested)
	        this.nested = {};
	    else {
	        var prev = this.get(object.name);
	        if (prev) {
	            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {
	                // replace plain namespace but keep existing nested elements and options
	                var nested = prev.nestedArray;
	                for (var i = 0; i < nested.length; ++i)
	                    object.add(nested[i]);
	                this.remove(prev);
	                if (!this.nested)
	                    this.nested = {};
	                object.setOptions(prev.options, true);

	            } else
	                throw Error("duplicate name '" + object.name + "' in " + this);
	        }
	    }
	    this.nested[object.name] = object;
	    object.onAdd(this);
	    return clearCache(this);
	};

	/**
	 * Removes a nested object from this namespace.
	 * @param {ReflectionObject} object Nested object to remove
	 * @returns {Namespace} `this`
	 * @throws {TypeError} If arguments are invalid
	 * @throws {Error} If `object` is not a member of this namespace
	 */
	Namespace.prototype.remove = function remove(object) {

	    if (!(object instanceof ReflectionObject))
	        throw TypeError("object must be a ReflectionObject");
	    if (object.parent !== this)
	        throw Error(object + " is not a member of " + this);

	    delete this.nested[object.name];
	    if (!Object.keys(this.nested).length)
	        this.nested = undefined;

	    object.onRemove(this);
	    return clearCache(this);
	};

	/**
	 * Defines additial namespaces within this one if not yet existing.
	 * @param {string|string[]} path Path to create
	 * @param {*} [json] Nested types to create from JSON
	 * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty
	 */
	Namespace.prototype.define = function define(path, json) {

	    if (util.isString(path))
	        path = path.split(".");
	    else if (!Array.isArray(path))
	        throw TypeError("illegal path");
	    if (path && path.length && path[0] === "")
	        throw Error("path must be relative");

	    var ptr = this;
	    while (path.length > 0) {
	        var part = path.shift();
	        if (ptr.nested && ptr.nested[part]) {
	            ptr = ptr.nested[part];
	            if (!(ptr instanceof Namespace))
	                throw Error("path conflicts with non-namespace objects");
	        } else
	            ptr.add(ptr = new Namespace(part));
	    }
	    if (json)
	        ptr.addJSON(json);
	    return ptr;
	};

	/**
	 * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.
	 * @returns {Namespace} `this`
	 */
	Namespace.prototype.resolveAll = function resolveAll() {
	    var nested = this.nestedArray, i = 0;
	    while (i < nested.length)
	        if (nested[i] instanceof Namespace)
	            nested[i++].resolveAll();
	        else
	            nested[i++].resolve();
	    return this.resolve();
	};

	/**
	 * Recursively looks up the reflection object matching the specified path in the scope of this namespace.
	 * @param {string|string[]} path Path to look up
	 * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.
	 * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked
	 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
	 */
	Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {

	    /* istanbul ignore next */
	    if (typeof filterTypes === "boolean") {
	        parentAlreadyChecked = filterTypes;
	        filterTypes = undefined;
	    } else if (filterTypes && !Array.isArray(filterTypes))
	        filterTypes = [ filterTypes ];

	    if (util.isString(path) && path.length) {
	        if (path === ".")
	            return this.root;
	        path = path.split(".");
	    } else if (!path.length)
	        return this;

	    // Start at root if path is absolute
	    if (path[0] === "")
	        return this.root.lookup(path.slice(1), filterTypes);

	    // Test if the first part matches any nested object, and if so, traverse if path contains more
	    var found = this.get(path[0]);
	    if (found) {
	        if (path.length === 1) {
	            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)
	                return found;
	        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))
	            return found;

	    // Otherwise try each nested namespace
	    } else
	        for (var i = 0; i < this.nestedArray.length; ++i)
	            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))
	                return found;

	    // If there hasn't been a match, try again at the parent
	    if (this.parent === null || parentAlreadyChecked)
	        return null;
	    return this.parent.lookup(path, filterTypes);
	};

	/**
	 * Looks up the reflection object at the specified path, relative to this namespace.
	 * @name NamespaceBase#lookup
	 * @function
	 * @param {string|string[]} path Path to look up
	 * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked
	 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
	 * @variation 2
	 */
	// lookup(path: string, [parentAlreadyChecked: boolean])

	/**
	 * Looks up the {@link Type|type} at the specified path, relative to this namespace.
	 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
	 * @param {string|string[]} path Path to look up
	 * @returns {Type} Looked up type
	 * @throws {Error} If `path` does not point to a type
	 */
	Namespace.prototype.lookupType = function lookupType(path) {
	    var found = this.lookup(path, [ Type ]);
	    if (!found)
	        throw Error("no such type: " + path);
	    return found;
	};

	/**
	 * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.
	 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
	 * @param {string|string[]} path Path to look up
	 * @returns {Enum} Looked up enum
	 * @throws {Error} If `path` does not point to an enum
	 */
	Namespace.prototype.lookupEnum = function lookupEnum(path) {
	    var found = this.lookup(path, [ Enum ]);
	    if (!found)
	        throw Error("no such Enum '" + path + "' in " + this);
	    return found;
	};

	/**
	 * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.
	 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
	 * @param {string|string[]} path Path to look up
	 * @returns {Type} Looked up type or enum
	 * @throws {Error} If `path` does not point to a type or enum
	 */
	Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
	    var found = this.lookup(path, [ Type, Enum ]);
	    if (!found)
	        throw Error("no such Type or Enum '" + path + "' in " + this);
	    return found;
	};

	/**
	 * Looks up the {@link Service|service} at the specified path, relative to this namespace.
	 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
	 * @param {string|string[]} path Path to look up
	 * @returns {Service} Looked up service
	 * @throws {Error} If `path` does not point to a service
	 */
	Namespace.prototype.lookupService = function lookupService(path) {
	    var found = this.lookup(path, [ Service ]);
	    if (!found)
	        throw Error("no such Service '" + path + "' in " + this);
	    return found;
	};

	// Sets up cyclic dependencies (called in index-light)
	Namespace._configure = function(Type_, Service_, Enum_) {
	    Type    = Type_;
	    Service = Service_;
	    Enum    = Enum_;
	};
	return namespace;
}

var mapfield;
var hasRequiredMapfield;

function requireMapfield () {
	if (hasRequiredMapfield) return mapfield;
	hasRequiredMapfield = 1;
	mapfield = MapField;

	// extends Field
	var Field = requireField();
	((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = "MapField";

	var types   = requireTypes(),
	    util    = requireUtil$1();

	/**
	 * Constructs a new map field instance.
	 * @classdesc Reflected map field.
	 * @extends FieldBase
	 * @constructor
	 * @param {string} name Unique name within its namespace
	 * @param {number} id Unique id within its namespace
	 * @param {string} keyType Key type
	 * @param {string} type Value type
	 * @param {Object.<string,*>} [options] Declared options
	 * @param {string} [comment] Comment associated with this field
	 */
	function MapField(name, id, keyType, type, options, comment) {
	    Field.call(this, name, id, type, undefined, undefined, options, comment);

	    /* istanbul ignore if */
	    if (!util.isString(keyType))
	        throw TypeError("keyType must be a string");

	    /**
	     * Key type.
	     * @type {string}
	     */
	    this.keyType = keyType; // toJSON, marker

	    /**
	     * Resolved key type if not a basic type.
	     * @type {ReflectionObject|null}
	     */
	    this.resolvedKeyType = null;

	    // Overrides Field#map
	    this.map = true;
	}

	/**
	 * Map field descriptor.
	 * @interface IMapField
	 * @extends {IField}
	 * @property {string} keyType Key type
	 */

	/**
	 * Extension map field descriptor.
	 * @interface IExtensionMapField
	 * @extends IMapField
	 * @property {string} extend Extended type
	 */

	/**
	 * Constructs a map field from a map field descriptor.
	 * @param {string} name Field name
	 * @param {IMapField} json Map field descriptor
	 * @returns {MapField} Created map field
	 * @throws {TypeError} If arguments are invalid
	 */
	MapField.fromJSON = function fromJSON(name, json) {
	    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);
	};

	/**
	 * Converts this map field to a map field descriptor.
	 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
	 * @returns {IMapField} Map field descriptor
	 */
	MapField.prototype.toJSON = function toJSON(toJSONOptions) {
	    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
	    return util.toObject([
	        "keyType" , this.keyType,
	        "type"    , this.type,
	        "id"      , this.id,
	        "extend"  , this.extend,
	        "options" , this.options,
	        "comment" , keepComments ? this.comment : undefined
	    ]);
	};

	/**
	 * @override
	 */
	MapField.prototype.resolve = function resolve() {
	    if (this.resolved)
	        return this;

	    // Besides a value type, map fields have a key type that may be "any scalar type except for floating point types and bytes"
	    if (types.mapKey[this.keyType] === undefined)
	        throw Error("invalid key type: " + this.keyType);

	    return Field.prototype.resolve.call(this);
	};

	/**
	 * Map field decorator (TypeScript).
	 * @name MapField.d
	 * @function
	 * @param {number} fieldId Field id
	 * @param {"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"} fieldKeyType Field key type
	 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"|"bytes"|Object|Constructor<{}>} fieldValueType Field value type
	 * @returns {FieldDecorator} Decorator function
	 * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }
	 */
	MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {

	    // submessage value: decorate the submessage and use its name as the type
	    if (typeof fieldValueType === "function")
	        fieldValueType = util.decorateType(fieldValueType).name;

	    // enum reference value: create a reflected copy of the enum and keep reuseing it
	    else if (fieldValueType && typeof fieldValueType === "object")
	        fieldValueType = util.decorateEnum(fieldValueType).name;

	    return function mapFieldDecorator(prototype, fieldName) {
	        util.decorateType(prototype.constructor)
	            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
	    };
	};
	return mapfield;
}

var method;
var hasRequiredMethod;

function requireMethod () {
	if (hasRequiredMethod) return method;
	hasRequiredMethod = 1;
	method = Method;

	// extends ReflectionObject
	var ReflectionObject = requireObject();
	((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = "Method";

	var util = requireUtil$1();

	/**
	 * Constructs a new service method instance.
	 * @classdesc Reflected service method.
	 * @extends ReflectionObject
	 * @constructor
	 * @param {string} name Method name
	 * @param {string|undefined} type Method type, usually `"rpc"`
	 * @param {string} requestType Request message type
	 * @param {string} responseType Response message type
	 * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed
	 * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed
	 * @param {Object.<string,*>} [options] Declared options
	 * @param {string} [comment] The comment for this method
	 * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object
	 */
	function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {

	    /* istanbul ignore next */
	    if (util.isObject(requestStream)) {
	        options = requestStream;
	        requestStream = responseStream = undefined;
	    } else if (util.isObject(responseStream)) {
	        options = responseStream;
	        responseStream = undefined;
	    }

	    /* istanbul ignore if */
	    if (!(type === undefined || util.isString(type)))
	        throw TypeError("type must be a string");

	    /* istanbul ignore if */
	    if (!util.isString(requestType))
	        throw TypeError("requestType must be a string");

	    /* istanbul ignore if */
	    if (!util.isString(responseType))
	        throw TypeError("responseType must be a string");

	    ReflectionObject.call(this, name, options);

	    /**
	     * Method type.
	     * @type {string}
	     */
	    this.type = type || "rpc"; // toJSON

	    /**
	     * Request type.
	     * @type {string}
	     */
	    this.requestType = requestType; // toJSON, marker

	    /**
	     * Whether requests are streamed or not.
	     * @type {boolean|undefined}
	     */
	    this.requestStream = requestStream ? true : undefined; // toJSON

	    /**
	     * Response type.
	     * @type {string}
	     */
	    this.responseType = responseType; // toJSON

	    /**
	     * Whether responses are streamed or not.
	     * @type {boolean|undefined}
	     */
	    this.responseStream = responseStream ? true : undefined; // toJSON

	    /**
	     * Resolved request type.
	     * @type {Type|null}
	     */
	    this.resolvedRequestType = null;

	    /**
	     * Resolved response type.
	     * @type {Type|null}
	     */
	    this.resolvedResponseType = null;

	    /**
	     * Comment for this method
	     * @type {string|null}
	     */
	    this.comment = comment;

	    /**
	     * Options properly parsed into an object
	     */
	    this.parsedOptions = parsedOptions;
	}

	/**
	 * Method descriptor.
	 * @interface IMethod
	 * @property {string} [type="rpc"] Method type
	 * @property {string} requestType Request type
	 * @property {string} responseType Response type
	 * @property {boolean} [requestStream=false] Whether requests are streamed
	 * @property {boolean} [responseStream=false] Whether responses are streamed
	 * @property {Object.<string,*>} [options] Method options
	 * @property {string} comment Method comments
	 * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object
	 */

	/**
	 * Constructs a method from a method descriptor.
	 * @param {string} name Method name
	 * @param {IMethod} json Method descriptor
	 * @returns {Method} Created method
	 * @throws {TypeError} If arguments are invalid
	 */
	Method.fromJSON = function fromJSON(name, json) {
	    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);
	};

	/**
	 * Converts this method to a method descriptor.
	 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
	 * @returns {IMethod} Method descriptor
	 */
	Method.prototype.toJSON = function toJSON(toJSONOptions) {
	    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
	    return util.toObject([
	        "type"           , this.type !== "rpc" && /* istanbul ignore next */ this.type || undefined,
	        "requestType"    , this.requestType,
	        "requestStream"  , this.requestStream,
	        "responseType"   , this.responseType,
	        "responseStream" , this.responseStream,
	        "options"        , this.options,
	        "comment"        , keepComments ? this.comment : undefined,
	        "parsedOptions"  , this.parsedOptions,
	    ]);
	};

	/**
	 * @override
	 */
	Method.prototype.resolve = function resolve() {

	    /* istanbul ignore if */
	    if (this.resolved)
	        return this;

	    this.resolvedRequestType = this.parent.lookupType(this.requestType);
	    this.resolvedResponseType = this.parent.lookupType(this.responseType);

	    return ReflectionObject.prototype.resolve.call(this);
	};
	return method;
}

var service;
var hasRequiredService;

function requireService () {
	if (hasRequiredService) return service;
	hasRequiredService = 1;
	service = Service;

	// extends Namespace
	var Namespace = requireNamespace();
	((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = "Service";

	var Method = requireMethod(),
	    util   = requireUtil$1(),
	    rpc    = requireRpc();

	/**
	 * Constructs a new service instance.
	 * @classdesc Reflected service.
	 * @extends NamespaceBase
	 * @constructor
	 * @param {string} name Service name
	 * @param {Object.<string,*>} [options] Service options
	 * @throws {TypeError} If arguments are invalid
	 */
	function Service(name, options) {
	    Namespace.call(this, name, options);

	    /**
	     * Service methods.
	     * @type {Object.<string,Method>}
	     */
	    this.methods = {}; // toJSON, marker

	    /**
	     * Cached methods as an array.
	     * @type {Method[]|null}
	     * @private
	     */
	    this._methodsArray = null;
	}

	/**
	 * Service descriptor.
	 * @interface IService
	 * @extends INamespace
	 * @property {Object.<string,IMethod>} methods Method descriptors
	 */

	/**
	 * Constructs a service from a service descriptor.
	 * @param {string} name Service name
	 * @param {IService} json Service descriptor
	 * @returns {Service} Created service
	 * @throws {TypeError} If arguments are invalid
	 */
	Service.fromJSON = function fromJSON(name, json) {
	    var service = new Service(name, json.options);
	    /* istanbul ignore else */
	    if (json.methods)
	        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)
	            service.add(Method.fromJSON(names[i], json.methods[names[i]]));
	    if (json.nested)
	        service.addJSON(json.nested);
	    service.comment = json.comment;
	    return service;
	};

	/**
	 * Converts this service to a service descriptor.
	 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
	 * @returns {IService} Service descriptor
	 */
	Service.prototype.toJSON = function toJSON(toJSONOptions) {
	    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
	    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
	    return util.toObject([
	        "options" , inherited && inherited.options || undefined,
	        "methods" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},
	        "nested"  , inherited && inherited.nested || undefined,
	        "comment" , keepComments ? this.comment : undefined
	    ]);
	};

	/**
	 * Methods of this service as an array for iteration.
	 * @name Service#methodsArray
	 * @type {Method[]}
	 * @readonly
	 */
	Object.defineProperty(Service.prototype, "methodsArray", {
	    get: function() {
	        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
	    }
	});

	function clearCache(service) {
	    service._methodsArray = null;
	    return service;
	}

	/**
	 * @override
	 */
	Service.prototype.get = function get(name) {
	    return this.methods[name]
	        || Namespace.prototype.get.call(this, name);
	};

	/**
	 * @override
	 */
	Service.prototype.resolveAll = function resolveAll() {
	    var methods = this.methodsArray;
	    for (var i = 0; i < methods.length; ++i)
	        methods[i].resolve();
	    return Namespace.prototype.resolve.call(this);
	};

	/**
	 * @override
	 */
	Service.prototype.add = function add(object) {

	    /* istanbul ignore if */
	    if (this.get(object.name))
	        throw Error("duplicate name '" + object.name + "' in " + this);

	    if (object instanceof Method) {
	        this.methods[object.name] = object;
	        object.parent = this;
	        return clearCache(this);
	    }
	    return Namespace.prototype.add.call(this, object);
	};

	/**
	 * @override
	 */
	Service.prototype.remove = function remove(object) {
	    if (object instanceof Method) {

	        /* istanbul ignore if */
	        if (this.methods[object.name] !== object)
	            throw Error(object + " is not a member of " + this);

	        delete this.methods[object.name];
	        object.parent = null;
	        return clearCache(this);
	    }
	    return Namespace.prototype.remove.call(this, object);
	};

	/**
	 * Creates a runtime service using the specified rpc implementation.
	 * @param {RPCImpl} rpcImpl RPC implementation
	 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
	 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
	 * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.
	 */
	Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
	    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);
	    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {
	        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
	        rpcService[methodName] = util.codegen(["r","c"], util.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
	            m: method,
	            q: method.resolvedRequestType.ctor,
	            s: method.resolvedResponseType.ctor
	        });
	    }
	    return rpcService;
	};
	return service;
}

var message;
var hasRequiredMessage;

function requireMessage () {
	if (hasRequiredMessage) return message;
	hasRequiredMessage = 1;
	message = Message;

	var util = requireMinimal();

	/**
	 * Constructs a new message instance.
	 * @classdesc Abstract runtime message.
	 * @constructor
	 * @param {Properties<T>} [properties] Properties to set
	 * @template T extends object = object
	 */
	function Message(properties) {
	    // not used internally
	    if (properties)
	        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	            this[keys[i]] = properties[keys[i]];
	}

	/**
	 * Reference to the reflected type.
	 * @name Message.$type
	 * @type {Type}
	 * @readonly
	 */

	/**
	 * Reference to the reflected type.
	 * @name Message#$type
	 * @type {Type}
	 * @readonly
	 */

	/*eslint-disable valid-jsdoc*/

	/**
	 * Creates a new message of this type using the specified properties.
	 * @param {Object.<string,*>} [properties] Properties to set
	 * @returns {Message<T>} Message instance
	 * @template T extends Message<T>
	 * @this Constructor<T>
	 */
	Message.create = function create(properties) {
	    return this.$type.create(properties);
	};

	/**
	 * Encodes a message of this type.
	 * @param {T|Object.<string,*>} message Message to encode
	 * @param {Writer} [writer] Writer to use
	 * @returns {Writer} Writer
	 * @template T extends Message<T>
	 * @this Constructor<T>
	 */
	Message.encode = function encode(message, writer) {
	    return this.$type.encode(message, writer);
	};

	/**
	 * Encodes a message of this type preceeded by its length as a varint.
	 * @param {T|Object.<string,*>} message Message to encode
	 * @param {Writer} [writer] Writer to use
	 * @returns {Writer} Writer
	 * @template T extends Message<T>
	 * @this Constructor<T>
	 */
	Message.encodeDelimited = function encodeDelimited(message, writer) {
	    return this.$type.encodeDelimited(message, writer);
	};

	/**
	 * Decodes a message of this type.
	 * @name Message.decode
	 * @function
	 * @param {Reader|Uint8Array} reader Reader or buffer to decode
	 * @returns {T} Decoded message
	 * @template T extends Message<T>
	 * @this Constructor<T>
	 */
	Message.decode = function decode(reader) {
	    return this.$type.decode(reader);
	};

	/**
	 * Decodes a message of this type preceeded by its length as a varint.
	 * @name Message.decodeDelimited
	 * @function
	 * @param {Reader|Uint8Array} reader Reader or buffer to decode
	 * @returns {T} Decoded message
	 * @template T extends Message<T>
	 * @this Constructor<T>
	 */
	Message.decodeDelimited = function decodeDelimited(reader) {
	    return this.$type.decodeDelimited(reader);
	};

	/**
	 * Verifies a message of this type.
	 * @name Message.verify
	 * @function
	 * @param {Object.<string,*>} message Plain object to verify
	 * @returns {string|null} `null` if valid, otherwise the reason why it is not
	 */
	Message.verify = function verify(message) {
	    return this.$type.verify(message);
	};

	/**
	 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
	 * @param {Object.<string,*>} object Plain object
	 * @returns {T} Message instance
	 * @template T extends Message<T>
	 * @this Constructor<T>
	 */
	Message.fromObject = function fromObject(object) {
	    return this.$type.fromObject(object);
	};

	/**
	 * Creates a plain object from a message of this type. Also converts values to other types if specified.
	 * @param {T} message Message instance
	 * @param {IConversionOptions} [options] Conversion options
	 * @returns {Object.<string,*>} Plain object
	 * @template T extends Message<T>
	 * @this Constructor<T>
	 */
	Message.toObject = function toObject(message, options) {
	    return this.$type.toObject(message, options);
	};

	/**
	 * Converts this message to JSON.
	 * @returns {Object.<string,*>} JSON object
	 */
	Message.prototype.toJSON = function toJSON() {
	    return this.$type.toObject(this, util.toJSONOptions);
	};

	/*eslint-enable valid-jsdoc*/
	return message;
}

var decoder_1;
var hasRequiredDecoder;

function requireDecoder () {
	if (hasRequiredDecoder) return decoder_1;
	hasRequiredDecoder = 1;
	decoder_1 = decoder;

	var Enum    = require_enum(),
	    types   = requireTypes(),
	    util    = requireUtil$1();

	function missing(field) {
	    return "missing required '" + field.name + "'";
	}

	/**
	 * Generates a decoder specific to the specified message type.
	 * @param {Type} mtype Message type
	 * @returns {Codegen} Codegen instance
	 */
	function decoder(mtype) {
	    /* eslint-disable no-unexpected-multiline */
	    var gen = util.codegen(["r", "l"], mtype.name + "$decode")
	    ("if(!(r instanceof Reader))")
	        ("r=Reader.create(r)")
	    ("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? ",k,value" : ""))
	    ("while(r.pos<c){")
	        ("var t=r.uint32()");
	    if (mtype.group) gen
	        ("if((t&7)===4)")
	            ("break");
	    gen
	        ("switch(t>>>3){");

	    var i = 0;
	    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {
	        var field = mtype._fieldsArray[i].resolve(),
	            type  = field.resolvedType instanceof Enum ? "int32" : field.type,
	            ref   = "m" + util.safeProp(field.name); gen
	            ("case %i: {", field.id);

	        // Map fields
	        if (field.map) { gen
	                ("if(%s===util.emptyObject)", ref)
	                    ("%s={}", ref)
	                ("var c2 = r.uint32()+r.pos");

	            if (types.defaults[field.keyType] !== undefined) gen
	                ("k=%j", types.defaults[field.keyType]);
	            else gen
	                ("k=null");

	            if (types.defaults[type] !== undefined) gen
	                ("value=%j", types.defaults[type]);
	            else gen
	                ("value=null");

	            gen
	                ("while(r.pos<c2){")
	                    ("var tag2=r.uint32()")
	                    ("switch(tag2>>>3){")
	                        ("case 1: k=r.%s(); break", field.keyType)
	                        ("case 2:");

	            if (types.basic[type] === undefined) gen
	                            ("value=types[%i].decode(r,r.uint32())", i); // can't be groups
	            else gen
	                            ("value=r.%s()", type);

	            gen
	                            ("break")
	                        ("default:")
	                            ("r.skipType(tag2&7)")
	                            ("break")
	                    ("}")
	                ("}");

	            if (types.long[field.keyType] !== undefined) gen
	                ("%s[typeof k===\"object\"?util.longToHash(k):k]=value", ref);
	            else gen
	                ("%s[k]=value", ref);

	        // Repeated fields
	        } else if (field.repeated) { gen

	                ("if(!(%s&&%s.length))", ref, ref)
	                    ("%s=[]", ref);

	            // Packable (always check for forward and backward compatiblity)
	            if (types.packed[type] !== undefined) gen
	                ("if((t&7)===2){")
	                    ("var c2=r.uint32()+r.pos")
	                    ("while(r.pos<c2)")
	                        ("%s.push(r.%s())", ref, type)
	                ("}else");

	            // Non-packed
	            if (types.basic[type] === undefined) gen(field.resolvedType.group
	                    ? "%s.push(types[%i].decode(r))"
	                    : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);
	            else gen
	                    ("%s.push(r.%s())", ref, type);

	        // Non-repeated
	        } else if (types.basic[type] === undefined) gen(field.resolvedType.group
	                ? "%s=types[%i].decode(r)"
	                : "%s=types[%i].decode(r,r.uint32())", ref, i);
	        else gen
	                ("%s=r.%s()", ref, type);
	        gen
	                ("break")
	            ("}");
	        // Unknown fields
	    } gen
	            ("default:")
	                ("r.skipType(t&7)")
	                ("break")

	        ("}")
	    ("}");

	    // Field presence
	    for (i = 0; i < mtype._fieldsArray.length; ++i) {
	        var rfield = mtype._fieldsArray[i];
	        if (rfield.required) gen
	    ("if(!m.hasOwnProperty(%j))", rfield.name)
	        ("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
	    }

	    return gen
	    ("return m");
	    /* eslint-enable no-unexpected-multiline */
	}
	return decoder_1;
}

var verifier_1;
var hasRequiredVerifier;

function requireVerifier () {
	if (hasRequiredVerifier) return verifier_1;
	hasRequiredVerifier = 1;
	verifier_1 = verifier;

	var Enum      = require_enum(),
	    util      = requireUtil$1();

	function invalid(field, expected) {
	    return field.name + ": " + expected + (field.repeated && expected !== "array" ? "[]" : field.map && expected !== "object" ? "{k:"+field.keyType+"}" : "") + " expected";
	}

	/**
	 * Generates a partial value verifier.
	 * @param {Codegen} gen Codegen instance
	 * @param {Field} field Reflected field
	 * @param {number} fieldIndex Field index
	 * @param {string} ref Variable reference
	 * @returns {Codegen} Codegen instance
	 * @ignore
	 */
	function genVerifyValue(gen, field, fieldIndex, ref) {
	    /* eslint-disable no-unexpected-multiline */
	    if (field.resolvedType) {
	        if (field.resolvedType instanceof Enum) { gen
	            ("switch(%s){", ref)
	                ("default:")
	                    ("return%j", invalid(field, "enum value"));
	            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen
	                ("case %i:", field.resolvedType.values[keys[j]]);
	            gen
	                    ("break")
	            ("}");
	        } else {
	            gen
	            ("{")
	                ("var e=types[%i].verify(%s);", fieldIndex, ref)
	                ("if(e)")
	                    ("return%j+e", field.name + ".")
	            ("}");
	        }
	    } else {
	        switch (field.type) {
	            case "int32":
	            case "uint32":
	            case "sint32":
	            case "fixed32":
	            case "sfixed32": gen
	                ("if(!util.isInteger(%s))", ref)
	                    ("return%j", invalid(field, "integer"));
	                break;
	            case "int64":
	            case "uint64":
	            case "sint64":
	            case "fixed64":
	            case "sfixed64": gen
	                ("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", ref, ref, ref, ref)
	                    ("return%j", invalid(field, "integer|Long"));
	                break;
	            case "float":
	            case "double": gen
	                ("if(typeof %s!==\"number\")", ref)
	                    ("return%j", invalid(field, "number"));
	                break;
	            case "bool": gen
	                ("if(typeof %s!==\"boolean\")", ref)
	                    ("return%j", invalid(field, "boolean"));
	                break;
	            case "string": gen
	                ("if(!util.isString(%s))", ref)
	                    ("return%j", invalid(field, "string"));
	                break;
	            case "bytes": gen
	                ("if(!(%s&&typeof %s.length===\"number\"||util.isString(%s)))", ref, ref, ref)
	                    ("return%j", invalid(field, "buffer"));
	                break;
	        }
	    }
	    return gen;
	    /* eslint-enable no-unexpected-multiline */
	}

	/**
	 * Generates a partial key verifier.
	 * @param {Codegen} gen Codegen instance
	 * @param {Field} field Reflected field
	 * @param {string} ref Variable reference
	 * @returns {Codegen} Codegen instance
	 * @ignore
	 */
	function genVerifyKey(gen, field, ref) {
	    /* eslint-disable no-unexpected-multiline */
	    switch (field.keyType) {
	        case "int32":
	        case "uint32":
	        case "sint32":
	        case "fixed32":
	        case "sfixed32": gen
	            ("if(!util.key32Re.test(%s))", ref)
	                ("return%j", invalid(field, "integer key"));
	            break;
	        case "int64":
	        case "uint64":
	        case "sint64":
	        case "fixed64":
	        case "sfixed64": gen
	            ("if(!util.key64Re.test(%s))", ref) // see comment above: x is ok, d is not
	                ("return%j", invalid(field, "integer|Long key"));
	            break;
	        case "bool": gen
	            ("if(!util.key2Re.test(%s))", ref)
	                ("return%j", invalid(field, "boolean key"));
	            break;
	    }
	    return gen;
	    /* eslint-enable no-unexpected-multiline */
	}

	/**
	 * Generates a verifier specific to the specified message type.
	 * @param {Type} mtype Message type
	 * @returns {Codegen} Codegen instance
	 */
	function verifier(mtype) {
	    /* eslint-disable no-unexpected-multiline */

	    var gen = util.codegen(["m"], mtype.name + "$verify")
	    ("if(typeof m!==\"object\"||m===null)")
	        ("return%j", "object expected");
	    var oneofs = mtype.oneofsArray,
	        seenFirstField = {};
	    if (oneofs.length) gen
	    ("var p={}");

	    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {
	        var field = mtype._fieldsArray[i].resolve(),
	            ref   = "m" + util.safeProp(field.name);

	        if (field.optional) gen
	        ("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name); // !== undefined && !== null

	        // map fields
	        if (field.map) { gen
	            ("if(!util.isObject(%s))", ref)
	                ("return%j", invalid(field, "object"))
	            ("var k=Object.keys(%s)", ref)
	            ("for(var i=0;i<k.length;++i){");
	                genVerifyKey(gen, field, "k[i]");
	                genVerifyValue(gen, field, i, ref + "[k[i]]")
	            ("}");

	        // repeated fields
	        } else if (field.repeated) { gen
	            ("if(!Array.isArray(%s))", ref)
	                ("return%j", invalid(field, "array"))
	            ("for(var i=0;i<%s.length;++i){", ref);
	                genVerifyValue(gen, field, i, ref + "[i]")
	            ("}");

	        // required or present fields
	        } else {
	            if (field.partOf) {
	                var oneofProp = util.safeProp(field.partOf.name);
	                if (seenFirstField[field.partOf.name] === 1) gen
	            ("if(p%s===1)", oneofProp)
	                ("return%j", field.partOf.name + ": multiple values");
	                seenFirstField[field.partOf.name] = 1;
	                gen
	            ("p%s=1", oneofProp);
	            }
	            genVerifyValue(gen, field, i, ref);
	        }
	        if (field.optional) gen
	        ("}");
	    }
	    return gen
	    ("return null");
	    /* eslint-enable no-unexpected-multiline */
	}
	return verifier_1;
}

var converter = {};

var hasRequiredConverter;

function requireConverter () {
	if (hasRequiredConverter) return converter;
	hasRequiredConverter = 1;
	(function (exports) {
		/**
		 * Runtime message from/to plain object converters.
		 * @namespace
		 */
		var converter = exports;

		var Enum = require_enum(),
		    util = requireUtil$1();

		/**
		 * Generates a partial value fromObject conveter.
		 * @param {Codegen} gen Codegen instance
		 * @param {Field} field Reflected field
		 * @param {number} fieldIndex Field index
		 * @param {string} prop Property reference
		 * @returns {Codegen} Codegen instance
		 * @ignore
		 */
		function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
		    var defaultAlreadyEmitted = false;
		    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
		    if (field.resolvedType) {
		        if (field.resolvedType instanceof Enum) { gen
		            ("switch(d%s){", prop);
		            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
		                // enum unknown values passthrough
		                if (values[keys[i]] === field.typeDefault && !defaultAlreadyEmitted) { gen
		                    ("default:")
		                        ("if(typeof(d%s)===\"number\"){m%s=d%s;break}", prop, prop, prop);
		                    if (!field.repeated) gen // fallback to default value only for
		                                             // arrays, to avoid leaving holes.
		                        ("break");           // for non-repeated fields, just ignore
		                    defaultAlreadyEmitted = true;
		                }
		                gen
		                ("case%j:", keys[i])
		                ("case %i:", values[keys[i]])
		                    ("m%s=%j", prop, values[keys[i]])
		                    ("break");
		            } gen
		            ("}");
		        } else gen
		            ("if(typeof d%s!==\"object\")", prop)
		                ("throw TypeError(%j)", field.fullName + ": object expected")
		            ("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
		    } else {
		        var isUnsigned = false;
		        switch (field.type) {
		            case "double":
		            case "float": gen
		                ("m%s=Number(d%s)", prop, prop); // also catches "NaN", "Infinity"
		                break;
		            case "uint32":
		            case "fixed32": gen
		                ("m%s=d%s>>>0", prop, prop);
		                break;
		            case "int32":
		            case "sint32":
		            case "sfixed32": gen
		                ("m%s=d%s|0", prop, prop);
		                break;
		            case "uint64":
		                isUnsigned = true;
		                // eslint-disable-next-line no-fallthrough
		            case "int64":
		            case "sint64":
		            case "fixed64":
		            case "sfixed64": gen
		                ("if(util.Long)")
		                    ("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)
		                ("else if(typeof d%s===\"string\")", prop)
		                    ("m%s=parseInt(d%s,10)", prop, prop)
		                ("else if(typeof d%s===\"number\")", prop)
		                    ("m%s=d%s", prop, prop)
		                ("else if(typeof d%s===\"object\")", prop)
		                    ("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
		                break;
		            case "bytes": gen
		                ("if(typeof d%s===\"string\")", prop)
		                    ("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)
		                ("else if(d%s.length >= 0)", prop)
		                    ("m%s=d%s", prop, prop);
		                break;
		            case "string": gen
		                ("m%s=String(d%s)", prop, prop);
		                break;
		            case "bool": gen
		                ("m%s=Boolean(d%s)", prop, prop);
		                break;
		            /* default: gen
		                ("m%s=d%s", prop, prop);
		                break; */
		        }
		    }
		    return gen;
		    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
		}

		/**
		 * Generates a plain object to runtime message converter specific to the specified message type.
		 * @param {Type} mtype Message type
		 * @returns {Codegen} Codegen instance
		 */
		converter.fromObject = function fromObject(mtype) {
		    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
		    var fields = mtype.fieldsArray;
		    var gen = util.codegen(["d"], mtype.name + "$fromObject")
		    ("if(d instanceof this.ctor)")
		        ("return d");
		    if (!fields.length) return gen
		    ("return new this.ctor");
		    gen
		    ("var m=new this.ctor");
		    for (var i = 0; i < fields.length; ++i) {
		        var field  = fields[i].resolve(),
		            prop   = util.safeProp(field.name);

		        // Map fields
		        if (field.map) { gen
		    ("if(d%s){", prop)
		        ("if(typeof d%s!==\"object\")", prop)
		            ("throw TypeError(%j)", field.fullName + ": object expected")
		        ("m%s={}", prop)
		        ("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
		            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + "[ks[i]]")
		        ("}")
		    ("}");

		        // Repeated fields
		        } else if (field.repeated) { gen
		    ("if(d%s){", prop)
		        ("if(!Array.isArray(d%s))", prop)
		            ("throw TypeError(%j)", field.fullName + ": array expected")
		        ("m%s=[]", prop)
		        ("for(var i=0;i<d%s.length;++i){", prop);
		            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + "[i]")
		        ("}")
		    ("}");

		        // Non-repeated fields
		        } else {
		            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)
		    ("if(d%s!=null){", prop); // !== undefined && !== null
		        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);
		            if (!(field.resolvedType instanceof Enum)) gen
		    ("}");
		        }
		    } return gen
		    ("return m");
		    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
		};

		/**
		 * Generates a partial value toObject converter.
		 * @param {Codegen} gen Codegen instance
		 * @param {Field} field Reflected field
		 * @param {number} fieldIndex Field index
		 * @param {string} prop Property reference
		 * @returns {Codegen} Codegen instance
		 * @ignore
		 */
		function genValuePartial_toObject(gen, field, fieldIndex, prop) {
		    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
		    if (field.resolvedType) {
		        if (field.resolvedType instanceof Enum) gen
		            ("d%s=o.enums===String?(types[%i].values[m%s]===undefined?m%s:types[%i].values[m%s]):m%s", prop, fieldIndex, prop, prop, fieldIndex, prop, prop);
		        else gen
		            ("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
		    } else {
		        var isUnsigned = false;
		        switch (field.type) {
		            case "double":
		            case "float": gen
		            ("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
		                break;
		            case "uint64":
		                isUnsigned = true;
		                // eslint-disable-next-line no-fallthrough
		            case "int64":
		            case "sint64":
		            case "fixed64":
		            case "sfixed64": gen
		            ("if(typeof m%s===\"number\")", prop)
		                ("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)
		            ("else") // Long-like
		                ("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true": "", prop);
		                break;
		            case "bytes": gen
		            ("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
		                break;
		            default: gen
		            ("d%s=m%s", prop, prop);
		                break;
		        }
		    }
		    return gen;
		    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
		}

		/**
		 * Generates a runtime message to plain object converter specific to the specified message type.
		 * @param {Type} mtype Message type
		 * @returns {Codegen} Codegen instance
		 */
		converter.toObject = function toObject(mtype) {
		    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
		    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
		    if (!fields.length)
		        return util.codegen()("return {}");
		    var gen = util.codegen(["m", "o"], mtype.name + "$toObject")
		    ("if(!o)")
		        ("o={}")
		    ("var d={}");

		    var repeatedFields = [],
		        mapFields = [],
		        normalFields = [],
		        i = 0;
		    for (; i < fields.length; ++i)
		        if (!fields[i].partOf)
		            ( fields[i].resolve().repeated ? repeatedFields
		            : fields[i].map ? mapFields
		            : normalFields).push(fields[i]);

		    if (repeatedFields.length) { gen
		    ("if(o.arrays||o.defaults){");
		        for (i = 0; i < repeatedFields.length; ++i) gen
		        ("d%s=[]", util.safeProp(repeatedFields[i].name));
		        gen
		    ("}");
		    }

		    if (mapFields.length) { gen
		    ("if(o.objects||o.defaults){");
		        for (i = 0; i < mapFields.length; ++i) gen
		        ("d%s={}", util.safeProp(mapFields[i].name));
		        gen
		    ("}");
		    }

		    if (normalFields.length) { gen
		    ("if(o.defaults){");
		        for (i = 0; i < normalFields.length; ++i) {
		            var field = normalFields[i],
		                prop  = util.safeProp(field.name);
		            if (field.resolvedType instanceof Enum) gen
		        ("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);
		            else if (field.long) gen
		        ("if(util.Long){")
		            ("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)
		            ("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)
		        ("}else")
		            ("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber());
		            else if (field.bytes) {
		                var arrayDefault = "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]";
		                gen
		        ("if(o.bytes===String)d%s=%j", prop, String.fromCharCode.apply(String, field.typeDefault))
		        ("else{")
		            ("d%s=%s", prop, arrayDefault)
		            ("if(o.bytes!==Array)d%s=util.newBuffer(d%s)", prop, prop)
		        ("}");
		            } else gen
		        ("d%s=%j", prop, field.typeDefault); // also messages (=null)
		        } gen
		    ("}");
		    }
		    var hasKs2 = false;
		    for (i = 0; i < fields.length; ++i) {
		        var field = fields[i],
		            index = mtype._fieldsArray.indexOf(field),
		            prop  = util.safeProp(field.name);
		        if (field.map) {
		            if (!hasKs2) { hasKs2 = true; gen
		    ("var ks2");
		            } gen
		    ("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)
		        ("d%s={}", prop)
		        ("for(var j=0;j<ks2.length;++j){");
		            genValuePartial_toObject(gen, field, /* sorted */ index, prop + "[ks2[j]]")
		        ("}");
		        } else if (field.repeated) { gen
		    ("if(m%s&&m%s.length){", prop, prop)
		        ("d%s=[]", prop)
		        ("for(var j=0;j<m%s.length;++j){", prop);
		            genValuePartial_toObject(gen, field, /* sorted */ index, prop + "[j]")
		        ("}");
		        } else { gen
		    ("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name); // !== undefined && !== null
		        genValuePartial_toObject(gen, field, /* sorted */ index, prop);
		        if (field.partOf) gen
		        ("if(o.oneofs)")
		            ("d%s=%j", util.safeProp(field.partOf.name), field.name);
		        }
		        gen
		    ("}");
		    }
		    return gen
		    ("return d");
		    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
		}; 
	} (converter));
	return converter;
}

var wrappers = {};

var hasRequiredWrappers;

function requireWrappers () {
	if (hasRequiredWrappers) return wrappers;
	hasRequiredWrappers = 1;
	(function (exports) {

		/**
		 * Wrappers for common types.
		 * @type {Object.<string,IWrapper>}
		 * @const
		 */
		var wrappers = exports;

		var Message = requireMessage();

		/**
		 * From object converter part of an {@link IWrapper}.
		 * @typedef WrapperFromObjectConverter
		 * @type {function}
		 * @param {Object.<string,*>} object Plain object
		 * @returns {Message<{}>} Message instance
		 * @this Type
		 */

		/**
		 * To object converter part of an {@link IWrapper}.
		 * @typedef WrapperToObjectConverter
		 * @type {function}
		 * @param {Message<{}>} message Message instance
		 * @param {IConversionOptions} [options] Conversion options
		 * @returns {Object.<string,*>} Plain object
		 * @this Type
		 */

		/**
		 * Common type wrapper part of {@link wrappers}.
		 * @interface IWrapper
		 * @property {WrapperFromObjectConverter} [fromObject] From object converter
		 * @property {WrapperToObjectConverter} [toObject] To object converter
		 */

		// Custom wrapper for Any
		wrappers[".google.protobuf.Any"] = {

		    fromObject: function(object) {

		        // unwrap value type if mapped
		        if (object && object["@type"]) {
		             // Only use fully qualified type name after the last '/'
		            var name = object["@type"].substring(object["@type"].lastIndexOf("/") + 1);
		            var type = this.lookup(name);
		            /* istanbul ignore else */
		            if (type) {
		                // type_url does not accept leading "."
		                var type_url = object["@type"].charAt(0) === "." ?
		                    object["@type"].slice(1) : object["@type"];
		                // type_url prefix is optional, but path seperator is required
		                if (type_url.indexOf("/") === -1) {
		                    type_url = "/" + type_url;
		                }
		                return this.create({
		                    type_url: type_url,
		                    value: type.encode(type.fromObject(object)).finish()
		                });
		            }
		        }

		        return this.fromObject(object);
		    },

		    toObject: function(message, options) {

		        // Default prefix
		        var googleApi = "type.googleapis.com/";
		        var prefix = "";
		        var name = "";

		        // decode value if requested and unmapped
		        if (options && options.json && message.type_url && message.value) {
		            // Only use fully qualified type name after the last '/'
		            name = message.type_url.substring(message.type_url.lastIndexOf("/") + 1);
		            // Separate the prefix used
		            prefix = message.type_url.substring(0, message.type_url.lastIndexOf("/") + 1);
		            var type = this.lookup(name);
		            /* istanbul ignore else */
		            if (type)
		                message = type.decode(message.value);
		        }

		        // wrap value if unmapped
		        if (!(message instanceof this.ctor) && message instanceof Message) {
		            var object = message.$type.toObject(message, options);
		            var messageName = message.$type.fullName[0] === "." ?
		                message.$type.fullName.slice(1) : message.$type.fullName;
		            // Default to type.googleapis.com prefix if no prefix is used
		            if (prefix === "") {
		                prefix = googleApi;
		            }
		            name = prefix + messageName;
		            object["@type"] = name;
		            return object;
		        }

		        return this.toObject(message, options);
		    }
		}; 
	} (wrappers));
	return wrappers;
}

var type;
var hasRequiredType;

function requireType () {
	if (hasRequiredType) return type;
	hasRequiredType = 1;
	type = Type;

	// extends Namespace
	var Namespace = requireNamespace();
	((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = "Type";

	var Enum      = require_enum(),
	    OneOf     = requireOneof(),
	    Field     = requireField(),
	    MapField  = requireMapfield(),
	    Service   = requireService(),
	    Message   = requireMessage(),
	    Reader    = requireReader(),
	    Writer    = requireWriter(),
	    util      = requireUtil$1(),
	    encoder   = requireEncoder(),
	    decoder   = requireDecoder(),
	    verifier  = requireVerifier(),
	    converter = requireConverter(),
	    wrappers  = requireWrappers();

	/**
	 * Constructs a new reflected message type instance.
	 * @classdesc Reflected message type.
	 * @extends NamespaceBase
	 * @constructor
	 * @param {string} name Message name
	 * @param {Object.<string,*>} [options] Declared options
	 */
	function Type(name, options) {
	    Namespace.call(this, name, options);

	    /**
	     * Message fields.
	     * @type {Object.<string,Field>}
	     */
	    this.fields = {};  // toJSON, marker

	    /**
	     * Oneofs declared within this namespace, if any.
	     * @type {Object.<string,OneOf>}
	     */
	    this.oneofs = undefined; // toJSON

	    /**
	     * Extension ranges, if any.
	     * @type {number[][]}
	     */
	    this.extensions = undefined; // toJSON

	    /**
	     * Reserved ranges, if any.
	     * @type {Array.<number[]|string>}
	     */
	    this.reserved = undefined; // toJSON

	    /*?
	     * Whether this type is a legacy group.
	     * @type {boolean|undefined}
	     */
	    this.group = undefined; // toJSON

	    /**
	     * Cached fields by id.
	     * @type {Object.<number,Field>|null}
	     * @private
	     */
	    this._fieldsById = null;

	    /**
	     * Cached fields as an array.
	     * @type {Field[]|null}
	     * @private
	     */
	    this._fieldsArray = null;

	    /**
	     * Cached oneofs as an array.
	     * @type {OneOf[]|null}
	     * @private
	     */
	    this._oneofsArray = null;

	    /**
	     * Cached constructor.
	     * @type {Constructor<{}>}
	     * @private
	     */
	    this._ctor = null;
	}

	Object.defineProperties(Type.prototype, {

	    /**
	     * Message fields by id.
	     * @name Type#fieldsById
	     * @type {Object.<number,Field>}
	     * @readonly
	     */
	    fieldsById: {
	        get: function() {

	            /* istanbul ignore if */
	            if (this._fieldsById)
	                return this._fieldsById;

	            this._fieldsById = {};
	            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
	                var field = this.fields[names[i]],
	                    id = field.id;

	                /* istanbul ignore if */
	                if (this._fieldsById[id])
	                    throw Error("duplicate id " + id + " in " + this);

	                this._fieldsById[id] = field;
	            }
	            return this._fieldsById;
	        }
	    },

	    /**
	     * Fields of this message as an array for iteration.
	     * @name Type#fieldsArray
	     * @type {Field[]}
	     * @readonly
	     */
	    fieldsArray: {
	        get: function() {
	            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
	        }
	    },

	    /**
	     * Oneofs of this message as an array for iteration.
	     * @name Type#oneofsArray
	     * @type {OneOf[]}
	     * @readonly
	     */
	    oneofsArray: {
	        get: function() {
	            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
	        }
	    },

	    /**
	     * The registered constructor, if any registered, otherwise a generic constructor.
	     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.
	     * @name Type#ctor
	     * @type {Constructor<{}>}
	     */
	    ctor: {
	        get: function() {
	            return this._ctor || (this.ctor = Type.generateConstructor(this)());
	        },
	        set: function(ctor) {

	            // Ensure proper prototype
	            var prototype = ctor.prototype;
	            if (!(prototype instanceof Message)) {
	                (ctor.prototype = new Message()).constructor = ctor;
	                util.merge(ctor.prototype, prototype);
	            }

	            // Classes and messages reference their reflected type
	            ctor.$type = ctor.prototype.$type = this;

	            // Mix in static methods
	            util.merge(ctor, Message, true);

	            this._ctor = ctor;

	            // Messages have non-enumerable default values on their prototype
	            var i = 0;
	            for (; i < /* initializes */ this.fieldsArray.length; ++i)
	                this._fieldsArray[i].resolve(); // ensures a proper value

	            // Messages have non-enumerable getters and setters for each virtual oneof field
	            var ctorProperties = {};
	            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)
	                ctorProperties[this._oneofsArray[i].resolve().name] = {
	                    get: util.oneOfGetter(this._oneofsArray[i].oneof),
	                    set: util.oneOfSetter(this._oneofsArray[i].oneof)
	                };
	            if (i)
	                Object.defineProperties(ctor.prototype, ctorProperties);
	        }
	    }
	});

	/**
	 * Generates a constructor function for the specified type.
	 * @param {Type} mtype Message type
	 * @returns {Codegen} Codegen instance
	 */
	Type.generateConstructor = function generateConstructor(mtype) {
	    /* eslint-disable no-unexpected-multiline */
	    var gen = util.codegen(["p"], mtype.name);
	    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype
	    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)
	        if ((field = mtype._fieldsArray[i]).map) gen
	            ("this%s={}", util.safeProp(field.name));
	        else if (field.repeated) gen
	            ("this%s=[]", util.safeProp(field.name));
	    return gen
	    ("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)") // omit undefined or null
	        ("this[ks[i]]=p[ks[i]]");
	    /* eslint-enable no-unexpected-multiline */
	};

	function clearCache(type) {
	    type._fieldsById = type._fieldsArray = type._oneofsArray = null;
	    delete type.encode;
	    delete type.decode;
	    delete type.verify;
	    return type;
	}

	/**
	 * Message type descriptor.
	 * @interface IType
	 * @extends INamespace
	 * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors
	 * @property {Object.<string,IField>} fields Field descriptors
	 * @property {number[][]} [extensions] Extension ranges
	 * @property {number[][]} [reserved] Reserved ranges
	 * @property {boolean} [group=false] Whether a legacy group or not
	 */

	/**
	 * Creates a message type from a message type descriptor.
	 * @param {string} name Message name
	 * @param {IType} json Message type descriptor
	 * @returns {Type} Created message type
	 */
	Type.fromJSON = function fromJSON(name, json) {
	    var type = new Type(name, json.options);
	    type.extensions = json.extensions;
	    type.reserved = json.reserved;
	    var names = Object.keys(json.fields),
	        i = 0;
	    for (; i < names.length; ++i)
	        type.add(
	            ( typeof json.fields[names[i]].keyType !== "undefined"
	            ? MapField.fromJSON
	            : Field.fromJSON )(names[i], json.fields[names[i]])
	        );
	    if (json.oneofs)
	        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)
	            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
	    if (json.nested)
	        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
	            var nested = json.nested[names[i]];
	            type.add( // most to least likely
	                ( nested.id !== undefined
	                ? Field.fromJSON
	                : nested.fields !== undefined
	                ? Type.fromJSON
	                : nested.values !== undefined
	                ? Enum.fromJSON
	                : nested.methods !== undefined
	                ? Service.fromJSON
	                : Namespace.fromJSON )(names[i], nested)
	            );
	        }
	    if (json.extensions && json.extensions.length)
	        type.extensions = json.extensions;
	    if (json.reserved && json.reserved.length)
	        type.reserved = json.reserved;
	    if (json.group)
	        type.group = true;
	    if (json.comment)
	        type.comment = json.comment;
	    return type;
	};

	/**
	 * Converts this message type to a message type descriptor.
	 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
	 * @returns {IType} Message type descriptor
	 */
	Type.prototype.toJSON = function toJSON(toJSONOptions) {
	    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
	    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
	    return util.toObject([
	        "options"    , inherited && inherited.options || undefined,
	        "oneofs"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),
	        "fields"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},
	        "extensions" , this.extensions && this.extensions.length ? this.extensions : undefined,
	        "reserved"   , this.reserved && this.reserved.length ? this.reserved : undefined,
	        "group"      , this.group || undefined,
	        "nested"     , inherited && inherited.nested || undefined,
	        "comment"    , keepComments ? this.comment : undefined
	    ]);
	};

	/**
	 * @override
	 */
	Type.prototype.resolveAll = function resolveAll() {
	    var fields = this.fieldsArray, i = 0;
	    while (i < fields.length)
	        fields[i++].resolve();
	    var oneofs = this.oneofsArray; i = 0;
	    while (i < oneofs.length)
	        oneofs[i++].resolve();
	    return Namespace.prototype.resolveAll.call(this);
	};

	/**
	 * @override
	 */
	Type.prototype.get = function get(name) {
	    return this.fields[name]
	        || this.oneofs && this.oneofs[name]
	        || this.nested && this.nested[name]
	        || null;
	};

	/**
	 * Adds a nested object to this type.
	 * @param {ReflectionObject} object Nested object to add
	 * @returns {Type} `this`
	 * @throws {TypeError} If arguments are invalid
	 * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id
	 */
	Type.prototype.add = function add(object) {

	    if (this.get(object.name))
	        throw Error("duplicate name '" + object.name + "' in " + this);

	    if (object instanceof Field && object.extend === undefined) {
	        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.
	        // The root object takes care of adding distinct sister-fields to the respective extended
	        // type instead.

	        // avoids calling the getter if not absolutely necessary because it's called quite frequently
	        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])
	            throw Error("duplicate id " + object.id + " in " + this);
	        if (this.isReservedId(object.id))
	            throw Error("id " + object.id + " is reserved in " + this);
	        if (this.isReservedName(object.name))
	            throw Error("name '" + object.name + "' is reserved in " + this);

	        if (object.parent)
	            object.parent.remove(object);
	        this.fields[object.name] = object;
	        object.message = this;
	        object.onAdd(this);
	        return clearCache(this);
	    }
	    if (object instanceof OneOf) {
	        if (!this.oneofs)
	            this.oneofs = {};
	        this.oneofs[object.name] = object;
	        object.onAdd(this);
	        return clearCache(this);
	    }
	    return Namespace.prototype.add.call(this, object);
	};

	/**
	 * Removes a nested object from this type.
	 * @param {ReflectionObject} object Nested object to remove
	 * @returns {Type} `this`
	 * @throws {TypeError} If arguments are invalid
	 * @throws {Error} If `object` is not a member of this type
	 */
	Type.prototype.remove = function remove(object) {
	    if (object instanceof Field && object.extend === undefined) {
	        // See Type#add for the reason why extension fields are excluded here.

	        /* istanbul ignore if */
	        if (!this.fields || this.fields[object.name] !== object)
	            throw Error(object + " is not a member of " + this);

	        delete this.fields[object.name];
	        object.parent = null;
	        object.onRemove(this);
	        return clearCache(this);
	    }
	    if (object instanceof OneOf) {

	        /* istanbul ignore if */
	        if (!this.oneofs || this.oneofs[object.name] !== object)
	            throw Error(object + " is not a member of " + this);

	        delete this.oneofs[object.name];
	        object.parent = null;
	        object.onRemove(this);
	        return clearCache(this);
	    }
	    return Namespace.prototype.remove.call(this, object);
	};

	/**
	 * Tests if the specified id is reserved.
	 * @param {number} id Id to test
	 * @returns {boolean} `true` if reserved, otherwise `false`
	 */
	Type.prototype.isReservedId = function isReservedId(id) {
	    return Namespace.isReservedId(this.reserved, id);
	};

	/**
	 * Tests if the specified name is reserved.
	 * @param {string} name Name to test
	 * @returns {boolean} `true` if reserved, otherwise `false`
	 */
	Type.prototype.isReservedName = function isReservedName(name) {
	    return Namespace.isReservedName(this.reserved, name);
	};

	/**
	 * Creates a new message of this type using the specified properties.
	 * @param {Object.<string,*>} [properties] Properties to set
	 * @returns {Message<{}>} Message instance
	 */
	Type.prototype.create = function create(properties) {
	    return new this.ctor(properties);
	};

	/**
	 * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.
	 * @returns {Type} `this`
	 */
	Type.prototype.setup = function setup() {
	    // Sets up everything at once so that the prototype chain does not have to be re-evaluated
	    // multiple times (V8, soft-deopt prototype-check).

	    var fullName = this.fullName,
	        types    = [];
	    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)
	        types.push(this._fieldsArray[i].resolve().resolvedType);

	    // Replace setup methods with type-specific generated functions
	    this.encode = encoder(this)({
	        Writer : Writer,
	        types  : types,
	        util   : util
	    });
	    this.decode = decoder(this)({
	        Reader : Reader,
	        types  : types,
	        util   : util
	    });
	    this.verify = verifier(this)({
	        types : types,
	        util  : util
	    });
	    this.fromObject = converter.fromObject(this)({
	        types : types,
	        util  : util
	    });
	    this.toObject = converter.toObject(this)({
	        types : types,
	        util  : util
	    });

	    // Inject custom wrappers for common types
	    var wrapper = wrappers[fullName];
	    if (wrapper) {
	        var originalThis = Object.create(this);
	        // if (wrapper.fromObject) {
	            originalThis.fromObject = this.fromObject;
	            this.fromObject = wrapper.fromObject.bind(originalThis);
	        // }
	        // if (wrapper.toObject) {
	            originalThis.toObject = this.toObject;
	            this.toObject = wrapper.toObject.bind(originalThis);
	        // }
	    }

	    return this;
	};

	/**
	 * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.
	 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
	 * @param {Writer} [writer] Writer to encode to
	 * @returns {Writer} writer
	 */
	Type.prototype.encode = function encode_setup(message, writer) {
	    return this.setup().encode(message, writer); // overrides this method
	};

	/**
	 * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.
	 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
	 * @param {Writer} [writer] Writer to encode to
	 * @returns {Writer} writer
	 */
	Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
	    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
	};

	/**
	 * Decodes a message of this type.
	 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
	 * @param {number} [length] Length of the message, if known beforehand
	 * @returns {Message<{}>} Decoded message
	 * @throws {Error} If the payload is not a reader or valid buffer
	 * @throws {util.ProtocolError<{}>} If required fields are missing
	 */
	Type.prototype.decode = function decode_setup(reader, length) {
	    return this.setup().decode(reader, length); // overrides this method
	};

	/**
	 * Decodes a message of this type preceeded by its byte length as a varint.
	 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
	 * @returns {Message<{}>} Decoded message
	 * @throws {Error} If the payload is not a reader or valid buffer
	 * @throws {util.ProtocolError} If required fields are missing
	 */
	Type.prototype.decodeDelimited = function decodeDelimited(reader) {
	    if (!(reader instanceof Reader))
	        reader = Reader.create(reader);
	    return this.decode(reader, reader.uint32());
	};

	/**
	 * Verifies that field values are valid and that required fields are present.
	 * @param {Object.<string,*>} message Plain object to verify
	 * @returns {null|string} `null` if valid, otherwise the reason why it is not
	 */
	Type.prototype.verify = function verify_setup(message) {
	    return this.setup().verify(message); // overrides this method
	};

	/**
	 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
	 * @param {Object.<string,*>} object Plain object to convert
	 * @returns {Message<{}>} Message instance
	 */
	Type.prototype.fromObject = function fromObject(object) {
	    return this.setup().fromObject(object);
	};

	/**
	 * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.
	 * @interface IConversionOptions
	 * @property {Function} [longs] Long conversion type.
	 * Valid values are `String` and `Number` (the global types).
	 * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.
	 * @property {Function} [enums] Enum value conversion type.
	 * Only valid value is `String` (the global type).
	 * Defaults to copy the present value, which is the numeric id.
	 * @property {Function} [bytes] Bytes value conversion type.
	 * Valid values are `Array` and (a base64 encoded) `String` (the global types).
	 * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.
	 * @property {boolean} [defaults=false] Also sets default values on the resulting object
	 * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`
	 * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`
	 * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any
	 * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings
	 */

	/**
	 * Creates a plain object from a message of this type. Also converts values to other types if specified.
	 * @param {Message<{}>} message Message instance
	 * @param {IConversionOptions} [options] Conversion options
	 * @returns {Object.<string,*>} Plain object
	 */
	Type.prototype.toObject = function toObject(message, options) {
	    return this.setup().toObject(message, options);
	};

	/**
	 * Decorator function as returned by {@link Type.d} (TypeScript).
	 * @typedef TypeDecorator
	 * @type {function}
	 * @param {Constructor<T>} target Target constructor
	 * @returns {undefined}
	 * @template T extends Message<T>
	 */

	/**
	 * Type decorator (TypeScript).
	 * @param {string} [typeName] Type name, defaults to the constructor's name
	 * @returns {TypeDecorator<T>} Decorator function
	 * @template T extends Message<T>
	 */
	Type.d = function decorateType(typeName) {
	    return function typeDecorator(target) {
	        util.decorateType(target, typeName);
	    };
	};
	return type;
}

var root;
var hasRequiredRoot;

function requireRoot () {
	if (hasRequiredRoot) return root;
	hasRequiredRoot = 1;
	root = Root;

	// extends Namespace
	var Namespace = requireNamespace();
	((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = "Root";

	var Field   = requireField(),
	    Enum    = require_enum(),
	    OneOf   = requireOneof(),
	    util    = requireUtil$1();

	var Type,   // cyclic
	    parse,  // might be excluded
	    common; // "

	/**
	 * Constructs a new root namespace instance.
	 * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.
	 * @extends NamespaceBase
	 * @constructor
	 * @param {Object.<string,*>} [options] Top level options
	 */
	function Root(options) {
	    Namespace.call(this, "", options);

	    /**
	     * Deferred extension fields.
	     * @type {Field[]}
	     */
	    this.deferred = [];

	    /**
	     * Resolved file names of loaded files.
	     * @type {string[]}
	     */
	    this.files = [];
	}

	/**
	 * Loads a namespace descriptor into a root namespace.
	 * @param {INamespace} json Nameespace descriptor
	 * @param {Root} [root] Root namespace, defaults to create a new one if omitted
	 * @returns {Root} Root namespace
	 */
	Root.fromJSON = function fromJSON(json, root) {
	    if (!root)
	        root = new Root();
	    if (json.options)
	        root.setOptions(json.options);
	    return root.addJSON(json.nested);
	};

	/**
	 * Resolves the path of an imported file, relative to the importing origin.
	 * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.
	 * @function
	 * @param {string} origin The file name of the importing file
	 * @param {string} target The file name being imported
	 * @returns {string|null} Resolved path to `target` or `null` to skip the file
	 */
	Root.prototype.resolvePath = util.path.resolve;

	/**
	 * Fetch content from file path or url
	 * This method exists so you can override it with your own logic.
	 * @function
	 * @param {string} path File path or url
	 * @param {FetchCallback} callback Callback function
	 * @returns {undefined}
	 */
	Root.prototype.fetch = util.fetch;

	// A symbol-like function to safely signal synchronous loading
	/* istanbul ignore next */
	function SYNC() {} // eslint-disable-line no-empty-function

	/**
	 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
	 * @param {string|string[]} filename Names of one or multiple files to load
	 * @param {IParseOptions} options Parse options
	 * @param {LoadCallback} callback Callback function
	 * @returns {undefined}
	 */
	Root.prototype.load = function load(filename, options, callback) {
	    if (typeof options === "function") {
	        callback = options;
	        options = undefined;
	    }
	    var self = this;
	    if (!callback)
	        return util.asPromise(load, self, filename, options);

	    var sync = callback === SYNC; // undocumented

	    // Finishes loading by calling the callback (exactly once)
	    function finish(err, root) {
	        /* istanbul ignore if */
	        if (!callback)
	            return;
	        var cb = callback;
	        callback = null;
	        if (sync)
	            throw err;
	        cb(err, root);
	    }

	    // Bundled definition existence checking
	    function getBundledFileName(filename) {
	        var idx = filename.lastIndexOf("google/protobuf/");
	        if (idx > -1) {
	            var altname = filename.substring(idx);
	            if (altname in common) return altname;
	        }
	        return null;
	    }

	    // Processes a single file
	    function process(filename, source) {
	        try {
	            if (util.isString(source) && source.charAt(0) === "{")
	                source = JSON.parse(source);
	            if (!util.isString(source))
	                self.setOptions(source.options).addJSON(source.nested);
	            else {
	                parse.filename = filename;
	                var parsed = parse(source, self, options),
	                    resolved,
	                    i = 0;
	                if (parsed.imports)
	                    for (; i < parsed.imports.length; ++i)
	                        if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i]))
	                            fetch(resolved);
	                if (parsed.weakImports)
	                    for (i = 0; i < parsed.weakImports.length; ++i)
	                        if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i]))
	                            fetch(resolved, true);
	            }
	        } catch (err) {
	            finish(err);
	        }
	        if (!sync && !queued)
	            finish(null, self); // only once anyway
	    }

	    // Fetches a single file
	    function fetch(filename, weak) {
	        filename = getBundledFileName(filename) || filename;

	        // Skip if already loaded / attempted
	        if (self.files.indexOf(filename) > -1)
	            return;
	        self.files.push(filename);

	        // Shortcut bundled definitions
	        if (filename in common) {
	            if (sync)
	                process(filename, common[filename]);
	            else {
	                ++queued;
	                setTimeout(function() {
	                    --queued;
	                    process(filename, common[filename]);
	                });
	            }
	            return;
	        }

	        // Otherwise fetch from disk or network
	        if (sync) {
	            var source;
	            try {
	                source = util.fs.readFileSync(filename).toString("utf8");
	            } catch (err) {
	                if (!weak)
	                    finish(err);
	                return;
	            }
	            process(filename, source);
	        } else {
	            ++queued;
	            self.fetch(filename, function(err, source) {
	                --queued;
	                /* istanbul ignore if */
	                if (!callback)
	                    return; // terminated meanwhile
	                if (err) {
	                    /* istanbul ignore else */
	                    if (!weak)
	                        finish(err);
	                    else if (!queued) // can't be covered reliably
	                        finish(null, self);
	                    return;
	                }
	                process(filename, source);
	            });
	        }
	    }
	    var queued = 0;

	    // Assembling the root namespace doesn't require working type
	    // references anymore, so we can load everything in parallel
	    if (util.isString(filename))
	        filename = [ filename ];
	    for (var i = 0, resolved; i < filename.length; ++i)
	        if (resolved = self.resolvePath("", filename[i]))
	            fetch(resolved);

	    if (sync)
	        return self;
	    if (!queued)
	        finish(null, self);
	    return undefined;
	};
	// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined

	/**
	 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
	 * @function Root#load
	 * @param {string|string[]} filename Names of one or multiple files to load
	 * @param {LoadCallback} callback Callback function
	 * @returns {undefined}
	 * @variation 2
	 */
	// function load(filename:string, callback:LoadCallback):undefined

	/**
	 * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.
	 * @function Root#load
	 * @param {string|string[]} filename Names of one or multiple files to load
	 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
	 * @returns {Promise<Root>} Promise
	 * @variation 3
	 */
	// function load(filename:string, [options:IParseOptions]):Promise<Root>

	/**
	 * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).
	 * @function Root#loadSync
	 * @param {string|string[]} filename Names of one or multiple files to load
	 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
	 * @returns {Root} Root namespace
	 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
	 */
	Root.prototype.loadSync = function loadSync(filename, options) {
	    if (!util.isNode)
	        throw Error("not supported");
	    return this.load(filename, options, SYNC);
	};

	/**
	 * @override
	 */
	Root.prototype.resolveAll = function resolveAll() {
	    if (this.deferred.length)
	        throw Error("unresolvable extensions: " + this.deferred.map(function(field) {
	            return "'extend " + field.extend + "' in " + field.parent.fullName;
	        }).join(", "));
	    return Namespace.prototype.resolveAll.call(this);
	};

	// only uppercased (and thus conflict-free) children are exposed, see below
	var exposeRe = /^[A-Z]/;

	/**
	 * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.
	 * @param {Root} root Root instance
	 * @param {Field} field Declaring extension field witin the declaring type
	 * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise
	 * @inner
	 * @ignore
	 */
	function tryHandleExtension(root, field) {
	    var extendedType = field.parent.lookup(field.extend);
	    if (extendedType) {
	        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);
	        //do not allow to extend same field twice to prevent the error
	        if (extendedType.get(sisterField.name)) {
	            return true;
	        }
	        sisterField.declaringField = field;
	        field.extensionField = sisterField;
	        extendedType.add(sisterField);
	        return true;
	    }
	    return false;
	}

	/**
	 * Called when any object is added to this root or its sub-namespaces.
	 * @param {ReflectionObject} object Object added
	 * @returns {undefined}
	 * @private
	 */
	Root.prototype._handleAdd = function _handleAdd(object) {
	    if (object instanceof Field) {

	        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)
	            if (!tryHandleExtension(this, object))
	                this.deferred.push(object);

	    } else if (object instanceof Enum) {

	        if (exposeRe.test(object.name))
	            object.parent[object.name] = object.values; // expose enum values as property of its parent

	    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {

	        if (object instanceof Type) // Try to handle any deferred extensions
	            for (var i = 0; i < this.deferred.length;)
	                if (tryHandleExtension(this, this.deferred[i]))
	                    this.deferred.splice(i, 1);
	                else
	                    ++i;
	        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace
	            this._handleAdd(object._nestedArray[j]);
	        if (exposeRe.test(object.name))
	            object.parent[object.name] = object; // expose namespace as property of its parent
	    }

	    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as
	    // properties of namespaces just like static code does. This allows using a .d.ts generated for
	    // a static module with reflection-based solutions where the condition is met.
	};

	/**
	 * Called when any object is removed from this root or its sub-namespaces.
	 * @param {ReflectionObject} object Object removed
	 * @returns {undefined}
	 * @private
	 */
	Root.prototype._handleRemove = function _handleRemove(object) {
	    if (object instanceof Field) {

	        if (/* an extension field */ object.extend !== undefined) {
	            if (/* already handled */ object.extensionField) { // remove its sister field
	                object.extensionField.parent.remove(object.extensionField);
	                object.extensionField = null;
	            } else { // cancel the extension
	                var index = this.deferred.indexOf(object);
	                /* istanbul ignore else */
	                if (index > -1)
	                    this.deferred.splice(index, 1);
	            }
	        }

	    } else if (object instanceof Enum) {

	        if (exposeRe.test(object.name))
	            delete object.parent[object.name]; // unexpose enum values

	    } else if (object instanceof Namespace) {

	        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace
	            this._handleRemove(object._nestedArray[i]);

	        if (exposeRe.test(object.name))
	            delete object.parent[object.name]; // unexpose namespaces

	    }
	};

	// Sets up cyclic dependencies (called in index-light)
	Root._configure = function(Type_, parse_, common_) {
	    Type   = Type_;
	    parse  = parse_;
	    common = common_;
	};
	return root;
}

var hasRequiredUtil$1;

function requireUtil$1 () {
	if (hasRequiredUtil$1) return util$2.exports;
	hasRequiredUtil$1 = 1;

	/**
	 * Various utility functions.
	 * @namespace
	 */
	var util = util$2.exports = requireMinimal();

	var roots = requireRoots();

	var Type, // cyclic
	    Enum;

	util.codegen = requireCodegen();
	util.fetch   = requireFetch();
	util.path    = requirePath();

	/**
	 * Node's fs module if available.
	 * @type {Object.<string,*>}
	 */
	util.fs = util.inquire("fs");

	/**
	 * Converts an object's values to an array.
	 * @param {Object.<string,*>} object Object to convert
	 * @returns {Array.<*>} Converted array
	 */
	util.toArray = function toArray(object) {
	    if (object) {
	        var keys  = Object.keys(object),
	            array = new Array(keys.length),
	            index = 0;
	        while (index < keys.length)
	            array[index] = object[keys[index++]];
	        return array;
	    }
	    return [];
	};

	/**
	 * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.
	 * @param {Array.<*>} array Array to convert
	 * @returns {Object.<string,*>} Converted object
	 */
	util.toObject = function toObject(array) {
	    var object = {},
	        index  = 0;
	    while (index < array.length) {
	        var key = array[index++],
	            val = array[index++];
	        if (val !== undefined)
	            object[key] = val;
	    }
	    return object;
	};

	var safePropBackslashRe = /\\/g,
	    safePropQuoteRe     = /"/g;

	/**
	 * Tests whether the specified name is a reserved word in JS.
	 * @param {string} name Name to test
	 * @returns {boolean} `true` if reserved, otherwise `false`
	 */
	util.isReserved = function isReserved(name) {
	    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);
	};

	/**
	 * Returns a safe property accessor for the specified property name.
	 * @param {string} prop Property name
	 * @returns {string} Safe accessor
	 */
	util.safeProp = function safeProp(prop) {
	    if (!/^[$\w_]+$/.test(prop) || util.isReserved(prop))
	        return "[\"" + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, "\\\"") + "\"]";
	    return "." + prop;
	};

	/**
	 * Converts the first character of a string to upper case.
	 * @param {string} str String to convert
	 * @returns {string} Converted string
	 */
	util.ucFirst = function ucFirst(str) {
	    return str.charAt(0).toUpperCase() + str.substring(1);
	};

	var camelCaseRe = /_([a-z])/g;

	/**
	 * Converts a string to camel case.
	 * @param {string} str String to convert
	 * @returns {string} Converted string
	 */
	util.camelCase = function camelCase(str) {
	    return str.substring(0, 1)
	         + str.substring(1)
	               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });
	};

	/**
	 * Compares reflected fields by id.
	 * @param {Field} a First field
	 * @param {Field} b Second field
	 * @returns {number} Comparison value
	 */
	util.compareFieldsById = function compareFieldsById(a, b) {
	    return a.id - b.id;
	};

	/**
	 * Decorator helper for types (TypeScript).
	 * @param {Constructor<T>} ctor Constructor function
	 * @param {string} [typeName] Type name, defaults to the constructor's name
	 * @returns {Type} Reflected type
	 * @template T extends Message<T>
	 * @property {Root} root Decorators root
	 */
	util.decorateType = function decorateType(ctor, typeName) {

	    /* istanbul ignore if */
	    if (ctor.$type) {
	        if (typeName && ctor.$type.name !== typeName) {
	            util.decorateRoot.remove(ctor.$type);
	            ctor.$type.name = typeName;
	            util.decorateRoot.add(ctor.$type);
	        }
	        return ctor.$type;
	    }

	    /* istanbul ignore next */
	    if (!Type)
	        Type = requireType();

	    var type = new Type(typeName || ctor.name);
	    util.decorateRoot.add(type);
	    type.ctor = ctor; // sets up .encode, .decode etc.
	    Object.defineProperty(ctor, "$type", { value: type, enumerable: false });
	    Object.defineProperty(ctor.prototype, "$type", { value: type, enumerable: false });
	    return type;
	};

	var decorateEnumIndex = 0;

	/**
	 * Decorator helper for enums (TypeScript).
	 * @param {Object} object Enum object
	 * @returns {Enum} Reflected enum
	 */
	util.decorateEnum = function decorateEnum(object) {

	    /* istanbul ignore if */
	    if (object.$type)
	        return object.$type;

	    /* istanbul ignore next */
	    if (!Enum)
	        Enum = require_enum();

	    var enm = new Enum("Enum" + decorateEnumIndex++, object);
	    util.decorateRoot.add(enm);
	    Object.defineProperty(object, "$type", { value: enm, enumerable: false });
	    return enm;
	};


	/**
	 * Sets the value of a property by property path. If a value already exists, it is turned to an array
	 * @param {Object.<string,*>} dst Destination object
	 * @param {string} path dot '.' delimited path of the property to set
	 * @param {Object} value the value to set
	 * @returns {Object.<string,*>} Destination object
	 */
	util.setProperty = function setProperty(dst, path, value) {
	    function setProp(dst, path, value) {
	        var part = path.shift();
	        if (part === "__proto__" || part === "prototype") {
	          return dst;
	        }
	        if (path.length > 0) {
	            dst[part] = setProp(dst[part] || {}, path, value);
	        } else {
	            var prevValue = dst[part];
	            if (prevValue)
	                value = [].concat(prevValue).concat(value);
	            dst[part] = value;
	        }
	        return dst;
	    }

	    if (typeof dst !== "object")
	        throw TypeError("dst must be an object");
	    if (!path)
	        throw TypeError("path must be specified");

	    path = path.split(".");
	    return setProp(dst, path, value);
	};

	/**
	 * Decorator root (TypeScript).
	 * @name util.decorateRoot
	 * @type {Root}
	 * @readonly
	 */
	Object.defineProperty(util, "decorateRoot", {
	    get: function() {
	        return roots["decorated"] || (roots["decorated"] = new (requireRoot())());
	    }
	});
	return util$2.exports;
}

var object;
var hasRequiredObject;

function requireObject () {
	if (hasRequiredObject) return object;
	hasRequiredObject = 1;
	object = ReflectionObject;

	ReflectionObject.className = "ReflectionObject";

	var util = requireUtil$1();

	var Root; // cyclic

	/**
	 * Constructs a new reflection object instance.
	 * @classdesc Base class of all reflection objects.
	 * @constructor
	 * @param {string} name Object name
	 * @param {Object.<string,*>} [options] Declared options
	 * @abstract
	 */
	function ReflectionObject(name, options) {

	    if (!util.isString(name))
	        throw TypeError("name must be a string");

	    if (options && !util.isObject(options))
	        throw TypeError("options must be an object");

	    /**
	     * Options.
	     * @type {Object.<string,*>|undefined}
	     */
	    this.options = options; // toJSON

	    /**
	     * Parsed Options.
	     * @type {Array.<Object.<string,*>>|undefined}
	     */
	    this.parsedOptions = null;

	    /**
	     * Unique name within its namespace.
	     * @type {string}
	     */
	    this.name = name;

	    /**
	     * Parent namespace.
	     * @type {Namespace|null}
	     */
	    this.parent = null;

	    /**
	     * Whether already resolved or not.
	     * @type {boolean}
	     */
	    this.resolved = false;

	    /**
	     * Comment text, if any.
	     * @type {string|null}
	     */
	    this.comment = null;

	    /**
	     * Defining file name.
	     * @type {string|null}
	     */
	    this.filename = null;
	}

	Object.defineProperties(ReflectionObject.prototype, {

	    /**
	     * Reference to the root namespace.
	     * @name ReflectionObject#root
	     * @type {Root}
	     * @readonly
	     */
	    root: {
	        get: function() {
	            var ptr = this;
	            while (ptr.parent !== null)
	                ptr = ptr.parent;
	            return ptr;
	        }
	    },

	    /**
	     * Full name including leading dot.
	     * @name ReflectionObject#fullName
	     * @type {string}
	     * @readonly
	     */
	    fullName: {
	        get: function() {
	            var path = [ this.name ],
	                ptr = this.parent;
	            while (ptr) {
	                path.unshift(ptr.name);
	                ptr = ptr.parent;
	            }
	            return path.join(".");
	        }
	    }
	});

	/**
	 * Converts this reflection object to its descriptor representation.
	 * @returns {Object.<string,*>} Descriptor
	 * @abstract
	 */
	ReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {
	    throw Error(); // not implemented, shouldn't happen
	};

	/**
	 * Called when this object is added to a parent.
	 * @param {ReflectionObject} parent Parent added to
	 * @returns {undefined}
	 */
	ReflectionObject.prototype.onAdd = function onAdd(parent) {
	    if (this.parent && this.parent !== parent)
	        this.parent.remove(this);
	    this.parent = parent;
	    this.resolved = false;
	    var root = parent.root;
	    if (root instanceof Root)
	        root._handleAdd(this);
	};

	/**
	 * Called when this object is removed from a parent.
	 * @param {ReflectionObject} parent Parent removed from
	 * @returns {undefined}
	 */
	ReflectionObject.prototype.onRemove = function onRemove(parent) {
	    var root = parent.root;
	    if (root instanceof Root)
	        root._handleRemove(this);
	    this.parent = null;
	    this.resolved = false;
	};

	/**
	 * Resolves this objects type references.
	 * @returns {ReflectionObject} `this`
	 */
	ReflectionObject.prototype.resolve = function resolve() {
	    if (this.resolved)
	        return this;
	    if (this.root instanceof Root)
	        this.resolved = true; // only if part of a root
	    return this;
	};

	/**
	 * Gets an option value.
	 * @param {string} name Option name
	 * @returns {*} Option value or `undefined` if not set
	 */
	ReflectionObject.prototype.getOption = function getOption(name) {
	    if (this.options)
	        return this.options[name];
	    return undefined;
	};

	/**
	 * Sets an option.
	 * @param {string} name Option name
	 * @param {*} value Option value
	 * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set
	 * @returns {ReflectionObject} `this`
	 */
	ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {
	    if (!ifNotSet || !this.options || this.options[name] === undefined)
	        (this.options || (this.options = {}))[name] = value;
	    return this;
	};

	/**
	 * Sets a parsed option.
	 * @param {string} name parsed Option name
	 * @param {*} value Option value
	 * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\empty, will add a new option with that value
	 * @returns {ReflectionObject} `this`
	 */
	ReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {
	    if (!this.parsedOptions) {
	        this.parsedOptions = [];
	    }
	    var parsedOptions = this.parsedOptions;
	    if (propName) {
	        // If setting a sub property of an option then try to merge it
	        // with an existing option
	        var opt = parsedOptions.find(function (opt) {
	            return Object.prototype.hasOwnProperty.call(opt, name);
	        });
	        if (opt) {
	            // If we found an existing option - just merge the property value
	            var newValue = opt[name];
	            util.setProperty(newValue, propName, value);
	        } else {
	            // otherwise, create a new option, set it's property and add it to the list
	            opt = {};
	            opt[name] = util.setProperty({}, propName, value);
	            parsedOptions.push(opt);
	        }
	    } else {
	        // Always create a new option when setting the value of the option itself
	        var newOpt = {};
	        newOpt[name] = value;
	        parsedOptions.push(newOpt);
	    }
	    return this;
	};

	/**
	 * Sets multiple options.
	 * @param {Object.<string,*>} options Options to set
	 * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set
	 * @returns {ReflectionObject} `this`
	 */
	ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {
	    if (options)
	        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)
	            this.setOption(keys[i], options[keys[i]], ifNotSet);
	    return this;
	};

	/**
	 * Converts this instance to its string representation.
	 * @returns {string} Class name[, space, full name]
	 */
	ReflectionObject.prototype.toString = function toString() {
	    var className = this.constructor.className,
	        fullName  = this.fullName;
	    if (fullName.length)
	        return className + " " + fullName;
	    return className;
	};

	// Sets up cyclic dependencies (called in index-light)
	ReflectionObject._configure = function(Root_) {
	    Root = Root_;
	};
	return object;
}

var _enum;
var hasRequired_enum;

function require_enum () {
	if (hasRequired_enum) return _enum;
	hasRequired_enum = 1;
	_enum = Enum;

	// extends ReflectionObject
	var ReflectionObject = requireObject();
	((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = "Enum";

	var Namespace = requireNamespace(),
	    util = requireUtil$1();

	/**
	 * Constructs a new enum instance.
	 * @classdesc Reflected enum.
	 * @extends ReflectionObject
	 * @constructor
	 * @param {string} name Unique name within its namespace
	 * @param {Object.<string,number>} [values] Enum values as an object, by name
	 * @param {Object.<string,*>} [options] Declared options
	 * @param {string} [comment] The comment for this enum
	 * @param {Object.<string,string>} [comments] The value comments for this enum
	 * @param {Object.<string,Object<string,*>>|undefined} [valuesOptions] The value options for this enum
	 */
	function Enum(name, values, options, comment, comments, valuesOptions) {
	    ReflectionObject.call(this, name, options);

	    if (values && typeof values !== "object")
	        throw TypeError("values must be an object");

	    /**
	     * Enum values by id.
	     * @type {Object.<number,string>}
	     */
	    this.valuesById = {};

	    /**
	     * Enum values by name.
	     * @type {Object.<string,number>}
	     */
	    this.values = Object.create(this.valuesById); // toJSON, marker

	    /**
	     * Enum comment text.
	     * @type {string|null}
	     */
	    this.comment = comment;

	    /**
	     * Value comment texts, if any.
	     * @type {Object.<string,string>}
	     */
	    this.comments = comments || {};

	    /**
	     * Values options, if any
	     * @type {Object<string, Object<string, *>>|undefined}
	     */
	    this.valuesOptions = valuesOptions;

	    /**
	     * Reserved ranges, if any.
	     * @type {Array.<number[]|string>}
	     */
	    this.reserved = undefined; // toJSON

	    // Note that values inherit valuesById on their prototype which makes them a TypeScript-
	    // compatible enum. This is used by pbts to write actual enum definitions that work for
	    // static and reflection code alike instead of emitting generic object definitions.

	    if (values)
	        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)
	            if (typeof values[keys[i]] === "number") // use forward entries only
	                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];
	}

	/**
	 * Enum descriptor.
	 * @interface IEnum
	 * @property {Object.<string,number>} values Enum values
	 * @property {Object.<string,*>} [options] Enum options
	 */

	/**
	 * Constructs an enum from an enum descriptor.
	 * @param {string} name Enum name
	 * @param {IEnum} json Enum descriptor
	 * @returns {Enum} Created enum
	 * @throws {TypeError} If arguments are invalid
	 */
	Enum.fromJSON = function fromJSON(name, json) {
	    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);
	    enm.reserved = json.reserved;
	    return enm;
	};

	/**
	 * Converts this enum to an enum descriptor.
	 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
	 * @returns {IEnum} Enum descriptor
	 */
	Enum.prototype.toJSON = function toJSON(toJSONOptions) {
	    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
	    return util.toObject([
	        "options"       , this.options,
	        "valuesOptions" , this.valuesOptions,
	        "values"        , this.values,
	        "reserved"      , this.reserved && this.reserved.length ? this.reserved : undefined,
	        "comment"       , keepComments ? this.comment : undefined,
	        "comments"      , keepComments ? this.comments : undefined
	    ]);
	};

	/**
	 * Adds a value to this enum.
	 * @param {string} name Value name
	 * @param {number} id Value id
	 * @param {string} [comment] Comment, if any
	 * @param {Object.<string, *>|undefined} [options] Options, if any
	 * @returns {Enum} `this`
	 * @throws {TypeError} If arguments are invalid
	 * @throws {Error} If there is already a value with this name or id
	 */
	Enum.prototype.add = function add(name, id, comment, options) {
	    // utilized by the parser but not by .fromJSON

	    if (!util.isString(name))
	        throw TypeError("name must be a string");

	    if (!util.isInteger(id))
	        throw TypeError("id must be an integer");

	    if (this.values[name] !== undefined)
	        throw Error("duplicate name '" + name + "' in " + this);

	    if (this.isReservedId(id))
	        throw Error("id " + id + " is reserved in " + this);

	    if (this.isReservedName(name))
	        throw Error("name '" + name + "' is reserved in " + this);

	    if (this.valuesById[id] !== undefined) {
	        if (!(this.options && this.options.allow_alias))
	            throw Error("duplicate id " + id + " in " + this);
	        this.values[name] = id;
	    } else
	        this.valuesById[this.values[name] = id] = name;

	    if (options) {
	        if (this.valuesOptions === undefined)
	            this.valuesOptions = {};
	        this.valuesOptions[name] = options || null;
	    }

	    this.comments[name] = comment || null;
	    return this;
	};

	/**
	 * Removes a value from this enum
	 * @param {string} name Value name
	 * @returns {Enum} `this`
	 * @throws {TypeError} If arguments are invalid
	 * @throws {Error} If `name` is not a name of this enum
	 */
	Enum.prototype.remove = function remove(name) {

	    if (!util.isString(name))
	        throw TypeError("name must be a string");

	    var val = this.values[name];
	    if (val == null)
	        throw Error("name '" + name + "' does not exist in " + this);

	    delete this.valuesById[val];
	    delete this.values[name];
	    delete this.comments[name];
	    if (this.valuesOptions)
	        delete this.valuesOptions[name];

	    return this;
	};

	/**
	 * Tests if the specified id is reserved.
	 * @param {number} id Id to test
	 * @returns {boolean} `true` if reserved, otherwise `false`
	 */
	Enum.prototype.isReservedId = function isReservedId(id) {
	    return Namespace.isReservedId(this.reserved, id);
	};

	/**
	 * Tests if the specified name is reserved.
	 * @param {string} name Name to test
	 * @returns {boolean} `true` if reserved, otherwise `false`
	 */
	Enum.prototype.isReservedName = function isReservedName(name) {
	    return Namespace.isReservedName(this.reserved, name);
	};
	return _enum;
}

var encoder_1;
var hasRequiredEncoder;

function requireEncoder () {
	if (hasRequiredEncoder) return encoder_1;
	hasRequiredEncoder = 1;
	encoder_1 = encoder;

	var Enum     = require_enum(),
	    types    = requireTypes(),
	    util     = requireUtil$1();

	/**
	 * Generates a partial message type encoder.
	 * @param {Codegen} gen Codegen instance
	 * @param {Field} field Reflected field
	 * @param {number} fieldIndex Field index
	 * @param {string} ref Variable reference
	 * @returns {Codegen} Codegen instance
	 * @ignore
	 */
	function genTypePartial(gen, field, fieldIndex, ref) {
	    return field.resolvedType.group
	        ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)
	        : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field.id << 3 | 2) >>> 0);
	}

	/**
	 * Generates an encoder specific to the specified message type.
	 * @param {Type} mtype Message type
	 * @returns {Codegen} Codegen instance
	 */
	function encoder(mtype) {
	    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
	    var gen = util.codegen(["m", "w"], mtype.name + "$encode")
	    ("if(!w)")
	        ("w=Writer.create()");

	    var i, ref;

	    // "when a message is serialized its known fields should be written sequentially by field number"
	    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);

	    for (var i = 0; i < fields.length; ++i) {
	        var field    = fields[i].resolve(),
	            index    = mtype._fieldsArray.indexOf(field),
	            type     = field.resolvedType instanceof Enum ? "int32" : field.type,
	            wireType = types.basic[type];
	            ref      = "m" + util.safeProp(field.name);

	        // Map fields
	        if (field.map) {
	            gen
	    ("if(%s!=null&&Object.hasOwnProperty.call(m,%j)){", ref, field.name) // !== undefined && !== null
	        ("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)
	            ("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);
	            if (wireType === undefined) gen
	            ("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index, ref); // can't be groups
	            else gen
	            (".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type, ref);
	            gen
	        ("}")
	    ("}");

	            // Repeated fields
	        } else if (field.repeated) { gen
	    ("if(%s!=null&&%s.length){", ref, ref); // !== undefined && !== null

	            // Packed repeated
	            if (field.packed && types.packed[type] !== undefined) { gen

	        ("w.uint32(%i).fork()", (field.id << 3 | 2) >>> 0)
	        ("for(var i=0;i<%s.length;++i)", ref)
	            ("w.%s(%s[i])", type, ref)
	        ("w.ldelim()");

	            // Non-packed
	            } else { gen

	        ("for(var i=0;i<%s.length;++i)", ref);
	                if (wireType === undefined)
	            genTypePartial(gen, field, index, ref + "[i]");
	                else gen
	            ("w.uint32(%i).%s(%s[i])", (field.id << 3 | wireType) >>> 0, type, ref);

	            } gen
	    ("}");

	        // Non-repeated
	        } else {
	            if (field.optional) gen
	    ("if(%s!=null&&Object.hasOwnProperty.call(m,%j))", ref, field.name); // !== undefined && !== null

	            if (wireType === undefined)
	        genTypePartial(gen, field, index, ref);
	            else gen
	        ("w.uint32(%i).%s(%s)", (field.id << 3 | wireType) >>> 0, type, ref);

	        }
	    }

	    return gen
	    ("return w");
	    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
	}
	return encoder_1;
}

var hasRequiredIndexLight;

function requireIndexLight () {
	if (hasRequiredIndexLight) return indexLight.exports;
	hasRequiredIndexLight = 1;
	var protobuf = indexLight.exports = requireIndexMinimal();

	protobuf.build = "light";

	/**
	 * A node-style callback as used by {@link load} and {@link Root#load}.
	 * @typedef LoadCallback
	 * @type {function}
	 * @param {Error|null} error Error, if any, otherwise `null`
	 * @param {Root} [root] Root, if there hasn't been an error
	 * @returns {undefined}
	 */

	/**
	 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
	 * @param {string|string[]} filename One or multiple files to load
	 * @param {Root} root Root namespace, defaults to create a new one if omitted.
	 * @param {LoadCallback} callback Callback function
	 * @returns {undefined}
	 * @see {@link Root#load}
	 */
	function load(filename, root, callback) {
	    if (typeof root === "function") {
	        callback = root;
	        root = new protobuf.Root();
	    } else if (!root)
	        root = new protobuf.Root();
	    return root.load(filename, callback);
	}

	/**
	 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
	 * @name load
	 * @function
	 * @param {string|string[]} filename One or multiple files to load
	 * @param {LoadCallback} callback Callback function
	 * @returns {undefined}
	 * @see {@link Root#load}
	 * @variation 2
	 */
	// function load(filename:string, callback:LoadCallback):undefined

	/**
	 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.
	 * @name load
	 * @function
	 * @param {string|string[]} filename One or multiple files to load
	 * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
	 * @returns {Promise<Root>} Promise
	 * @see {@link Root#load}
	 * @variation 3
	 */
	// function load(filename:string, [root:Root]):Promise<Root>

	protobuf.load = load;

	/**
	 * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).
	 * @param {string|string[]} filename One or multiple files to load
	 * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
	 * @returns {Root} Root namespace
	 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
	 * @see {@link Root#loadSync}
	 */
	function loadSync(filename, root) {
	    if (!root)
	        root = new protobuf.Root();
	    return root.loadSync(filename);
	}

	protobuf.loadSync = loadSync;

	// Serialization
	protobuf.encoder          = requireEncoder();
	protobuf.decoder          = requireDecoder();
	protobuf.verifier         = requireVerifier();
	protobuf.converter        = requireConverter();

	// Reflection
	protobuf.ReflectionObject = requireObject();
	protobuf.Namespace        = requireNamespace();
	protobuf.Root             = requireRoot();
	protobuf.Enum             = require_enum();
	protobuf.Type             = requireType();
	protobuf.Field            = requireField();
	protobuf.OneOf            = requireOneof();
	protobuf.MapField         = requireMapfield();
	protobuf.Service          = requireService();
	protobuf.Method           = requireMethod();

	// Runtime
	protobuf.Message          = requireMessage();
	protobuf.wrappers         = requireWrappers();

	// Utility
	protobuf.types            = requireTypes();
	protobuf.util             = requireUtil$1();

	// Set up possibly cyclic reflection dependencies
	protobuf.ReflectionObject._configure(protobuf.Root);
	protobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);
	protobuf.Root._configure(protobuf.Type);
	protobuf.Field._configure(protobuf.Type);
	return indexLight.exports;
}

var tokenize_1;
var hasRequiredTokenize;

function requireTokenize () {
	if (hasRequiredTokenize) return tokenize_1;
	hasRequiredTokenize = 1;
	tokenize_1 = tokenize;

	var delimRe        = /[\s{}=;:[\],'"()<>]/g,
	    stringDoubleRe = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g,
	    stringSingleRe = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g;

	var setCommentRe = /^ *[*/]+ */,
	    setCommentAltRe = /^\s*\*?\/*/,
	    setCommentSplitRe = /\n/g,
	    whitespaceRe = /\s/,
	    unescapeRe = /\\(.?)/g;

	var unescapeMap = {
	    "0": "\0",
	    "r": "\r",
	    "n": "\n",
	    "t": "\t"
	};

	/**
	 * Unescapes a string.
	 * @param {string} str String to unescape
	 * @returns {string} Unescaped string
	 * @property {Object.<string,string>} map Special characters map
	 * @memberof tokenize
	 */
	function unescape(str) {
	    return str.replace(unescapeRe, function($0, $1) {
	        switch ($1) {
	            case "\\":
	            case "":
	                return $1;
	            default:
	                return unescapeMap[$1] || "";
	        }
	    });
	}

	tokenize.unescape = unescape;

	/**
	 * Gets the next token and advances.
	 * @typedef TokenizerHandleNext
	 * @type {function}
	 * @returns {string|null} Next token or `null` on eof
	 */

	/**
	 * Peeks for the next token.
	 * @typedef TokenizerHandlePeek
	 * @type {function}
	 * @returns {string|null} Next token or `null` on eof
	 */

	/**
	 * Pushes a token back to the stack.
	 * @typedef TokenizerHandlePush
	 * @type {function}
	 * @param {string} token Token
	 * @returns {undefined}
	 */

	/**
	 * Skips the next token.
	 * @typedef TokenizerHandleSkip
	 * @type {function}
	 * @param {string} expected Expected token
	 * @param {boolean} [optional=false] If optional
	 * @returns {boolean} Whether the token matched
	 * @throws {Error} If the token didn't match and is not optional
	 */

	/**
	 * Gets the comment on the previous line or, alternatively, the line comment on the specified line.
	 * @typedef TokenizerHandleCmnt
	 * @type {function}
	 * @param {number} [line] Line number
	 * @returns {string|null} Comment text or `null` if none
	 */

	/**
	 * Handle object returned from {@link tokenize}.
	 * @interface ITokenizerHandle
	 * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)
	 * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)
	 * @property {TokenizerHandlePush} push Pushes a token back to the stack
	 * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws
	 * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any
	 * @property {number} line Current line number
	 */

	/**
	 * Tokenizes the given .proto source and returns an object with useful utility functions.
	 * @param {string} source Source contents
	 * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.
	 * @returns {ITokenizerHandle} Tokenizer handle
	 */
	function tokenize(source, alternateCommentMode) {
	    /* eslint-disable callback-return */
	    source = source.toString();

	    var offset = 0,
	        length = source.length,
	        line = 1,
	        lastCommentLine = 0,
	        comments = {};

	    var stack = [];

	    var stringDelim = null;

	    /* istanbul ignore next */
	    /**
	     * Creates an error for illegal syntax.
	     * @param {string} subject Subject
	     * @returns {Error} Error created
	     * @inner
	     */
	    function illegal(subject) {
	        return Error("illegal " + subject + " (line " + line + ")");
	    }

	    /**
	     * Reads a string till its end.
	     * @returns {string} String read
	     * @inner
	     */
	    function readString() {
	        var re = stringDelim === "'" ? stringSingleRe : stringDoubleRe;
	        re.lastIndex = offset - 1;
	        var match = re.exec(source);
	        if (!match)
	            throw illegal("string");
	        offset = re.lastIndex;
	        push(stringDelim);
	        stringDelim = null;
	        return unescape(match[1]);
	    }

	    /**
	     * Gets the character at `pos` within the source.
	     * @param {number} pos Position
	     * @returns {string} Character
	     * @inner
	     */
	    function charAt(pos) {
	        return source.charAt(pos);
	    }

	    /**
	     * Sets the current comment text.
	     * @param {number} start Start offset
	     * @param {number} end End offset
	     * @param {boolean} isLeading set if a leading comment
	     * @returns {undefined}
	     * @inner
	     */
	    function setComment(start, end, isLeading) {
	        var comment = {
	            type: source.charAt(start++),
	            lineEmpty: false,
	            leading: isLeading,
	        };
	        var lookback;
	        if (alternateCommentMode) {
	            lookback = 2;  // alternate comment parsing: "//" or "/*"
	        } else {
	            lookback = 3;  // "///" or "/**"
	        }
	        var commentOffset = start - lookback,
	            c;
	        do {
	            if (--commentOffset < 0 ||
	                    (c = source.charAt(commentOffset)) === "\n") {
	                comment.lineEmpty = true;
	                break;
	            }
	        } while (c === " " || c === "\t");
	        var lines = source
	            .substring(start, end)
	            .split(setCommentSplitRe);
	        for (var i = 0; i < lines.length; ++i)
	            lines[i] = lines[i]
	                .replace(alternateCommentMode ? setCommentAltRe : setCommentRe, "")
	                .trim();
	        comment.text = lines
	            .join("\n")
	            .trim();

	        comments[line] = comment;
	        lastCommentLine = line;
	    }

	    function isDoubleSlashCommentLine(startOffset) {
	        var endOffset = findEndOfLine(startOffset);

	        // see if remaining line matches comment pattern
	        var lineText = source.substring(startOffset, endOffset);
	        var isComment = /^\s*\/\//.test(lineText);
	        return isComment;
	    }

	    function findEndOfLine(cursor) {
	        // find end of cursor's line
	        var endOffset = cursor;
	        while (endOffset < length && charAt(endOffset) !== "\n") {
	            endOffset++;
	        }
	        return endOffset;
	    }

	    /**
	     * Obtains the next token.
	     * @returns {string|null} Next token or `null` on eof
	     * @inner
	     */
	    function next() {
	        if (stack.length > 0)
	            return stack.shift();
	        if (stringDelim)
	            return readString();
	        var repeat,
	            prev,
	            curr,
	            start,
	            isDoc,
	            isLeadingComment = offset === 0;
	        do {
	            if (offset === length)
	                return null;
	            repeat = false;
	            while (whitespaceRe.test(curr = charAt(offset))) {
	                if (curr === "\n") {
	                    isLeadingComment = true;
	                    ++line;
	                }
	                if (++offset === length)
	                    return null;
	            }

	            if (charAt(offset) === "/") {
	                if (++offset === length) {
	                    throw illegal("comment");
	                }
	                if (charAt(offset) === "/") { // Line
	                    if (!alternateCommentMode) {
	                        // check for triple-slash comment
	                        isDoc = charAt(start = offset + 1) === "/";

	                        while (charAt(++offset) !== "\n") {
	                            if (offset === length) {
	                                return null;
	                            }
	                        }
	                        ++offset;
	                        if (isDoc) {
	                            setComment(start, offset - 1, isLeadingComment);
	                            // Trailing comment cannot not be multi-line,
	                            // so leading comment state should be reset to handle potential next comments
	                            isLeadingComment = true;
	                        }
	                        ++line;
	                        repeat = true;
	                    } else {
	                        // check for double-slash comments, consolidating consecutive lines
	                        start = offset;
	                        isDoc = false;
	                        if (isDoubleSlashCommentLine(offset - 1)) {
	                            isDoc = true;
	                            do {
	                                offset = findEndOfLine(offset);
	                                if (offset === length) {
	                                    break;
	                                }
	                                offset++;
	                                if (!isLeadingComment) {
	                                    // Trailing comment cannot not be multi-line
	                                    break;
	                                }
	                            } while (isDoubleSlashCommentLine(offset));
	                        } else {
	                            offset = Math.min(length, findEndOfLine(offset) + 1);
	                        }
	                        if (isDoc) {
	                            setComment(start, offset, isLeadingComment);
	                            isLeadingComment = true;
	                        }
	                        line++;
	                        repeat = true;
	                    }
	                } else if ((curr = charAt(offset)) === "*") { /* Block */
	                    // check for /** (regular comment mode) or /* (alternate comment mode)
	                    start = offset + 1;
	                    isDoc = alternateCommentMode || charAt(start) === "*";
	                    do {
	                        if (curr === "\n") {
	                            ++line;
	                        }
	                        if (++offset === length) {
	                            throw illegal("comment");
	                        }
	                        prev = curr;
	                        curr = charAt(offset);
	                    } while (prev !== "*" || curr !== "/");
	                    ++offset;
	                    if (isDoc) {
	                        setComment(start, offset - 2, isLeadingComment);
	                        isLeadingComment = true;
	                    }
	                    repeat = true;
	                } else {
	                    return "/";
	                }
	            }
	        } while (repeat);

	        // offset !== length if we got here

	        var end = offset;
	        delimRe.lastIndex = 0;
	        var delim = delimRe.test(charAt(end++));
	        if (!delim)
	            while (end < length && !delimRe.test(charAt(end)))
	                ++end;
	        var token = source.substring(offset, offset = end);
	        if (token === "\"" || token === "'")
	            stringDelim = token;
	        return token;
	    }

	    /**
	     * Pushes a token back to the stack.
	     * @param {string} token Token
	     * @returns {undefined}
	     * @inner
	     */
	    function push(token) {
	        stack.push(token);
	    }

	    /**
	     * Peeks for the next token.
	     * @returns {string|null} Token or `null` on eof
	     * @inner
	     */
	    function peek() {
	        if (!stack.length) {
	            var token = next();
	            if (token === null)
	                return null;
	            push(token);
	        }
	        return stack[0];
	    }

	    /**
	     * Skips a token.
	     * @param {string} expected Expected token
	     * @param {boolean} [optional=false] Whether the token is optional
	     * @returns {boolean} `true` when skipped, `false` if not
	     * @throws {Error} When a required token is not present
	     * @inner
	     */
	    function skip(expected, optional) {
	        var actual = peek(),
	            equals = actual === expected;
	        if (equals) {
	            next();
	            return true;
	        }
	        if (!optional)
	            throw illegal("token '" + actual + "', '" + expected + "' expected");
	        return false;
	    }

	    /**
	     * Gets a comment.
	     * @param {number} [trailingLine] Line number if looking for a trailing comment
	     * @returns {string|null} Comment text
	     * @inner
	     */
	    function cmnt(trailingLine) {
	        var ret = null;
	        var comment;
	        if (trailingLine === undefined) {
	            comment = comments[line - 1];
	            delete comments[line - 1];
	            if (comment && (alternateCommentMode || comment.type === "*" || comment.lineEmpty)) {
	                ret = comment.leading ? comment.text : null;
	            }
	        } else {
	            /* istanbul ignore else */
	            if (lastCommentLine < trailingLine) {
	                peek();
	            }
	            comment = comments[trailingLine];
	            delete comments[trailingLine];
	            if (comment && !comment.lineEmpty && (alternateCommentMode || comment.type === "/")) {
	                ret = comment.leading ? null : comment.text;
	            }
	        }
	        return ret;
	    }

	    return Object.defineProperty({
	        next: next,
	        peek: peek,
	        push: push,
	        skip: skip,
	        cmnt: cmnt
	    }, "line", {
	        get: function() { return line; }
	    });
	    /* eslint-enable callback-return */
	}
	return tokenize_1;
}

var parse_1;
var hasRequiredParse;

function requireParse () {
	if (hasRequiredParse) return parse_1;
	hasRequiredParse = 1;
	parse_1 = parse;

	parse.filename = null;
	parse.defaults = { keepCase: false };

	var tokenize  = requireTokenize(),
	    Root      = requireRoot(),
	    Type      = requireType(),
	    Field     = requireField(),
	    MapField  = requireMapfield(),
	    OneOf     = requireOneof(),
	    Enum      = require_enum(),
	    Service   = requireService(),
	    Method    = requireMethod(),
	    types     = requireTypes(),
	    util      = requireUtil$1();

	var base10Re    = /^[1-9][0-9]*$/,
	    base10NegRe = /^-?[1-9][0-9]*$/,
	    base16Re    = /^0[x][0-9a-fA-F]+$/,
	    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,
	    base8Re     = /^0[0-7]+$/,
	    base8NegRe  = /^-?0[0-7]+$/,
	    numberRe    = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,
	    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,
	    typeRefRe   = /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,
	    fqTypeRefRe = /^(?:\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;

	/**
	 * Result object returned from {@link parse}.
	 * @interface IParserResult
	 * @property {string|undefined} package Package name, if declared
	 * @property {string[]|undefined} imports Imports, if any
	 * @property {string[]|undefined} weakImports Weak imports, if any
	 * @property {string|undefined} syntax Syntax, if specified (either `"proto2"` or `"proto3"`)
	 * @property {Root} root Populated root instance
	 */

	/**
	 * Options modifying the behavior of {@link parse}.
	 * @interface IParseOptions
	 * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case
	 * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.
	 * @property {boolean} [preferTrailingComment=false] Use trailing comment when both leading comment and trailing comment exist.
	 */

	/**
	 * Options modifying the behavior of JSON serialization.
	 * @interface IToJSONOptions
	 * @property {boolean} [keepComments=false] Serializes comments.
	 */

	/**
	 * Parses the given .proto source and returns an object with the parsed contents.
	 * @param {string} source Source contents
	 * @param {Root} root Root to populate
	 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
	 * @returns {IParserResult} Parser result
	 * @property {string} filename=null Currently processing file name for error reporting, if known
	 * @property {IParseOptions} defaults Default {@link IParseOptions}
	 */
	function parse(source, root, options) {
	    /* eslint-disable callback-return */
	    if (!(root instanceof Root)) {
	        options = root;
	        root = new Root();
	    }
	    if (!options)
	        options = parse.defaults;

	    var preferTrailingComment = options.preferTrailingComment || false;
	    var tn = tokenize(source, options.alternateCommentMode || false),
	        next = tn.next,
	        push = tn.push,
	        peek = tn.peek,
	        skip = tn.skip,
	        cmnt = tn.cmnt;

	    var head = true,
	        pkg,
	        imports,
	        weakImports,
	        syntax,
	        isProto3 = false;

	    var ptr = root;

	    var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;

	    /* istanbul ignore next */
	    function illegal(token, name, insideTryCatch) {
	        var filename = parse.filename;
	        if (!insideTryCatch)
	            parse.filename = null;
	        return Error("illegal " + (name || "token") + " '" + token + "' (" + (filename ? filename + ", " : "") + "line " + tn.line + ")");
	    }

	    function readString() {
	        var values = [],
	            token;
	        do {
	            /* istanbul ignore if */
	            if ((token = next()) !== "\"" && token !== "'")
	                throw illegal(token);

	            values.push(next());
	            skip(token);
	            token = peek();
	        } while (token === "\"" || token === "'");
	        return values.join("");
	    }

	    function readValue(acceptTypeRef) {
	        var token = next();
	        switch (token) {
	            case "'":
	            case "\"":
	                push(token);
	                return readString();
	            case "true": case "TRUE":
	                return true;
	            case "false": case "FALSE":
	                return false;
	        }
	        try {
	            return parseNumber(token, /* insideTryCatch */ true);
	        } catch (e) {

	            /* istanbul ignore else */
	            if (acceptTypeRef && typeRefRe.test(token))
	                return token;

	            /* istanbul ignore next */
	            throw illegal(token, "value");
	        }
	    }

	    function readRanges(target, acceptStrings) {
	        var token, start;
	        do {
	            if (acceptStrings && ((token = peek()) === "\"" || token === "'"))
	                target.push(readString());
	            else
	                target.push([ start = parseId(next()), skip("to", true) ? parseId(next()) : start ]);
	        } while (skip(",", true));
	        skip(";");
	    }

	    function parseNumber(token, insideTryCatch) {
	        var sign = 1;
	        if (token.charAt(0) === "-") {
	            sign = -1;
	            token = token.substring(1);
	        }
	        switch (token) {
	            case "inf": case "INF": case "Inf":
	                return sign * Infinity;
	            case "nan": case "NAN": case "Nan": case "NaN":
	                return NaN;
	            case "0":
	                return 0;
	        }
	        if (base10Re.test(token))
	            return sign * parseInt(token, 10);
	        if (base16Re.test(token))
	            return sign * parseInt(token, 16);
	        if (base8Re.test(token))
	            return sign * parseInt(token, 8);

	        /* istanbul ignore else */
	        if (numberRe.test(token))
	            return sign * parseFloat(token);

	        /* istanbul ignore next */
	        throw illegal(token, "number", insideTryCatch);
	    }

	    function parseId(token, acceptNegative) {
	        switch (token) {
	            case "max": case "MAX": case "Max":
	                return 536870911;
	            case "0":
	                return 0;
	        }

	        /* istanbul ignore if */
	        if (!acceptNegative && token.charAt(0) === "-")
	            throw illegal(token, "id");

	        if (base10NegRe.test(token))
	            return parseInt(token, 10);
	        if (base16NegRe.test(token))
	            return parseInt(token, 16);

	        /* istanbul ignore else */
	        if (base8NegRe.test(token))
	            return parseInt(token, 8);

	        /* istanbul ignore next */
	        throw illegal(token, "id");
	    }

	    function parsePackage() {

	        /* istanbul ignore if */
	        if (pkg !== undefined)
	            throw illegal("package");

	        pkg = next();

	        /* istanbul ignore if */
	        if (!typeRefRe.test(pkg))
	            throw illegal(pkg, "name");

	        ptr = ptr.define(pkg);
	        skip(";");
	    }

	    function parseImport() {
	        var token = peek();
	        var whichImports;
	        switch (token) {
	            case "weak":
	                whichImports = weakImports || (weakImports = []);
	                next();
	                break;
	            case "public":
	                next();
	                // eslint-disable-next-line no-fallthrough
	            default:
	                whichImports = imports || (imports = []);
	                break;
	        }
	        token = readString();
	        skip(";");
	        whichImports.push(token);
	    }

	    function parseSyntax() {
	        skip("=");
	        syntax = readString();
	        isProto3 = syntax === "proto3";

	        /* istanbul ignore if */
	        if (!isProto3 && syntax !== "proto2")
	            throw illegal(syntax, "syntax");

	        skip(";");
	    }

	    function parseCommon(parent, token) {
	        switch (token) {

	            case "option":
	                parseOption(parent, token);
	                skip(";");
	                return true;

	            case "message":
	                parseType(parent, token);
	                return true;

	            case "enum":
	                parseEnum(parent, token);
	                return true;

	            case "service":
	                parseService(parent, token);
	                return true;

	            case "extend":
	                parseExtension(parent, token);
	                return true;
	        }
	        return false;
	    }

	    function ifBlock(obj, fnIf, fnElse) {
	        var trailingLine = tn.line;
	        if (obj) {
	            if(typeof obj.comment !== "string") {
	              obj.comment = cmnt(); // try block-type comment
	            }
	            obj.filename = parse.filename;
	        }
	        if (skip("{", true)) {
	            var token;
	            while ((token = next()) !== "}")
	                fnIf(token);
	            skip(";", true);
	        } else {
	            if (fnElse)
	                fnElse();
	            skip(";");
	            if (obj && (typeof obj.comment !== "string" || preferTrailingComment))
	                obj.comment = cmnt(trailingLine) || obj.comment; // try line-type comment
	        }
	    }

	    function parseType(parent, token) {

	        /* istanbul ignore if */
	        if (!nameRe.test(token = next()))
	            throw illegal(token, "type name");

	        var type = new Type(token);
	        ifBlock(type, function parseType_block(token) {
	            if (parseCommon(type, token))
	                return;

	            switch (token) {

	                case "map":
	                    parseMapField(type);
	                    break;

	                case "required":
	                case "repeated":
	                    parseField(type, token);
	                    break;

	                case "optional":
	                    /* istanbul ignore if */
	                    if (isProto3) {
	                        parseField(type, "proto3_optional");
	                    } else {
	                        parseField(type, "optional");
	                    }
	                    break;

	                case "oneof":
	                    parseOneOf(type, token);
	                    break;

	                case "extensions":
	                    readRanges(type.extensions || (type.extensions = []));
	                    break;

	                case "reserved":
	                    readRanges(type.reserved || (type.reserved = []), true);
	                    break;

	                default:
	                    /* istanbul ignore if */
	                    if (!isProto3 || !typeRefRe.test(token))
	                        throw illegal(token);

	                    push(token);
	                    parseField(type, "optional");
	                    break;
	            }
	        });
	        parent.add(type);
	    }

	    function parseField(parent, rule, extend) {
	        var type = next();
	        if (type === "group") {
	            parseGroup(parent, rule);
	            return;
	        }
	        // Type names can consume multiple tokens, in multiple variants:
	        //    package.subpackage   field       tokens: "package.subpackage" [TYPE NAME ENDS HERE] "field"
	        //    package . subpackage field       tokens: "package" "." "subpackage" [TYPE NAME ENDS HERE] "field"
	        //    package.  subpackage field       tokens: "package." "subpackage" [TYPE NAME ENDS HERE] "field"
	        //    package  .subpackage field       tokens: "package" ".subpackage" [TYPE NAME ENDS HERE] "field"
	        // Keep reading tokens until we get a type name with no period at the end,
	        // and the next token does not start with a period.
	        while (type.endsWith(".") || peek().startsWith(".")) {
	            type += next();
	        }

	        /* istanbul ignore if */
	        if (!typeRefRe.test(type))
	            throw illegal(type, "type");

	        var name = next();

	        /* istanbul ignore if */
	        if (!nameRe.test(name))
	            throw illegal(name, "name");

	        name = applyCase(name);
	        skip("=");

	        var field = new Field(name, parseId(next()), type, rule, extend);
	        ifBlock(field, function parseField_block(token) {

	            /* istanbul ignore else */
	            if (token === "option") {
	                parseOption(field, token);
	                skip(";");
	            } else
	                throw illegal(token);

	        }, function parseField_line() {
	            parseInlineOptions(field);
	        });

	        if (rule === "proto3_optional") {
	            // for proto3 optional fields, we create a single-member Oneof to mimic "optional" behavior
	            var oneof = new OneOf("_" + name);
	            field.setOption("proto3_optional", true);
	            oneof.add(field);
	            parent.add(oneof);
	        } else {
	            parent.add(field);
	        }

	        // JSON defaults to packed=true if not set so we have to set packed=false explicity when
	        // parsing proto2 descriptors without the option, where applicable. This must be done for
	        // all known packable types and anything that could be an enum (= is not a basic type).
	        if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined))
	            field.setOption("packed", false, /* ifNotSet */ true);
	    }

	    function parseGroup(parent, rule) {
	        var name = next();

	        /* istanbul ignore if */
	        if (!nameRe.test(name))
	            throw illegal(name, "name");

	        var fieldName = util.lcFirst(name);
	        if (name === fieldName)
	            name = util.ucFirst(name);
	        skip("=");
	        var id = parseId(next());
	        var type = new Type(name);
	        type.group = true;
	        var field = new Field(fieldName, id, name, rule);
	        field.filename = parse.filename;
	        ifBlock(type, function parseGroup_block(token) {
	            switch (token) {

	                case "option":
	                    parseOption(type, token);
	                    skip(";");
	                    break;

	                case "required":
	                case "repeated":
	                    parseField(type, token);
	                    break;

	                case "optional":
	                    /* istanbul ignore if */
	                    if (isProto3) {
	                        parseField(type, "proto3_optional");
	                    } else {
	                        parseField(type, "optional");
	                    }
	                    break;

	                case "message":
	                    parseType(type, token);
	                    break;

	                case "enum":
	                    parseEnum(type, token);
	                    break;

	                /* istanbul ignore next */
	                default:
	                    throw illegal(token); // there are no groups with proto3 semantics
	            }
	        });
	        parent.add(type)
	              .add(field);
	    }

	    function parseMapField(parent) {
	        skip("<");
	        var keyType = next();

	        /* istanbul ignore if */
	        if (types.mapKey[keyType] === undefined)
	            throw illegal(keyType, "type");

	        skip(",");
	        var valueType = next();

	        /* istanbul ignore if */
	        if (!typeRefRe.test(valueType))
	            throw illegal(valueType, "type");

	        skip(">");
	        var name = next();

	        /* istanbul ignore if */
	        if (!nameRe.test(name))
	            throw illegal(name, "name");

	        skip("=");
	        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);
	        ifBlock(field, function parseMapField_block(token) {

	            /* istanbul ignore else */
	            if (token === "option") {
	                parseOption(field, token);
	                skip(";");
	            } else
	                throw illegal(token);

	        }, function parseMapField_line() {
	            parseInlineOptions(field);
	        });
	        parent.add(field);
	    }

	    function parseOneOf(parent, token) {

	        /* istanbul ignore if */
	        if (!nameRe.test(token = next()))
	            throw illegal(token, "name");

	        var oneof = new OneOf(applyCase(token));
	        ifBlock(oneof, function parseOneOf_block(token) {
	            if (token === "option") {
	                parseOption(oneof, token);
	                skip(";");
	            } else {
	                push(token);
	                parseField(oneof, "optional");
	            }
	        });
	        parent.add(oneof);
	    }

	    function parseEnum(parent, token) {

	        /* istanbul ignore if */
	        if (!nameRe.test(token = next()))
	            throw illegal(token, "name");

	        var enm = new Enum(token);
	        ifBlock(enm, function parseEnum_block(token) {
	          switch(token) {
	            case "option":
	              parseOption(enm, token);
	              skip(";");
	              break;

	            case "reserved":
	              readRanges(enm.reserved || (enm.reserved = []), true);
	              break;

	            default:
	              parseEnumValue(enm, token);
	          }
	        });
	        parent.add(enm);
	    }

	    function parseEnumValue(parent, token) {

	        /* istanbul ignore if */
	        if (!nameRe.test(token))
	            throw illegal(token, "name");

	        skip("=");
	        var value = parseId(next(), true),
	            dummy = {
	                options: undefined
	            };
	        dummy.setOption = function(name, value) {
	            if (this.options === undefined)
	                this.options = {};
	            this.options[name] = value;
	        };
	        ifBlock(dummy, function parseEnumValue_block(token) {

	            /* istanbul ignore else */
	            if (token === "option") {
	                parseOption(dummy, token); // skip
	                skip(";");
	            } else
	                throw illegal(token);

	        }, function parseEnumValue_line() {
	            parseInlineOptions(dummy); // skip
	        });
	        parent.add(token, value, dummy.comment, dummy.options);
	    }

	    function parseOption(parent, token) {
	        var isCustom = skip("(", true);

	        /* istanbul ignore if */
	        if (!typeRefRe.test(token = next()))
	            throw illegal(token, "name");

	        var name = token;
	        var option = name;
	        var propName;

	        if (isCustom) {
	            skip(")");
	            name = "(" + name + ")";
	            option = name;
	            token = peek();
	            if (fqTypeRefRe.test(token)) {
	                propName = token.slice(1); //remove '.' before property name
	                name += token;
	                next();
	            }
	        }
	        skip("=");
	        var optionValue = parseOptionValue(parent, name);
	        setParsedOption(parent, option, optionValue, propName);
	    }

	    function parseOptionValue(parent, name) {
	        // { a: "foo" b { c: "bar" } }
	        if (skip("{", true)) {
	            var objectResult = {};

	            while (!skip("}", true)) {
	                /* istanbul ignore if */
	                if (!nameRe.test(token = next())) {
	                    throw illegal(token, "name");
	                }
	                if (token === null) {
	                  throw illegal(token, "end of input");
	                }

	                var value;
	                var propName = token;

	                skip(":", true);

	                if (peek() === "{")
	                    value = parseOptionValue(parent, name + "." + token);
	                else if (peek() === "[") {
	                    // option (my_option) = {
	                    //     repeated_value: [ "foo", "bar" ]
	                    // };
	                    value = [];
	                    var lastValue;
	                    if (skip("[", true)) {
	                        do {
	                            lastValue = readValue(true);
	                            value.push(lastValue);
	                        } while (skip(",", true));
	                        skip("]");
	                        if (typeof lastValue !== "undefined") {
	                            setOption(parent, name + "." + token, lastValue);
	                        }
	                    }
	                } else {
	                    value = readValue(true);
	                    setOption(parent, name + "." + token, value);
	                }

	                var prevValue = objectResult[propName];

	                if (prevValue)
	                    value = [].concat(prevValue).concat(value);

	                objectResult[propName] = value;

	                // Semicolons and commas can be optional
	                skip(",", true);
	                skip(";", true);
	            }

	            return objectResult;
	        }

	        var simpleValue = readValue(true);
	        setOption(parent, name, simpleValue);
	        return simpleValue;
	        // Does not enforce a delimiter to be universal
	    }

	    function setOption(parent, name, value) {
	        if (parent.setOption)
	            parent.setOption(name, value);
	    }

	    function setParsedOption(parent, name, value, propName) {
	        if (parent.setParsedOption)
	            parent.setParsedOption(name, value, propName);
	    }

	    function parseInlineOptions(parent) {
	        if (skip("[", true)) {
	            do {
	                parseOption(parent, "option");
	            } while (skip(",", true));
	            skip("]");
	        }
	        return parent;
	    }

	    function parseService(parent, token) {

	        /* istanbul ignore if */
	        if (!nameRe.test(token = next()))
	            throw illegal(token, "service name");

	        var service = new Service(token);
	        ifBlock(service, function parseService_block(token) {
	            if (parseCommon(service, token))
	                return;

	            /* istanbul ignore else */
	            if (token === "rpc")
	                parseMethod(service, token);
	            else
	                throw illegal(token);
	        });
	        parent.add(service);
	    }

	    function parseMethod(parent, token) {
	        // Get the comment of the preceding line now (if one exists) in case the
	        // method is defined across multiple lines.
	        var commentText = cmnt();

	        var type = token;

	        /* istanbul ignore if */
	        if (!nameRe.test(token = next()))
	            throw illegal(token, "name");

	        var name = token,
	            requestType, requestStream,
	            responseType, responseStream;

	        skip("(");
	        if (skip("stream", true))
	            requestStream = true;

	        /* istanbul ignore if */
	        if (!typeRefRe.test(token = next()))
	            throw illegal(token);

	        requestType = token;
	        skip(")"); skip("returns"); skip("(");
	        if (skip("stream", true))
	            responseStream = true;

	        /* istanbul ignore if */
	        if (!typeRefRe.test(token = next()))
	            throw illegal(token);

	        responseType = token;
	        skip(")");

	        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);
	        method.comment = commentText;
	        ifBlock(method, function parseMethod_block(token) {

	            /* istanbul ignore else */
	            if (token === "option") {
	                parseOption(method, token);
	                skip(";");
	            } else
	                throw illegal(token);

	        });
	        parent.add(method);
	    }

	    function parseExtension(parent, token) {

	        /* istanbul ignore if */
	        if (!typeRefRe.test(token = next()))
	            throw illegal(token, "reference");

	        var reference = token;
	        ifBlock(null, function parseExtension_block(token) {
	            switch (token) {

	                case "required":
	                case "repeated":
	                    parseField(parent, token, reference);
	                    break;

	                case "optional":
	                    /* istanbul ignore if */
	                    if (isProto3) {
	                        parseField(parent, "proto3_optional", reference);
	                    } else {
	                        parseField(parent, "optional", reference);
	                    }
	                    break;

	                default:
	                    /* istanbul ignore if */
	                    if (!isProto3 || !typeRefRe.test(token))
	                        throw illegal(token);
	                    push(token);
	                    parseField(parent, "optional", reference);
	                    break;
	            }
	        });
	    }

	    var token;
	    while ((token = next()) !== null) {
	        switch (token) {

	            case "package":

	                /* istanbul ignore if */
	                if (!head)
	                    throw illegal(token);

	                parsePackage();
	                break;

	            case "import":

	                /* istanbul ignore if */
	                if (!head)
	                    throw illegal(token);

	                parseImport();
	                break;

	            case "syntax":

	                /* istanbul ignore if */
	                if (!head)
	                    throw illegal(token);

	                parseSyntax();
	                break;

	            case "option":

	                parseOption(ptr, token);
	                skip(";");
	                break;

	            default:

	                /* istanbul ignore else */
	                if (parseCommon(ptr, token)) {
	                    head = false;
	                    continue;
	                }

	                /* istanbul ignore next */
	                throw illegal(token);
	        }
	    }

	    parse.filename = null;
	    return {
	        "package"     : pkg,
	        "imports"     : imports,
	         weakImports  : weakImports,
	         syntax       : syntax,
	         root         : root
	    };
	}

	/**
	 * Parses the given .proto source and returns an object with the parsed contents.
	 * @name parse
	 * @function
	 * @param {string} source Source contents
	 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
	 * @returns {IParserResult} Parser result
	 * @property {string} filename=null Currently processing file name for error reporting, if known
	 * @property {IParseOptions} defaults Default {@link IParseOptions}
	 * @variation 2
	 */
	return parse_1;
}

var common_1;
var hasRequiredCommon;

function requireCommon () {
	if (hasRequiredCommon) return common_1;
	hasRequiredCommon = 1;
	common_1 = common;

	var commonRe = /\/|\./;

	/**
	 * Provides common type definitions.
	 * Can also be used to provide additional google types or your own custom types.
	 * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name
	 * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition
	 * @returns {undefined}
	 * @property {INamespace} google/protobuf/any.proto Any
	 * @property {INamespace} google/protobuf/duration.proto Duration
	 * @property {INamespace} google/protobuf/empty.proto Empty
	 * @property {INamespace} google/protobuf/field_mask.proto FieldMask
	 * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue
	 * @property {INamespace} google/protobuf/timestamp.proto Timestamp
	 * @property {INamespace} google/protobuf/wrappers.proto Wrappers
	 * @example
	 * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)
	 * protobuf.common("descriptor", descriptorJson);
	 *
	 * // manually provides a custom definition (uses my.foo namespace)
	 * protobuf.common("my/foo/bar.proto", myFooBarJson);
	 */
	function common(name, json) {
	    if (!commonRe.test(name)) {
	        name = "google/protobuf/" + name + ".proto";
	        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };
	    }
	    common[name] = json;
	}

	// Not provided because of limited use (feel free to discuss or to provide yourself):
	//
	// google/protobuf/descriptor.proto
	// google/protobuf/source_context.proto
	// google/protobuf/type.proto
	//
	// Stripped and pre-parsed versions of these non-bundled files are instead available as part of
	// the repository or package within the google/protobuf directory.

	common("any", {

	    /**
	     * Properties of a google.protobuf.Any message.
	     * @interface IAny
	     * @type {Object}
	     * @property {string} [typeUrl]
	     * @property {Uint8Array} [bytes]
	     * @memberof common
	     */
	    Any: {
	        fields: {
	            type_url: {
	                type: "string",
	                id: 1
	            },
	            value: {
	                type: "bytes",
	                id: 2
	            }
	        }
	    }
	});

	var timeType;

	common("duration", {

	    /**
	     * Properties of a google.protobuf.Duration message.
	     * @interface IDuration
	     * @type {Object}
	     * @property {number|Long} [seconds]
	     * @property {number} [nanos]
	     * @memberof common
	     */
	    Duration: timeType = {
	        fields: {
	            seconds: {
	                type: "int64",
	                id: 1
	            },
	            nanos: {
	                type: "int32",
	                id: 2
	            }
	        }
	    }
	});

	common("timestamp", {

	    /**
	     * Properties of a google.protobuf.Timestamp message.
	     * @interface ITimestamp
	     * @type {Object}
	     * @property {number|Long} [seconds]
	     * @property {number} [nanos]
	     * @memberof common
	     */
	    Timestamp: timeType
	});

	common("empty", {

	    /**
	     * Properties of a google.protobuf.Empty message.
	     * @interface IEmpty
	     * @memberof common
	     */
	    Empty: {
	        fields: {}
	    }
	});

	common("struct", {

	    /**
	     * Properties of a google.protobuf.Struct message.
	     * @interface IStruct
	     * @type {Object}
	     * @property {Object.<string,IValue>} [fields]
	     * @memberof common
	     */
	    Struct: {
	        fields: {
	            fields: {
	                keyType: "string",
	                type: "Value",
	                id: 1
	            }
	        }
	    },

	    /**
	     * Properties of a google.protobuf.Value message.
	     * @interface IValue
	     * @type {Object}
	     * @property {string} [kind]
	     * @property {0} [nullValue]
	     * @property {number} [numberValue]
	     * @property {string} [stringValue]
	     * @property {boolean} [boolValue]
	     * @property {IStruct} [structValue]
	     * @property {IListValue} [listValue]
	     * @memberof common
	     */
	    Value: {
	        oneofs: {
	            kind: {
	                oneof: [
	                    "nullValue",
	                    "numberValue",
	                    "stringValue",
	                    "boolValue",
	                    "structValue",
	                    "listValue"
	                ]
	            }
	        },
	        fields: {
	            nullValue: {
	                type: "NullValue",
	                id: 1
	            },
	            numberValue: {
	                type: "double",
	                id: 2
	            },
	            stringValue: {
	                type: "string",
	                id: 3
	            },
	            boolValue: {
	                type: "bool",
	                id: 4
	            },
	            structValue: {
	                type: "Struct",
	                id: 5
	            },
	            listValue: {
	                type: "ListValue",
	                id: 6
	            }
	        }
	    },

	    NullValue: {
	        values: {
	            NULL_VALUE: 0
	        }
	    },

	    /**
	     * Properties of a google.protobuf.ListValue message.
	     * @interface IListValue
	     * @type {Object}
	     * @property {Array.<IValue>} [values]
	     * @memberof common
	     */
	    ListValue: {
	        fields: {
	            values: {
	                rule: "repeated",
	                type: "Value",
	                id: 1
	            }
	        }
	    }
	});

	common("wrappers", {

	    /**
	     * Properties of a google.protobuf.DoubleValue message.
	     * @interface IDoubleValue
	     * @type {Object}
	     * @property {number} [value]
	     * @memberof common
	     */
	    DoubleValue: {
	        fields: {
	            value: {
	                type: "double",
	                id: 1
	            }
	        }
	    },

	    /**
	     * Properties of a google.protobuf.FloatValue message.
	     * @interface IFloatValue
	     * @type {Object}
	     * @property {number} [value]
	     * @memberof common
	     */
	    FloatValue: {
	        fields: {
	            value: {
	                type: "float",
	                id: 1
	            }
	        }
	    },

	    /**
	     * Properties of a google.protobuf.Int64Value message.
	     * @interface IInt64Value
	     * @type {Object}
	     * @property {number|Long} [value]
	     * @memberof common
	     */
	    Int64Value: {
	        fields: {
	            value: {
	                type: "int64",
	                id: 1
	            }
	        }
	    },

	    /**
	     * Properties of a google.protobuf.UInt64Value message.
	     * @interface IUInt64Value
	     * @type {Object}
	     * @property {number|Long} [value]
	     * @memberof common
	     */
	    UInt64Value: {
	        fields: {
	            value: {
	                type: "uint64",
	                id: 1
	            }
	        }
	    },

	    /**
	     * Properties of a google.protobuf.Int32Value message.
	     * @interface IInt32Value
	     * @type {Object}
	     * @property {number} [value]
	     * @memberof common
	     */
	    Int32Value: {
	        fields: {
	            value: {
	                type: "int32",
	                id: 1
	            }
	        }
	    },

	    /**
	     * Properties of a google.protobuf.UInt32Value message.
	     * @interface IUInt32Value
	     * @type {Object}
	     * @property {number} [value]
	     * @memberof common
	     */
	    UInt32Value: {
	        fields: {
	            value: {
	                type: "uint32",
	                id: 1
	            }
	        }
	    },

	    /**
	     * Properties of a google.protobuf.BoolValue message.
	     * @interface IBoolValue
	     * @type {Object}
	     * @property {boolean} [value]
	     * @memberof common
	     */
	    BoolValue: {
	        fields: {
	            value: {
	                type: "bool",
	                id: 1
	            }
	        }
	    },

	    /**
	     * Properties of a google.protobuf.StringValue message.
	     * @interface IStringValue
	     * @type {Object}
	     * @property {string} [value]
	     * @memberof common
	     */
	    StringValue: {
	        fields: {
	            value: {
	                type: "string",
	                id: 1
	            }
	        }
	    },

	    /**
	     * Properties of a google.protobuf.BytesValue message.
	     * @interface IBytesValue
	     * @type {Object}
	     * @property {Uint8Array} [value]
	     * @memberof common
	     */
	    BytesValue: {
	        fields: {
	            value: {
	                type: "bytes",
	                id: 1
	            }
	        }
	    }
	});

	common("field_mask", {

	    /**
	     * Properties of a google.protobuf.FieldMask message.
	     * @interface IDoubleValue
	     * @type {Object}
	     * @property {number} [value]
	     * @memberof common
	     */
	    FieldMask: {
	        fields: {
	            paths: {
	                rule: "repeated",
	                type: "string",
	                id: 1
	            }
	        }
	    }
	});

	/**
	 * Gets the root definition of the specified common proto file.
	 *
	 * Bundled definitions are:
	 * - google/protobuf/any.proto
	 * - google/protobuf/duration.proto
	 * - google/protobuf/empty.proto
	 * - google/protobuf/field_mask.proto
	 * - google/protobuf/struct.proto
	 * - google/protobuf/timestamp.proto
	 * - google/protobuf/wrappers.proto
	 *
	 * @param {string} file Proto file name
	 * @returns {INamespace|null} Root definition or `null` if not defined
	 */
	common.get = function get(file) {
	    return common[file] || null;
	};
	return common_1;
}

var hasRequiredSrc$1;

function requireSrc$1 () {
	if (hasRequiredSrc$1) return src.exports;
	hasRequiredSrc$1 = 1;
	var protobuf = src.exports = requireIndexLight();

	protobuf.build = "full";

	// Parser
	protobuf.tokenize         = requireTokenize();
	protobuf.parse            = requireParse();
	protobuf.common           = requireCommon();

	// Configure parser
	protobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);
	return src.exports;
}

var protobufjs;
var hasRequiredProtobufjs;

function requireProtobufjs () {
	if (hasRequiredProtobufjs) return protobufjs;
	hasRequiredProtobufjs = 1;
	protobufjs = requireSrc$1();
	return protobufjs;
}

var descriptor = {exports: {}};

var nested$3 = {
	google: {
		nested: {
			protobuf: {
				nested: {
					FileDescriptorSet: {
						fields: {
							file: {
								rule: "repeated",
								type: "FileDescriptorProto",
								id: 1
							}
						}
					},
					FileDescriptorProto: {
						fields: {
							name: {
								type: "string",
								id: 1
							},
							"package": {
								type: "string",
								id: 2
							},
							dependency: {
								rule: "repeated",
								type: "string",
								id: 3
							},
							publicDependency: {
								rule: "repeated",
								type: "int32",
								id: 10,
								options: {
									packed: false
								}
							},
							weakDependency: {
								rule: "repeated",
								type: "int32",
								id: 11,
								options: {
									packed: false
								}
							},
							messageType: {
								rule: "repeated",
								type: "DescriptorProto",
								id: 4
							},
							enumType: {
								rule: "repeated",
								type: "EnumDescriptorProto",
								id: 5
							},
							service: {
								rule: "repeated",
								type: "ServiceDescriptorProto",
								id: 6
							},
							extension: {
								rule: "repeated",
								type: "FieldDescriptorProto",
								id: 7
							},
							options: {
								type: "FileOptions",
								id: 8
							},
							sourceCodeInfo: {
								type: "SourceCodeInfo",
								id: 9
							},
							syntax: {
								type: "string",
								id: 12
							}
						}
					},
					DescriptorProto: {
						fields: {
							name: {
								type: "string",
								id: 1
							},
							field: {
								rule: "repeated",
								type: "FieldDescriptorProto",
								id: 2
							},
							extension: {
								rule: "repeated",
								type: "FieldDescriptorProto",
								id: 6
							},
							nestedType: {
								rule: "repeated",
								type: "DescriptorProto",
								id: 3
							},
							enumType: {
								rule: "repeated",
								type: "EnumDescriptorProto",
								id: 4
							},
							extensionRange: {
								rule: "repeated",
								type: "ExtensionRange",
								id: 5
							},
							oneofDecl: {
								rule: "repeated",
								type: "OneofDescriptorProto",
								id: 8
							},
							options: {
								type: "MessageOptions",
								id: 7
							},
							reservedRange: {
								rule: "repeated",
								type: "ReservedRange",
								id: 9
							},
							reservedName: {
								rule: "repeated",
								type: "string",
								id: 10
							}
						},
						nested: {
							ExtensionRange: {
								fields: {
									start: {
										type: "int32",
										id: 1
									},
									end: {
										type: "int32",
										id: 2
									}
								}
							},
							ReservedRange: {
								fields: {
									start: {
										type: "int32",
										id: 1
									},
									end: {
										type: "int32",
										id: 2
									}
								}
							}
						}
					},
					FieldDescriptorProto: {
						fields: {
							name: {
								type: "string",
								id: 1
							},
							number: {
								type: "int32",
								id: 3
							},
							label: {
								type: "Label",
								id: 4
							},
							type: {
								type: "Type",
								id: 5
							},
							typeName: {
								type: "string",
								id: 6
							},
							extendee: {
								type: "string",
								id: 2
							},
							defaultValue: {
								type: "string",
								id: 7
							},
							oneofIndex: {
								type: "int32",
								id: 9
							},
							jsonName: {
								type: "string",
								id: 10
							},
							options: {
								type: "FieldOptions",
								id: 8
							}
						},
						nested: {
							Type: {
								values: {
									TYPE_DOUBLE: 1,
									TYPE_FLOAT: 2,
									TYPE_INT64: 3,
									TYPE_UINT64: 4,
									TYPE_INT32: 5,
									TYPE_FIXED64: 6,
									TYPE_FIXED32: 7,
									TYPE_BOOL: 8,
									TYPE_STRING: 9,
									TYPE_GROUP: 10,
									TYPE_MESSAGE: 11,
									TYPE_BYTES: 12,
									TYPE_UINT32: 13,
									TYPE_ENUM: 14,
									TYPE_SFIXED32: 15,
									TYPE_SFIXED64: 16,
									TYPE_SINT32: 17,
									TYPE_SINT64: 18
								}
							},
							Label: {
								values: {
									LABEL_OPTIONAL: 1,
									LABEL_REQUIRED: 2,
									LABEL_REPEATED: 3
								}
							}
						}
					},
					OneofDescriptorProto: {
						fields: {
							name: {
								type: "string",
								id: 1
							},
							options: {
								type: "OneofOptions",
								id: 2
							}
						}
					},
					EnumDescriptorProto: {
						fields: {
							name: {
								type: "string",
								id: 1
							},
							value: {
								rule: "repeated",
								type: "EnumValueDescriptorProto",
								id: 2
							},
							options: {
								type: "EnumOptions",
								id: 3
							}
						}
					},
					EnumValueDescriptorProto: {
						fields: {
							name: {
								type: "string",
								id: 1
							},
							number: {
								type: "int32",
								id: 2
							},
							options: {
								type: "EnumValueOptions",
								id: 3
							}
						}
					},
					ServiceDescriptorProto: {
						fields: {
							name: {
								type: "string",
								id: 1
							},
							method: {
								rule: "repeated",
								type: "MethodDescriptorProto",
								id: 2
							},
							options: {
								type: "ServiceOptions",
								id: 3
							}
						}
					},
					MethodDescriptorProto: {
						fields: {
							name: {
								type: "string",
								id: 1
							},
							inputType: {
								type: "string",
								id: 2
							},
							outputType: {
								type: "string",
								id: 3
							},
							options: {
								type: "MethodOptions",
								id: 4
							},
							clientStreaming: {
								type: "bool",
								id: 5
							},
							serverStreaming: {
								type: "bool",
								id: 6
							}
						}
					},
					FileOptions: {
						fields: {
							javaPackage: {
								type: "string",
								id: 1
							},
							javaOuterClassname: {
								type: "string",
								id: 8
							},
							javaMultipleFiles: {
								type: "bool",
								id: 10
							},
							javaGenerateEqualsAndHash: {
								type: "bool",
								id: 20,
								options: {
									deprecated: true
								}
							},
							javaStringCheckUtf8: {
								type: "bool",
								id: 27
							},
							optimizeFor: {
								type: "OptimizeMode",
								id: 9,
								options: {
									"default": "SPEED"
								}
							},
							goPackage: {
								type: "string",
								id: 11
							},
							ccGenericServices: {
								type: "bool",
								id: 16
							},
							javaGenericServices: {
								type: "bool",
								id: 17
							},
							pyGenericServices: {
								type: "bool",
								id: 18
							},
							deprecated: {
								type: "bool",
								id: 23
							},
							ccEnableArenas: {
								type: "bool",
								id: 31
							},
							objcClassPrefix: {
								type: "string",
								id: 36
							},
							csharpNamespace: {
								type: "string",
								id: 37
							},
							uninterpretedOption: {
								rule: "repeated",
								type: "UninterpretedOption",
								id: 999
							}
						},
						extensions: [
							[
								1000,
								536870911
							]
						],
						reserved: [
							[
								38,
								38
							]
						],
						nested: {
							OptimizeMode: {
								values: {
									SPEED: 1,
									CODE_SIZE: 2,
									LITE_RUNTIME: 3
								}
							}
						}
					},
					MessageOptions: {
						fields: {
							messageSetWireFormat: {
								type: "bool",
								id: 1
							},
							noStandardDescriptorAccessor: {
								type: "bool",
								id: 2
							},
							deprecated: {
								type: "bool",
								id: 3
							},
							mapEntry: {
								type: "bool",
								id: 7
							},
							uninterpretedOption: {
								rule: "repeated",
								type: "UninterpretedOption",
								id: 999
							}
						},
						extensions: [
							[
								1000,
								536870911
							]
						],
						reserved: [
							[
								8,
								8
							]
						]
					},
					FieldOptions: {
						fields: {
							ctype: {
								type: "CType",
								id: 1,
								options: {
									"default": "STRING"
								}
							},
							packed: {
								type: "bool",
								id: 2
							},
							jstype: {
								type: "JSType",
								id: 6,
								options: {
									"default": "JS_NORMAL"
								}
							},
							lazy: {
								type: "bool",
								id: 5
							},
							deprecated: {
								type: "bool",
								id: 3
							},
							weak: {
								type: "bool",
								id: 10
							},
							uninterpretedOption: {
								rule: "repeated",
								type: "UninterpretedOption",
								id: 999
							}
						},
						extensions: [
							[
								1000,
								536870911
							]
						],
						reserved: [
							[
								4,
								4
							]
						],
						nested: {
							CType: {
								values: {
									STRING: 0,
									CORD: 1,
									STRING_PIECE: 2
								}
							},
							JSType: {
								values: {
									JS_NORMAL: 0,
									JS_STRING: 1,
									JS_NUMBER: 2
								}
							}
						}
					},
					OneofOptions: {
						fields: {
							uninterpretedOption: {
								rule: "repeated",
								type: "UninterpretedOption",
								id: 999
							}
						},
						extensions: [
							[
								1000,
								536870911
							]
						]
					},
					EnumOptions: {
						fields: {
							allowAlias: {
								type: "bool",
								id: 2
							},
							deprecated: {
								type: "bool",
								id: 3
							},
							uninterpretedOption: {
								rule: "repeated",
								type: "UninterpretedOption",
								id: 999
							}
						},
						extensions: [
							[
								1000,
								536870911
							]
						]
					},
					EnumValueOptions: {
						fields: {
							deprecated: {
								type: "bool",
								id: 1
							},
							uninterpretedOption: {
								rule: "repeated",
								type: "UninterpretedOption",
								id: 999
							}
						},
						extensions: [
							[
								1000,
								536870911
							]
						]
					},
					ServiceOptions: {
						fields: {
							deprecated: {
								type: "bool",
								id: 33
							},
							uninterpretedOption: {
								rule: "repeated",
								type: "UninterpretedOption",
								id: 999
							}
						},
						extensions: [
							[
								1000,
								536870911
							]
						]
					},
					MethodOptions: {
						fields: {
							deprecated: {
								type: "bool",
								id: 33
							},
							uninterpretedOption: {
								rule: "repeated",
								type: "UninterpretedOption",
								id: 999
							}
						},
						extensions: [
							[
								1000,
								536870911
							]
						]
					},
					UninterpretedOption: {
						fields: {
							name: {
								rule: "repeated",
								type: "NamePart",
								id: 2
							},
							identifierValue: {
								type: "string",
								id: 3
							},
							positiveIntValue: {
								type: "uint64",
								id: 4
							},
							negativeIntValue: {
								type: "int64",
								id: 5
							},
							doubleValue: {
								type: "double",
								id: 6
							},
							stringValue: {
								type: "bytes",
								id: 7
							},
							aggregateValue: {
								type: "string",
								id: 8
							}
						},
						nested: {
							NamePart: {
								fields: {
									namePart: {
										rule: "required",
										type: "string",
										id: 1
									},
									isExtension: {
										rule: "required",
										type: "bool",
										id: 2
									}
								}
							}
						}
					},
					SourceCodeInfo: {
						fields: {
							location: {
								rule: "repeated",
								type: "Location",
								id: 1
							}
						},
						nested: {
							Location: {
								fields: {
									path: {
										rule: "repeated",
										type: "int32",
										id: 1
									},
									span: {
										rule: "repeated",
										type: "int32",
										id: 2
									},
									leadingComments: {
										type: "string",
										id: 3
									},
									trailingComments: {
										type: "string",
										id: 4
									},
									leadingDetachedComments: {
										rule: "repeated",
										type: "string",
										id: 6
									}
								}
							}
						}
					},
					GeneratedCodeInfo: {
						fields: {
							annotation: {
								rule: "repeated",
								type: "Annotation",
								id: 1
							}
						},
						nested: {
							Annotation: {
								fields: {
									path: {
										rule: "repeated",
										type: "int32",
										id: 1
									},
									sourceFile: {
										type: "string",
										id: 2
									},
									begin: {
										type: "int32",
										id: 3
									},
									end: {
										type: "int32",
										id: 4
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var require$$4 = {
	nested: nested$3
};

var hasRequiredDescriptor;

function requireDescriptor () {
	if (hasRequiredDescriptor) return descriptor.exports;
	hasRequiredDescriptor = 1;
	(function (module, exports) {
		var $protobuf = requireProtobufjs();
		module.exports = exports = $protobuf.descriptor = $protobuf.Root.fromJSON(require$$4).lookup(".google.protobuf");

		var Namespace = $protobuf.Namespace,
		    Root      = $protobuf.Root,
		    Enum      = $protobuf.Enum,
		    Type      = $protobuf.Type,
		    Field     = $protobuf.Field,
		    MapField  = $protobuf.MapField,
		    OneOf     = $protobuf.OneOf,
		    Service   = $protobuf.Service,
		    Method    = $protobuf.Method;

		// --- Root ---

		/**
		 * Properties of a FileDescriptorSet message.
		 * @interface IFileDescriptorSet
		 * @property {IFileDescriptorProto[]} file Files
		 */

		/**
		 * Properties of a FileDescriptorProto message.
		 * @interface IFileDescriptorProto
		 * @property {string} [name] File name
		 * @property {string} [package] Package
		 * @property {*} [dependency] Not supported
		 * @property {*} [publicDependency] Not supported
		 * @property {*} [weakDependency] Not supported
		 * @property {IDescriptorProto[]} [messageType] Nested message types
		 * @property {IEnumDescriptorProto[]} [enumType] Nested enums
		 * @property {IServiceDescriptorProto[]} [service] Nested services
		 * @property {IFieldDescriptorProto[]} [extension] Nested extension fields
		 * @property {IFileOptions} [options] Options
		 * @property {*} [sourceCodeInfo] Not supported
		 * @property {string} [syntax="proto2"] Syntax
		 */

		/**
		 * Properties of a FileOptions message.
		 * @interface IFileOptions
		 * @property {string} [javaPackage]
		 * @property {string} [javaOuterClassname]
		 * @property {boolean} [javaMultipleFiles]
		 * @property {boolean} [javaGenerateEqualsAndHash]
		 * @property {boolean} [javaStringCheckUtf8]
		 * @property {IFileOptionsOptimizeMode} [optimizeFor=1]
		 * @property {string} [goPackage]
		 * @property {boolean} [ccGenericServices]
		 * @property {boolean} [javaGenericServices]
		 * @property {boolean} [pyGenericServices]
		 * @property {boolean} [deprecated]
		 * @property {boolean} [ccEnableArenas]
		 * @property {string} [objcClassPrefix]
		 * @property {string} [csharpNamespace]
		 */

		/**
		 * Values of he FileOptions.OptimizeMode enum.
		 * @typedef IFileOptionsOptimizeMode
		 * @type {number}
		 * @property {number} SPEED=1
		 * @property {number} CODE_SIZE=2
		 * @property {number} LITE_RUNTIME=3
		 */

		/**
		 * Creates a root from a descriptor set.
		 * @param {IFileDescriptorSet|Reader|Uint8Array} descriptor Descriptor
		 * @returns {Root} Root instance
		 */
		Root.fromDescriptor = function fromDescriptor(descriptor) {

		    // Decode the descriptor message if specified as a buffer:
		    if (typeof descriptor.length === "number")
		        descriptor = exports.FileDescriptorSet.decode(descriptor);

		    var root = new Root();

		    if (descriptor.file) {
		        var fileDescriptor,
		            filePackage;
		        for (var j = 0, i; j < descriptor.file.length; ++j) {
		            filePackage = root;
		            if ((fileDescriptor = descriptor.file[j])["package"] && fileDescriptor["package"].length)
		                filePackage = root.define(fileDescriptor["package"]);
		            if (fileDescriptor.name && fileDescriptor.name.length)
		                root.files.push(filePackage.filename = fileDescriptor.name);
		            if (fileDescriptor.messageType)
		                for (i = 0; i < fileDescriptor.messageType.length; ++i)
		                    filePackage.add(Type.fromDescriptor(fileDescriptor.messageType[i], fileDescriptor.syntax));
		            if (fileDescriptor.enumType)
		                for (i = 0; i < fileDescriptor.enumType.length; ++i)
		                    filePackage.add(Enum.fromDescriptor(fileDescriptor.enumType[i]));
		            if (fileDescriptor.extension)
		                for (i = 0; i < fileDescriptor.extension.length; ++i)
		                    filePackage.add(Field.fromDescriptor(fileDescriptor.extension[i]));
		            if (fileDescriptor.service)
		                for (i = 0; i < fileDescriptor.service.length; ++i)
		                    filePackage.add(Service.fromDescriptor(fileDescriptor.service[i]));
		            var opts = fromDescriptorOptions(fileDescriptor.options, exports.FileOptions);
		            if (opts) {
		                var ks = Object.keys(opts);
		                for (i = 0; i < ks.length; ++i)
		                    filePackage.setOption(ks[i], opts[ks[i]]);
		            }
		        }
		    }

		    return root;
		};

		/**
		 * Converts a root to a descriptor set.
		 * @returns {Message<IFileDescriptorSet>} Descriptor
		 * @param {string} [syntax="proto2"] Syntax
		 */
		Root.prototype.toDescriptor = function toDescriptor(syntax) {
		    var set = exports.FileDescriptorSet.create();
		    Root_toDescriptorRecursive(this, set.file, syntax);
		    return set;
		};

		// Traverses a namespace and assembles the descriptor set
		function Root_toDescriptorRecursive(ns, files, syntax) {

		    // Create a new file
		    var file = exports.FileDescriptorProto.create({ name: ns.filename || (ns.fullName.substring(1).replace(/\./g, "_") || "root") + ".proto" });
		    if (syntax)
		        file.syntax = syntax;
		    if (!(ns instanceof Root))
		        file["package"] = ns.fullName.substring(1);

		    // Add nested types
		    for (var i = 0, nested; i < ns.nestedArray.length; ++i)
		        if ((nested = ns._nestedArray[i]) instanceof Type)
		            file.messageType.push(nested.toDescriptor(syntax));
		        else if (nested instanceof Enum)
		            file.enumType.push(nested.toDescriptor());
		        else if (nested instanceof Field)
		            file.extension.push(nested.toDescriptor(syntax));
		        else if (nested instanceof Service)
		            file.service.push(nested.toDescriptor());
		        else if (nested instanceof /* plain */ Namespace)
		            Root_toDescriptorRecursive(nested, files, syntax); // requires new file

		    // Keep package-level options
		    file.options = toDescriptorOptions(ns.options, exports.FileOptions);

		    // And keep the file only if there is at least one nested object
		    if (file.messageType.length + file.enumType.length + file.extension.length + file.service.length)
		        files.push(file);
		}

		// --- Type ---

		/**
		 * Properties of a DescriptorProto message.
		 * @interface IDescriptorProto
		 * @property {string} [name] Message type name
		 * @property {IFieldDescriptorProto[]} [field] Fields
		 * @property {IFieldDescriptorProto[]} [extension] Extension fields
		 * @property {IDescriptorProto[]} [nestedType] Nested message types
		 * @property {IEnumDescriptorProto[]} [enumType] Nested enums
		 * @property {IDescriptorProtoExtensionRange[]} [extensionRange] Extension ranges
		 * @property {IOneofDescriptorProto[]} [oneofDecl] Oneofs
		 * @property {IMessageOptions} [options] Not supported
		 * @property {IDescriptorProtoReservedRange[]} [reservedRange] Reserved ranges
		 * @property {string[]} [reservedName] Reserved names
		 */

		/**
		 * Properties of a MessageOptions message.
		 * @interface IMessageOptions
		 * @property {boolean} [mapEntry=false] Whether this message is a map entry
		 */

		/**
		 * Properties of an ExtensionRange message.
		 * @interface IDescriptorProtoExtensionRange
		 * @property {number} [start] Start field id
		 * @property {number} [end] End field id
		 */

		/**
		 * Properties of a ReservedRange message.
		 * @interface IDescriptorProtoReservedRange
		 * @property {number} [start] Start field id
		 * @property {number} [end] End field id
		 */

		var unnamedMessageIndex = 0;

		/**
		 * Creates a type from a descriptor.
		 * @param {IDescriptorProto|Reader|Uint8Array} descriptor Descriptor
		 * @param {string} [syntax="proto2"] Syntax
		 * @returns {Type} Type instance
		 */
		Type.fromDescriptor = function fromDescriptor(descriptor, syntax) {

		    // Decode the descriptor message if specified as a buffer:
		    if (typeof descriptor.length === "number")
		        descriptor = exports.DescriptorProto.decode(descriptor);

		    // Create the message type
		    var type = new Type(descriptor.name.length ? descriptor.name : "Type" + unnamedMessageIndex++, fromDescriptorOptions(descriptor.options, exports.MessageOptions)),
		        i;

		    /* Oneofs */ if (descriptor.oneofDecl)
		        for (i = 0; i < descriptor.oneofDecl.length; ++i)
		            type.add(OneOf.fromDescriptor(descriptor.oneofDecl[i]));
		    /* Fields */ if (descriptor.field)
		        for (i = 0; i < descriptor.field.length; ++i) {
		            var field = Field.fromDescriptor(descriptor.field[i], syntax);
		            type.add(field);
		            if (descriptor.field[i].hasOwnProperty("oneofIndex")) // eslint-disable-line no-prototype-builtins
		                type.oneofsArray[descriptor.field[i].oneofIndex].add(field);
		        }
		    /* Extension fields */ if (descriptor.extension)
		        for (i = 0; i < descriptor.extension.length; ++i)
		            type.add(Field.fromDescriptor(descriptor.extension[i], syntax));
		    /* Nested types */ if (descriptor.nestedType)
		        for (i = 0; i < descriptor.nestedType.length; ++i) {
		            type.add(Type.fromDescriptor(descriptor.nestedType[i], syntax));
		            if (descriptor.nestedType[i].options && descriptor.nestedType[i].options.mapEntry)
		                type.setOption("map_entry", true);
		        }
		    /* Nested enums */ if (descriptor.enumType)
		        for (i = 0; i < descriptor.enumType.length; ++i)
		            type.add(Enum.fromDescriptor(descriptor.enumType[i]));
		    /* Extension ranges */ if (descriptor.extensionRange && descriptor.extensionRange.length) {
		        type.extensions = [];
		        for (i = 0; i < descriptor.extensionRange.length; ++i)
		            type.extensions.push([ descriptor.extensionRange[i].start, descriptor.extensionRange[i].end ]);
		    }
		    /* Reserved... */ if (descriptor.reservedRange && descriptor.reservedRange.length || descriptor.reservedName && descriptor.reservedName.length) {
		        type.reserved = [];
		        /* Ranges */ if (descriptor.reservedRange)
		            for (i = 0; i < descriptor.reservedRange.length; ++i)
		                type.reserved.push([ descriptor.reservedRange[i].start, descriptor.reservedRange[i].end ]);
		        /* Names */ if (descriptor.reservedName)
		            for (i = 0; i < descriptor.reservedName.length; ++i)
		                type.reserved.push(descriptor.reservedName[i]);
		    }

		    return type;
		};

		/**
		 * Converts a type to a descriptor.
		 * @returns {Message<IDescriptorProto>} Descriptor
		 * @param {string} [syntax="proto2"] Syntax
		 */
		Type.prototype.toDescriptor = function toDescriptor(syntax) {
		    var descriptor = exports.DescriptorProto.create({ name: this.name }),
		        i;

		    /* Fields */ for (i = 0; i < this.fieldsArray.length; ++i) {
		        var fieldDescriptor;
		        descriptor.field.push(fieldDescriptor = this._fieldsArray[i].toDescriptor(syntax));
		        if (this._fieldsArray[i] instanceof MapField) { // map fields are repeated FieldNameEntry
		            var keyType = toDescriptorType(this._fieldsArray[i].keyType, this._fieldsArray[i].resolvedKeyType),
		                valueType = toDescriptorType(this._fieldsArray[i].type, this._fieldsArray[i].resolvedType),
		                valueTypeName = valueType === /* type */ 11 || valueType === /* enum */ 14
		                    ? this._fieldsArray[i].resolvedType && shortname(this.parent, this._fieldsArray[i].resolvedType) || this._fieldsArray[i].type
		                    : undefined;
		            descriptor.nestedType.push(exports.DescriptorProto.create({
		                name: fieldDescriptor.typeName,
		                field: [
		                    exports.FieldDescriptorProto.create({ name: "key", number: 1, label: 1, type: keyType }), // can't reference a type or enum
		                    exports.FieldDescriptorProto.create({ name: "value", number: 2, label: 1, type: valueType, typeName: valueTypeName })
		                ],
		                options: exports.MessageOptions.create({ mapEntry: true })
		            }));
		        }
		    }
		    /* Oneofs */ for (i = 0; i < this.oneofsArray.length; ++i)
		        descriptor.oneofDecl.push(this._oneofsArray[i].toDescriptor());
		    /* Nested... */ for (i = 0; i < this.nestedArray.length; ++i) {
		        /* Extension fields */ if (this._nestedArray[i] instanceof Field)
		            descriptor.field.push(this._nestedArray[i].toDescriptor(syntax));
		        /* Types */ else if (this._nestedArray[i] instanceof Type)
		            descriptor.nestedType.push(this._nestedArray[i].toDescriptor(syntax));
		        /* Enums */ else if (this._nestedArray[i] instanceof Enum)
		            descriptor.enumType.push(this._nestedArray[i].toDescriptor());
		        // plain nested namespaces become packages instead in Root#toDescriptor
		    }
		    /* Extension ranges */ if (this.extensions)
		        for (i = 0; i < this.extensions.length; ++i)
		            descriptor.extensionRange.push(exports.DescriptorProto.ExtensionRange.create({ start: this.extensions[i][0], end: this.extensions[i][1] }));
		    /* Reserved... */ if (this.reserved)
		        for (i = 0; i < this.reserved.length; ++i)
		            /* Names */ if (typeof this.reserved[i] === "string")
		                descriptor.reservedName.push(this.reserved[i]);
		            /* Ranges */ else
		                descriptor.reservedRange.push(exports.DescriptorProto.ReservedRange.create({ start: this.reserved[i][0], end: this.reserved[i][1] }));

		    descriptor.options = toDescriptorOptions(this.options, exports.MessageOptions);

		    return descriptor;
		};

		// --- Field ---

		/**
		 * Properties of a FieldDescriptorProto message.
		 * @interface IFieldDescriptorProto
		 * @property {string} [name] Field name
		 * @property {number} [number] Field id
		 * @property {IFieldDescriptorProtoLabel} [label] Field rule
		 * @property {IFieldDescriptorProtoType} [type] Field basic type
		 * @property {string} [typeName] Field type name
		 * @property {string} [extendee] Extended type name
		 * @property {string} [defaultValue] Literal default value
		 * @property {number} [oneofIndex] Oneof index if part of a oneof
		 * @property {*} [jsonName] Not supported
		 * @property {IFieldOptions} [options] Field options
		 */

		/**
		 * Values of the FieldDescriptorProto.Label enum.
		 * @typedef IFieldDescriptorProtoLabel
		 * @type {number}
		 * @property {number} LABEL_OPTIONAL=1
		 * @property {number} LABEL_REQUIRED=2
		 * @property {number} LABEL_REPEATED=3
		 */

		/**
		 * Values of the FieldDescriptorProto.Type enum.
		 * @typedef IFieldDescriptorProtoType
		 * @type {number}
		 * @property {number} TYPE_DOUBLE=1
		 * @property {number} TYPE_FLOAT=2
		 * @property {number} TYPE_INT64=3
		 * @property {number} TYPE_UINT64=4
		 * @property {number} TYPE_INT32=5
		 * @property {number} TYPE_FIXED64=6
		 * @property {number} TYPE_FIXED32=7
		 * @property {number} TYPE_BOOL=8
		 * @property {number} TYPE_STRING=9
		 * @property {number} TYPE_GROUP=10
		 * @property {number} TYPE_MESSAGE=11
		 * @property {number} TYPE_BYTES=12
		 * @property {number} TYPE_UINT32=13
		 * @property {number} TYPE_ENUM=14
		 * @property {number} TYPE_SFIXED32=15
		 * @property {number} TYPE_SFIXED64=16
		 * @property {number} TYPE_SINT32=17
		 * @property {number} TYPE_SINT64=18
		 */

		/**
		 * Properties of a FieldOptions message.
		 * @interface IFieldOptions
		 * @property {boolean} [packed] Whether packed or not (defaults to `false` for proto2 and `true` for proto3)
		 * @property {IFieldOptionsJSType} [jstype] JavaScript value type (not used by protobuf.js)
		 */

		/**
		 * Values of the FieldOptions.JSType enum.
		 * @typedef IFieldOptionsJSType
		 * @type {number}
		 * @property {number} JS_NORMAL=0
		 * @property {number} JS_STRING=1
		 * @property {number} JS_NUMBER=2
		 */

		// copied here from parse.js
		var numberRe = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;

		/**
		 * Creates a field from a descriptor.
		 * @param {IFieldDescriptorProto|Reader|Uint8Array} descriptor Descriptor
		 * @param {string} [syntax="proto2"] Syntax
		 * @returns {Field} Field instance
		 */
		Field.fromDescriptor = function fromDescriptor(descriptor, syntax) {

		    // Decode the descriptor message if specified as a buffer:
		    if (typeof descriptor.length === "number")
		        descriptor = exports.DescriptorProto.decode(descriptor);

		    if (typeof descriptor.number !== "number")
		        throw Error("missing field id");

		    // Rewire field type
		    var fieldType;
		    if (descriptor.typeName && descriptor.typeName.length)
		        fieldType = descriptor.typeName;
		    else
		        fieldType = fromDescriptorType(descriptor.type);

		    // Rewire field rule
		    var fieldRule;
		    switch (descriptor.label) {
		        // 0 is reserved for errors
		        case 1: fieldRule = undefined; break;
		        case 2: fieldRule = "required"; break;
		        case 3: fieldRule = "repeated"; break;
		        default: throw Error("illegal label: " + descriptor.label);
		    }

			var extendee = descriptor.extendee;
			if (descriptor.extendee !== undefined) {
				extendee = extendee.length ? extendee : undefined;
			}
		    var field = new Field(
		        descriptor.name.length ? descriptor.name : "field" + descriptor.number,
		        descriptor.number,
		        fieldType,
		        fieldRule,
		        extendee
		    );

		    field.options = fromDescriptorOptions(descriptor.options, exports.FieldOptions);

		    if (descriptor.defaultValue && descriptor.defaultValue.length) {
		        var defaultValue = descriptor.defaultValue;
		        switch (defaultValue) {
		            case "true": case "TRUE":
		                defaultValue = true;
		                break;
		            case "false": case "FALSE":
		                defaultValue = false;
		                break;
		            default:
		                var match = numberRe.exec(defaultValue);
		                if (match)
		                    defaultValue = parseInt(defaultValue); // eslint-disable-line radix
		                break;
		        }
		        field.setOption("default", defaultValue);
		    }

		    if (packableDescriptorType(descriptor.type)) {
		        if (syntax === "proto3") { // defaults to packed=true (internal preset is packed=true)
		            if (descriptor.options && !descriptor.options.packed)
		                field.setOption("packed", false);
		        } else if (!(descriptor.options && descriptor.options.packed)) // defaults to packed=false
		            field.setOption("packed", false);
		    }

		    return field;
		};

		/**
		 * Converts a field to a descriptor.
		 * @returns {Message<IFieldDescriptorProto>} Descriptor
		 * @param {string} [syntax="proto2"] Syntax
		 */
		Field.prototype.toDescriptor = function toDescriptor(syntax) {
		    var descriptor = exports.FieldDescriptorProto.create({ name: this.name, number: this.id });

		    if (this.map) {

		        descriptor.type = 11; // message
		        descriptor.typeName = $protobuf.util.ucFirst(this.name); // fieldName -> FieldNameEntry (built in Type#toDescriptor)
		        descriptor.label = 3; // repeated

		    } else {

		        // Rewire field type
		        switch (descriptor.type = toDescriptorType(this.type, this.resolve().resolvedType)) {
		            case 10: // group
		            case 11: // type
		            case 14: // enum
		                descriptor.typeName = this.resolvedType ? shortname(this.parent, this.resolvedType) : this.type;
		                break;
		        }

		        // Rewire field rule
		        switch (this.rule) {
		            case "repeated": descriptor.label = 3; break;
		            case "required": descriptor.label = 2; break;
		            default: descriptor.label = 1; break;
		        }

		    }

		    // Handle extension field
		    descriptor.extendee = this.extensionField ? this.extensionField.parent.fullName : this.extend;

		    // Handle part of oneof
		    if (this.partOf)
		        if ((descriptor.oneofIndex = this.parent.oneofsArray.indexOf(this.partOf)) < 0)
		            throw Error("missing oneof");

		    if (this.options) {
		        descriptor.options = toDescriptorOptions(this.options, exports.FieldOptions);
		        if (this.options["default"] != null)
		            descriptor.defaultValue = String(this.options["default"]);
		    }

		    if (syntax === "proto3") { // defaults to packed=true
		        if (!this.packed)
		            (descriptor.options || (descriptor.options = exports.FieldOptions.create())).packed = false;
		    } else if (this.packed) // defaults to packed=false
		        (descriptor.options || (descriptor.options = exports.FieldOptions.create())).packed = true;

		    return descriptor;
		};

		// --- Enum ---

		/**
		 * Properties of an EnumDescriptorProto message.
		 * @interface IEnumDescriptorProto
		 * @property {string} [name] Enum name
		 * @property {IEnumValueDescriptorProto[]} [value] Enum values
		 * @property {IEnumOptions} [options] Enum options
		 */

		/**
		 * Properties of an EnumValueDescriptorProto message.
		 * @interface IEnumValueDescriptorProto
		 * @property {string} [name] Name
		 * @property {number} [number] Value
		 * @property {*} [options] Not supported
		 */

		/**
		 * Properties of an EnumOptions message.
		 * @interface IEnumOptions
		 * @property {boolean} [allowAlias] Whether aliases are allowed
		 * @property {boolean} [deprecated]
		 */

		var unnamedEnumIndex = 0;

		/**
		 * Creates an enum from a descriptor.
		 * @param {IEnumDescriptorProto|Reader|Uint8Array} descriptor Descriptor
		 * @returns {Enum} Enum instance
		 */
		Enum.fromDescriptor = function fromDescriptor(descriptor) {

		    // Decode the descriptor message if specified as a buffer:
		    if (typeof descriptor.length === "number")
		        descriptor = exports.EnumDescriptorProto.decode(descriptor);

		    // Construct values object
		    var values = {};
		    if (descriptor.value)
		        for (var i = 0; i < descriptor.value.length; ++i) {
		            var name  = descriptor.value[i].name,
		                value = descriptor.value[i].number || 0;
		            values[name && name.length ? name : "NAME" + value] = value;
		        }

		    return new Enum(
		        descriptor.name && descriptor.name.length ? descriptor.name : "Enum" + unnamedEnumIndex++,
		        values,
		        fromDescriptorOptions(descriptor.options, exports.EnumOptions)
		    );
		};

		/**
		 * Converts an enum to a descriptor.
		 * @returns {Message<IEnumDescriptorProto>} Descriptor
		 */
		Enum.prototype.toDescriptor = function toDescriptor() {

		    // Values
		    var values = [];
		    for (var i = 0, ks = Object.keys(this.values); i < ks.length; ++i)
		        values.push(exports.EnumValueDescriptorProto.create({ name: ks[i], number: this.values[ks[i]] }));

		    return exports.EnumDescriptorProto.create({
		        name: this.name,
		        value: values,
		        options: toDescriptorOptions(this.options, exports.EnumOptions)
		    });
		};

		// --- OneOf ---

		/**
		 * Properties of a OneofDescriptorProto message.
		 * @interface IOneofDescriptorProto
		 * @property {string} [name] Oneof name
		 * @property {*} [options] Not supported
		 */

		var unnamedOneofIndex = 0;

		/**
		 * Creates a oneof from a descriptor.
		 * @param {IOneofDescriptorProto|Reader|Uint8Array} descriptor Descriptor
		 * @returns {OneOf} OneOf instance
		 */
		OneOf.fromDescriptor = function fromDescriptor(descriptor) {

		    // Decode the descriptor message if specified as a buffer:
		    if (typeof descriptor.length === "number")
		        descriptor = exports.OneofDescriptorProto.decode(descriptor);

		    return new OneOf(
		        // unnamedOneOfIndex is global, not per type, because we have no ref to a type here
		        descriptor.name && descriptor.name.length ? descriptor.name : "oneof" + unnamedOneofIndex++
		        // fromDescriptorOptions(descriptor.options, exports.OneofOptions) - only uninterpreted_option
		    );
		};

		/**
		 * Converts a oneof to a descriptor.
		 * @returns {Message<IOneofDescriptorProto>} Descriptor
		 */
		OneOf.prototype.toDescriptor = function toDescriptor() {
		    return exports.OneofDescriptorProto.create({
		        name: this.name
		        // options: toDescriptorOptions(this.options, exports.OneofOptions) - only uninterpreted_option
		    });
		};

		// --- Service ---

		/**
		 * Properties of a ServiceDescriptorProto message.
		 * @interface IServiceDescriptorProto
		 * @property {string} [name] Service name
		 * @property {IMethodDescriptorProto[]} [method] Methods
		 * @property {IServiceOptions} [options] Options
		 */

		/**
		 * Properties of a ServiceOptions message.
		 * @interface IServiceOptions
		 * @property {boolean} [deprecated]
		 */

		var unnamedServiceIndex = 0;

		/**
		 * Creates a service from a descriptor.
		 * @param {IServiceDescriptorProto|Reader|Uint8Array} descriptor Descriptor
		 * @returns {Service} Service instance
		 */
		Service.fromDescriptor = function fromDescriptor(descriptor) {

		    // Decode the descriptor message if specified as a buffer:
		    if (typeof descriptor.length === "number")
		        descriptor = exports.ServiceDescriptorProto.decode(descriptor);

		    var service = new Service(descriptor.name && descriptor.name.length ? descriptor.name : "Service" + unnamedServiceIndex++, fromDescriptorOptions(descriptor.options, exports.ServiceOptions));
		    if (descriptor.method)
		        for (var i = 0; i < descriptor.method.length; ++i)
		            service.add(Method.fromDescriptor(descriptor.method[i]));

		    return service;
		};

		/**
		 * Converts a service to a descriptor.
		 * @returns {Message<IServiceDescriptorProto>} Descriptor
		 */
		Service.prototype.toDescriptor = function toDescriptor() {

		    // Methods
		    var methods = [];
		    for (var i = 0; i < this.methodsArray.length; ++i)
		        methods.push(this._methodsArray[i].toDescriptor());

		    return exports.ServiceDescriptorProto.create({
		        name: this.name,
		        method: methods,
		        options: toDescriptorOptions(this.options, exports.ServiceOptions)
		    });
		};

		// --- Method ---

		/**
		 * Properties of a MethodDescriptorProto message.
		 * @interface IMethodDescriptorProto
		 * @property {string} [name] Method name
		 * @property {string} [inputType] Request type name
		 * @property {string} [outputType] Response type name
		 * @property {IMethodOptions} [options] Not supported
		 * @property {boolean} [clientStreaming=false] Whether requests are streamed
		 * @property {boolean} [serverStreaming=false] Whether responses are streamed
		 */

		/**
		 * Properties of a MethodOptions message.
		 * @interface IMethodOptions
		 * @property {boolean} [deprecated]
		 */

		var unnamedMethodIndex = 0;

		/**
		 * Creates a method from a descriptor.
		 * @param {IMethodDescriptorProto|Reader|Uint8Array} descriptor Descriptor
		 * @returns {Method} Reflected method instance
		 */
		Method.fromDescriptor = function fromDescriptor(descriptor) {

		    // Decode the descriptor message if specified as a buffer:
		    if (typeof descriptor.length === "number")
		        descriptor = exports.MethodDescriptorProto.decode(descriptor);

		    return new Method(
		        // unnamedMethodIndex is global, not per service, because we have no ref to a service here
		        descriptor.name && descriptor.name.length ? descriptor.name : "Method" + unnamedMethodIndex++,
		        "rpc",
		        descriptor.inputType,
		        descriptor.outputType,
		        Boolean(descriptor.clientStreaming),
		        Boolean(descriptor.serverStreaming),
		        fromDescriptorOptions(descriptor.options, exports.MethodOptions)
		    );
		};

		/**
		 * Converts a method to a descriptor.
		 * @returns {Message<IMethodDescriptorProto>} Descriptor
		 */
		Method.prototype.toDescriptor = function toDescriptor() {
		    return exports.MethodDescriptorProto.create({
		        name: this.name,
		        inputType: this.resolvedRequestType ? this.resolvedRequestType.fullName : this.requestType,
		        outputType: this.resolvedResponseType ? this.resolvedResponseType.fullName : this.responseType,
		        clientStreaming: this.requestStream,
		        serverStreaming: this.responseStream,
		        options: toDescriptorOptions(this.options, exports.MethodOptions)
		    });
		};

		// --- utility ---

		// Converts a descriptor type to a protobuf.js basic type
		function fromDescriptorType(type) {
		    switch (type) {
		        // 0 is reserved for errors
		        case 1: return "double";
		        case 2: return "float";
		        case 3: return "int64";
		        case 4: return "uint64";
		        case 5: return "int32";
		        case 6: return "fixed64";
		        case 7: return "fixed32";
		        case 8: return "bool";
		        case 9: return "string";
		        case 12: return "bytes";
		        case 13: return "uint32";
		        case 15: return "sfixed32";
		        case 16: return "sfixed64";
		        case 17: return "sint32";
		        case 18: return "sint64";
		    }
		    throw Error("illegal type: " + type);
		}

		// Tests if a descriptor type is packable
		function packableDescriptorType(type) {
		    switch (type) {
		        case 1: // double
		        case 2: // float
		        case 3: // int64
		        case 4: // uint64
		        case 5: // int32
		        case 6: // fixed64
		        case 7: // fixed32
		        case 8: // bool
		        case 13: // uint32
		        case 14: // enum (!)
		        case 15: // sfixed32
		        case 16: // sfixed64
		        case 17: // sint32
		        case 18: // sint64
		            return true;
		    }
		    return false;
		}

		// Converts a protobuf.js basic type to a descriptor type
		function toDescriptorType(type, resolvedType) {
		    switch (type) {
		        // 0 is reserved for errors
		        case "double": return 1;
		        case "float": return 2;
		        case "int64": return 3;
		        case "uint64": return 4;
		        case "int32": return 5;
		        case "fixed64": return 6;
		        case "fixed32": return 7;
		        case "bool": return 8;
		        case "string": return 9;
		        case "bytes": return 12;
		        case "uint32": return 13;
		        case "sfixed32": return 15;
		        case "sfixed64": return 16;
		        case "sint32": return 17;
		        case "sint64": return 18;
		    }
		    if (resolvedType instanceof Enum)
		        return 14;
		    if (resolvedType instanceof Type)
		        return resolvedType.group ? 10 : 11;
		    throw Error("illegal type: " + type);
		}

		// Converts descriptor options to an options object
		function fromDescriptorOptions(options, type) {
		    if (!options)
		        return undefined;
		    var out = [];
		    for (var i = 0, field, key, val; i < type.fieldsArray.length; ++i)
		        if ((key = (field = type._fieldsArray[i]).name) !== "uninterpretedOption")
		            if (options.hasOwnProperty(key)) { // eslint-disable-line no-prototype-builtins
		                val = options[key];
		                if (field.resolvedType instanceof Enum && typeof val === "number" && field.resolvedType.valuesById[val] !== undefined)
		                    val = field.resolvedType.valuesById[val];
		                out.push(underScore(key), val);
		            }
		    return out.length ? $protobuf.util.toObject(out) : undefined;
		}

		// Converts an options object to descriptor options
		function toDescriptorOptions(options, type) {
		    if (!options)
		        return undefined;
		    var out = [];
		    for (var i = 0, ks = Object.keys(options), key, val; i < ks.length; ++i) {
		        val = options[key = ks[i]];
		        if (key === "default")
		            continue;
		        var field = type.fields[key];
		        if (!field && !(field = type.fields[key = $protobuf.util.camelCase(key)]))
		            continue;
		        out.push(key, val);
		    }
		    return out.length ? type.fromObject($protobuf.util.toObject(out)) : undefined;
		}

		// Calculates the shortest relative path from `from` to `to`.
		function shortname(from, to) {
		    var fromPath = from.fullName.split("."),
		        toPath = to.fullName.split("."),
		        i = 0,
		        j = 0,
		        k = toPath.length - 1;
		    if (!(from instanceof Root) && to instanceof Namespace)
		        while (i < fromPath.length && j < k && fromPath[i] === toPath[j]) {
		            var other = to.lookup(fromPath[i++], true);
		            if (other !== null && other !== to)
		                break;
		            ++j;
		        }
		    else
		        for (; i < fromPath.length && j < k && fromPath[i] === toPath[j]; ++i, ++j);
		    return toPath.slice(j).join(".");
		}

		// copied here from cli/targets/proto.js
		function underScore(str) {
		    return str.substring(0,1)
		         + str.substring(1)
		               .replace(/([A-Z])(?=[a-z]|$)/g, function($0, $1) { return "_" + $1.toLowerCase(); });
		}

		// --- exports ---

		/**
		 * Reflected file descriptor set.
		 * @name FileDescriptorSet
		 * @type {Type}
		 * @const
		 * @tstype $protobuf.Type
		 */

		/**
		 * Reflected file descriptor proto.
		 * @name FileDescriptorProto
		 * @type {Type}
		 * @const
		 * @tstype $protobuf.Type
		 */

		/**
		 * Reflected descriptor proto.
		 * @name DescriptorProto
		 * @type {Type}
		 * @property {Type} ExtensionRange
		 * @property {Type} ReservedRange
		 * @const
		 * @tstype $protobuf.Type & {
		 *     ExtensionRange: $protobuf.Type,
		 *     ReservedRange: $protobuf.Type
		 * }
		 */

		/**
		 * Reflected field descriptor proto.
		 * @name FieldDescriptorProto
		 * @type {Type}
		 * @property {Enum} Label
		 * @property {Enum} Type
		 * @const
		 * @tstype $protobuf.Type & {
		 *     Label: $protobuf.Enum,
		 *     Type: $protobuf.Enum
		 * }
		 */

		/**
		 * Reflected oneof descriptor proto.
		 * @name OneofDescriptorProto
		 * @type {Type}
		 * @const
		 * @tstype $protobuf.Type
		 */

		/**
		 * Reflected enum descriptor proto.
		 * @name EnumDescriptorProto
		 * @type {Type}
		 * @const
		 * @tstype $protobuf.Type
		 */

		/**
		 * Reflected service descriptor proto.
		 * @name ServiceDescriptorProto
		 * @type {Type}
		 * @const
		 * @tstype $protobuf.Type
		 */

		/**
		 * Reflected enum value descriptor proto.
		 * @name EnumValueDescriptorProto
		 * @type {Type}
		 * @const
		 * @tstype $protobuf.Type
		 */

		/**
		 * Reflected method descriptor proto.
		 * @name MethodDescriptorProto
		 * @type {Type}
		 * @const
		 * @tstype $protobuf.Type
		 */

		/**
		 * Reflected file options.
		 * @name FileOptions
		 * @type {Type}
		 * @property {Enum} OptimizeMode
		 * @const
		 * @tstype $protobuf.Type & {
		 *     OptimizeMode: $protobuf.Enum
		 * }
		 */

		/**
		 * Reflected message options.
		 * @name MessageOptions
		 * @type {Type}
		 * @const
		 * @tstype $protobuf.Type
		 */

		/**
		 * Reflected field options.
		 * @name FieldOptions
		 * @type {Type}
		 * @property {Enum} CType
		 * @property {Enum} JSType
		 * @const
		 * @tstype $protobuf.Type & {
		 *     CType: $protobuf.Enum,
		 *     JSType: $protobuf.Enum
		 * }
		 */

		/**
		 * Reflected oneof options.
		 * @name OneofOptions
		 * @type {Type}
		 * @const
		 * @tstype $protobuf.Type
		 */

		/**
		 * Reflected enum options.
		 * @name EnumOptions
		 * @type {Type}
		 * @const
		 * @tstype $protobuf.Type
		 */

		/**
		 * Reflected enum value options.
		 * @name EnumValueOptions
		 * @type {Type}
		 * @const
		 * @tstype $protobuf.Type
		 */

		/**
		 * Reflected service options.
		 * @name ServiceOptions
		 * @type {Type}
		 * @const
		 * @tstype $protobuf.Type
		 */

		/**
		 * Reflected method options.
		 * @name MethodOptions
		 * @type {Type}
		 * @const
		 * @tstype $protobuf.Type
		 */

		/**
		 * Reflected uninterpretet option.
		 * @name UninterpretedOption
		 * @type {Type}
		 * @property {Type} NamePart
		 * @const
		 * @tstype $protobuf.Type & {
		 *     NamePart: $protobuf.Type
		 * }
		 */

		/**
		 * Reflected source code info.
		 * @name SourceCodeInfo
		 * @type {Type}
		 * @property {Type} Location
		 * @const
		 * @tstype $protobuf.Type & {
		 *     Location: $protobuf.Type
		 * }
		 */

		/**
		 * Reflected generated code info.
		 * @name GeneratedCodeInfo
		 * @type {Type}
		 * @property {Type} Annotation
		 * @const
		 * @tstype $protobuf.Type & {
		 *     Annotation: $protobuf.Type
		 * }
		 */ 
	} (descriptor, descriptor.exports));
	return descriptor.exports;
}

var util$1 = {};

var nested$2 = {
	google: {
		nested: {
			protobuf: {
				nested: {
					Api: {
						fields: {
							name: {
								type: "string",
								id: 1
							},
							methods: {
								rule: "repeated",
								type: "Method",
								id: 2
							},
							options: {
								rule: "repeated",
								type: "Option",
								id: 3
							},
							version: {
								type: "string",
								id: 4
							},
							sourceContext: {
								type: "SourceContext",
								id: 5
							},
							mixins: {
								rule: "repeated",
								type: "Mixin",
								id: 6
							},
							syntax: {
								type: "Syntax",
								id: 7
							}
						}
					},
					Method: {
						fields: {
							name: {
								type: "string",
								id: 1
							},
							requestTypeUrl: {
								type: "string",
								id: 2
							},
							requestStreaming: {
								type: "bool",
								id: 3
							},
							responseTypeUrl: {
								type: "string",
								id: 4
							},
							responseStreaming: {
								type: "bool",
								id: 5
							},
							options: {
								rule: "repeated",
								type: "Option",
								id: 6
							},
							syntax: {
								type: "Syntax",
								id: 7
							}
						}
					},
					Mixin: {
						fields: {
							name: {
								type: "string",
								id: 1
							},
							root: {
								type: "string",
								id: 2
							}
						}
					},
					SourceContext: {
						fields: {
							fileName: {
								type: "string",
								id: 1
							}
						}
					},
					Option: {
						fields: {
							name: {
								type: "string",
								id: 1
							},
							value: {
								type: "Any",
								id: 2
							}
						}
					},
					Syntax: {
						values: {
							SYNTAX_PROTO2: 0,
							SYNTAX_PROTO3: 1
						}
					}
				}
			}
		}
	}
};
var require$$3 = {
	nested: nested$2
};

var nested$1 = {
	google: {
		nested: {
			protobuf: {
				nested: {
					SourceContext: {
						fields: {
							fileName: {
								type: "string",
								id: 1
							}
						}
					}
				}
			}
		}
	}
};
var require$$5 = {
	nested: nested$1
};

var nested = {
	google: {
		nested: {
			protobuf: {
				nested: {
					Type: {
						fields: {
							name: {
								type: "string",
								id: 1
							},
							fields: {
								rule: "repeated",
								type: "Field",
								id: 2
							},
							oneofs: {
								rule: "repeated",
								type: "string",
								id: 3
							},
							options: {
								rule: "repeated",
								type: "Option",
								id: 4
							},
							sourceContext: {
								type: "SourceContext",
								id: 5
							},
							syntax: {
								type: "Syntax",
								id: 6
							}
						}
					},
					Field: {
						fields: {
							kind: {
								type: "Kind",
								id: 1
							},
							cardinality: {
								type: "Cardinality",
								id: 2
							},
							number: {
								type: "int32",
								id: 3
							},
							name: {
								type: "string",
								id: 4
							},
							typeUrl: {
								type: "string",
								id: 6
							},
							oneofIndex: {
								type: "int32",
								id: 7
							},
							packed: {
								type: "bool",
								id: 8
							},
							options: {
								rule: "repeated",
								type: "Option",
								id: 9
							},
							jsonName: {
								type: "string",
								id: 10
							},
							defaultValue: {
								type: "string",
								id: 11
							}
						},
						nested: {
							Kind: {
								values: {
									TYPE_UNKNOWN: 0,
									TYPE_DOUBLE: 1,
									TYPE_FLOAT: 2,
									TYPE_INT64: 3,
									TYPE_UINT64: 4,
									TYPE_INT32: 5,
									TYPE_FIXED64: 6,
									TYPE_FIXED32: 7,
									TYPE_BOOL: 8,
									TYPE_STRING: 9,
									TYPE_GROUP: 10,
									TYPE_MESSAGE: 11,
									TYPE_BYTES: 12,
									TYPE_UINT32: 13,
									TYPE_ENUM: 14,
									TYPE_SFIXED32: 15,
									TYPE_SFIXED64: 16,
									TYPE_SINT32: 17,
									TYPE_SINT64: 18
								}
							},
							Cardinality: {
								values: {
									CARDINALITY_UNKNOWN: 0,
									CARDINALITY_OPTIONAL: 1,
									CARDINALITY_REQUIRED: 2,
									CARDINALITY_REPEATED: 3
								}
							}
						}
					},
					Enum: {
						fields: {
							name: {
								type: "string",
								id: 1
							},
							enumvalue: {
								rule: "repeated",
								type: "EnumValue",
								id: 2
							},
							options: {
								rule: "repeated",
								type: "Option",
								id: 3
							},
							sourceContext: {
								type: "SourceContext",
								id: 4
							},
							syntax: {
								type: "Syntax",
								id: 5
							}
						}
					},
					EnumValue: {
						fields: {
							name: {
								type: "string",
								id: 1
							},
							number: {
								type: "int32",
								id: 2
							},
							options: {
								rule: "repeated",
								type: "Option",
								id: 3
							}
						}
					},
					Option: {
						fields: {
							name: {
								type: "string",
								id: 1
							},
							value: {
								type: "Any",
								id: 2
							}
						}
					},
					Syntax: {
						values: {
							SYNTAX_PROTO2: 0,
							SYNTAX_PROTO3: 1
						}
					},
					Any: {
						fields: {
							type_url: {
								type: "string",
								id: 1
							},
							value: {
								type: "bytes",
								id: 2
							}
						}
					},
					SourceContext: {
						fields: {
							fileName: {
								type: "string",
								id: 1
							}
						}
					}
				}
			}
		}
	}
};
var require$$6 = {
	nested: nested
};

var hasRequiredUtil;

function requireUtil () {
	if (hasRequiredUtil) return util$1;
	hasRequiredUtil = 1;
	/**
	 * @license
	 * Copyright 2018 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(util$1, "__esModule", { value: true });
	util$1.addCommonProtos = util$1.loadProtosWithOptionsSync = util$1.loadProtosWithOptions = void 0;
	const fs = require$$0;
	const path = require$$1$3;
	const Protobuf = requireProtobufjs();
	function addIncludePathResolver(root, includePaths) {
	    const originalResolvePath = root.resolvePath;
	    root.resolvePath = (origin, target) => {
	        if (path.isAbsolute(target)) {
	            return target;
	        }
	        for (const directory of includePaths) {
	            const fullPath = path.join(directory, target);
	            try {
	                fs.accessSync(fullPath, fs.constants.R_OK);
	                return fullPath;
	            }
	            catch (err) {
	                continue;
	            }
	        }
	        process.emitWarning(`${target} not found in any of the include paths ${includePaths}`);
	        return originalResolvePath(origin, target);
	    };
	}
	async function loadProtosWithOptions(filename, options) {
	    const root = new Protobuf.Root();
	    options = options || {};
	    if (!!options.includeDirs) {
	        if (!Array.isArray(options.includeDirs)) {
	            return Promise.reject(new Error('The includeDirs option must be an array'));
	        }
	        addIncludePathResolver(root, options.includeDirs);
	    }
	    const loadedRoot = await root.load(filename, options);
	    loadedRoot.resolveAll();
	    return loadedRoot;
	}
	util$1.loadProtosWithOptions = loadProtosWithOptions;
	function loadProtosWithOptionsSync(filename, options) {
	    const root = new Protobuf.Root();
	    options = options || {};
	    if (!!options.includeDirs) {
	        if (!Array.isArray(options.includeDirs)) {
	            throw new Error('The includeDirs option must be an array');
	        }
	        addIncludePathResolver(root, options.includeDirs);
	    }
	    const loadedRoot = root.loadSync(filename, options);
	    loadedRoot.resolveAll();
	    return loadedRoot;
	}
	util$1.loadProtosWithOptionsSync = loadProtosWithOptionsSync;
	/**
	 * Load Google's well-known proto files that aren't exposed by Protobuf.js.
	 */
	function addCommonProtos() {
	    // Protobuf.js exposes: any, duration, empty, field_mask, struct, timestamp,
	    // and wrappers. compiler/plugin is excluded in Protobuf.js and here.
	    // Using constant strings for compatibility with tools like Webpack
	    const apiDescriptor = require$$3;
	    const descriptorDescriptor = require$$4;
	    const sourceContextDescriptor = require$$5;
	    const typeDescriptor = require$$6;
	    Protobuf.common('api', apiDescriptor.nested.google.nested.protobuf.nested);
	    Protobuf.common('descriptor', descriptorDescriptor.nested.google.nested.protobuf.nested);
	    Protobuf.common('source_context', sourceContextDescriptor.nested.google.nested.protobuf.nested);
	    Protobuf.common('type', typeDescriptor.nested.google.nested.protobuf.nested);
	}
	util$1.addCommonProtos = addCommonProtos;
	
	return util$1;
}

var umd = {exports: {}};

var hasRequiredUmd;

function requireUmd () {
	if (hasRequiredUmd) return umd.exports;
	hasRequiredUmd = 1;
	(function (module, exports) {
		// GENERATED FILE. DO NOT EDIT.
		var Long = (function(exports) {
		  
		  Object.defineProperty(exports, "__esModule", {
		    value: true
		  });
		  exports.default = void 0;
		  
		  /**
		   * @license
		   * Copyright 2009 The Closure Library Authors
		   * Copyright 2020 Daniel Wirtz / The long.js Authors.
		   *
		   * Licensed under the Apache License, Version 2.0 (the "License");
		   * you may not use this file except in compliance with the License.
		   * You may obtain a copy of the License at
		   *
		   *     http://www.apache.org/licenses/LICENSE-2.0
		   *
		   * Unless required by applicable law or agreed to in writing, software
		   * distributed under the License is distributed on an "AS IS" BASIS,
		   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		   * See the License for the specific language governing permissions and
		   * limitations under the License.
		   *
		   * SPDX-License-Identifier: Apache-2.0
		   */
		  // WebAssembly optimizations to do native i64 multiplication and divide
		  var wasm = null;
		  
		  try {
		    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
		  } catch (e) {// no wasm support :(
		  }
		  /**
		   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
		   *  See the from* functions below for more convenient ways of constructing Longs.
		   * @exports Long
		   * @class A Long class for representing a 64 bit two's-complement integer value.
		   * @param {number} low The low (signed) 32 bits of the long
		   * @param {number} high The high (signed) 32 bits of the long
		   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
		   * @constructor
		   */
		  
		  
		  function Long(low, high, unsigned) {
		    /**
		     * The low 32 bits as a signed value.
		     * @type {number}
		     */
		    this.low = low | 0;
		    /**
		     * The high 32 bits as a signed value.
		     * @type {number}
		     */
		  
		    this.high = high | 0;
		    /**
		     * Whether unsigned or not.
		     * @type {boolean}
		     */
		  
		    this.unsigned = !!unsigned;
		  } // The internal representation of a long is the two given signed, 32-bit values.
		  // We use 32-bit pieces because these are the size of integers on which
		  // Javascript performs bit-operations.  For operations like addition and
		  // multiplication, we split each number into 16 bit pieces, which can easily be
		  // multiplied within Javascript's floating-point representation without overflow
		  // or change in sign.
		  //
		  // In the algorithms below, we frequently reduce the negative case to the
		  // positive case by negating the input(s) and then post-processing the result.
		  // Note that we must ALWAYS check specially whether those values are MIN_VALUE
		  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
		  // a positive number, it overflows back into a negative).  Not handling this
		  // case would often result in infinite recursion.
		  //
		  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
		  // methods on which they depend.
		  
		  /**
		   * An indicator used to reliably determine if an object is a Long or not.
		   * @type {boolean}
		   * @const
		   * @private
		   */
		  
		  
		  Long.prototype.__isLong__;
		  Object.defineProperty(Long.prototype, "__isLong__", {
		    value: true
		  });
		  /**
		   * @function
		   * @param {*} obj Object
		   * @returns {boolean}
		   * @inner
		   */
		  
		  function isLong(obj) {
		    return (obj && obj["__isLong__"]) === true;
		  }
		  /**
		   * @function
		   * @param {*} value number
		   * @returns {number}
		   * @inner
		   */
		  
		  
		  function ctz32(value) {
		    var c = Math.clz32(value & -value);
		    return value ? 31 - c : c;
		  }
		  /**
		   * Tests if the specified object is a Long.
		   * @function
		   * @param {*} obj Object
		   * @returns {boolean}
		   */
		  
		  
		  Long.isLong = isLong;
		  /**
		   * A cache of the Long representations of small integer values.
		   * @type {!Object}
		   * @inner
		   */
		  
		  var INT_CACHE = {};
		  /**
		   * A cache of the Long representations of small unsigned integer values.
		   * @type {!Object}
		   * @inner
		   */
		  
		  var UINT_CACHE = {};
		  /**
		   * @param {number} value
		   * @param {boolean=} unsigned
		   * @returns {!Long}
		   * @inner
		   */
		  
		  function fromInt(value, unsigned) {
		    var obj, cachedObj, cache;
		  
		    if (unsigned) {
		      value >>>= 0;
		  
		      if (cache = 0 <= value && value < 256) {
		        cachedObj = UINT_CACHE[value];
		        if (cachedObj) return cachedObj;
		      }
		  
		      obj = fromBits(value, 0, true);
		      if (cache) UINT_CACHE[value] = obj;
		      return obj;
		    } else {
		      value |= 0;
		  
		      if (cache = -128 <= value && value < 128) {
		        cachedObj = INT_CACHE[value];
		        if (cachedObj) return cachedObj;
		      }
		  
		      obj = fromBits(value, value < 0 ? -1 : 0, false);
		      if (cache) INT_CACHE[value] = obj;
		      return obj;
		    }
		  }
		  /**
		   * Returns a Long representing the given 32 bit integer value.
		   * @function
		   * @param {number} value The 32 bit integer in question
		   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
		   * @returns {!Long} The corresponding Long value
		   */
		  
		  
		  Long.fromInt = fromInt;
		  /**
		   * @param {number} value
		   * @param {boolean=} unsigned
		   * @returns {!Long}
		   * @inner
		   */
		  
		  function fromNumber(value, unsigned) {
		    if (isNaN(value)) return unsigned ? UZERO : ZERO;
		  
		    if (unsigned) {
		      if (value < 0) return UZERO;
		      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;
		    } else {
		      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;
		      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;
		    }
		  
		    if (value < 0) return fromNumber(-value, unsigned).neg();
		    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
		  }
		  /**
		   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
		   * @function
		   * @param {number} value The number in question
		   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
		   * @returns {!Long} The corresponding Long value
		   */
		  
		  
		  Long.fromNumber = fromNumber;
		  /**
		   * @param {number} lowBits
		   * @param {number} highBits
		   * @param {boolean=} unsigned
		   * @returns {!Long}
		   * @inner
		   */
		  
		  function fromBits(lowBits, highBits, unsigned) {
		    return new Long(lowBits, highBits, unsigned);
		  }
		  /**
		   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
		   *  assumed to use 32 bits.
		   * @function
		   * @param {number} lowBits The low 32 bits
		   * @param {number} highBits The high 32 bits
		   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
		   * @returns {!Long} The corresponding Long value
		   */
		  
		  
		  Long.fromBits = fromBits;
		  /**
		   * @function
		   * @param {number} base
		   * @param {number} exponent
		   * @returns {number}
		   * @inner
		   */
		  
		  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)
		  
		  /**
		   * @param {string} str
		   * @param {(boolean|number)=} unsigned
		   * @param {number=} radix
		   * @returns {!Long}
		   * @inner
		   */
		  
		  function fromString(str, unsigned, radix) {
		    if (str.length === 0) throw Error('empty string');
		  
		    if (typeof unsigned === 'number') {
		      // For goog.math.long compatibility
		      radix = unsigned;
		      unsigned = false;
		    } else {
		      unsigned = !!unsigned;
		    }
		  
		    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity") return unsigned ? UZERO : ZERO;
		    radix = radix || 10;
		    if (radix < 2 || 36 < radix) throw RangeError('radix');
		    var p;
		    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {
		      return fromString(str.substring(1), unsigned, radix).neg();
		    } // Do several (8) digits each time through the loop, so as to
		    // minimize the calls to the very expensive emulated div.
		  
		    var radixToPower = fromNumber(pow_dbl(radix, 8));
		    var result = ZERO;
		  
		    for (var i = 0; i < str.length; i += 8) {
		      var size = Math.min(8, str.length - i),
		          value = parseInt(str.substring(i, i + size), radix);
		  
		      if (size < 8) {
		        var power = fromNumber(pow_dbl(radix, size));
		        result = result.mul(power).add(fromNumber(value));
		      } else {
		        result = result.mul(radixToPower);
		        result = result.add(fromNumber(value));
		      }
		    }
		  
		    result.unsigned = unsigned;
		    return result;
		  }
		  /**
		   * Returns a Long representation of the given string, written using the specified radix.
		   * @function
		   * @param {string} str The textual representation of the Long
		   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
		   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
		   * @returns {!Long} The corresponding Long value
		   */
		  
		  
		  Long.fromString = fromString;
		  /**
		   * @function
		   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
		   * @param {boolean=} unsigned
		   * @returns {!Long}
		   * @inner
		   */
		  
		  function fromValue(val, unsigned) {
		    if (typeof val === 'number') return fromNumber(val, unsigned);
		    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:
		  
		    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
		  }
		  /**
		   * Converts the specified value to a Long using the appropriate from* function for its type.
		   * @function
		   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
		   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
		   * @returns {!Long}
		   */
		  
		  
		  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
		  // no runtime penalty for these.
		  
		  /**
		   * @type {number}
		   * @const
		   * @inner
		   */
		  
		  var TWO_PWR_16_DBL = 1 << 16;
		  /**
		   * @type {number}
		   * @const
		   * @inner
		   */
		  
		  var TWO_PWR_24_DBL = 1 << 24;
		  /**
		   * @type {number}
		   * @const
		   * @inner
		   */
		  
		  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
		  /**
		   * @type {number}
		   * @const
		   * @inner
		   */
		  
		  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
		  /**
		   * @type {number}
		   * @const
		   * @inner
		   */
		  
		  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
		  /**
		   * @type {!Long}
		   * @const
		   * @inner
		   */
		  
		  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
		  /**
		   * @type {!Long}
		   * @inner
		   */
		  
		  var ZERO = fromInt(0);
		  /**
		   * Signed zero.
		   * @type {!Long}
		   */
		  
		  Long.ZERO = ZERO;
		  /**
		   * @type {!Long}
		   * @inner
		   */
		  
		  var UZERO = fromInt(0, true);
		  /**
		   * Unsigned zero.
		   * @type {!Long}
		   */
		  
		  Long.UZERO = UZERO;
		  /**
		   * @type {!Long}
		   * @inner
		   */
		  
		  var ONE = fromInt(1);
		  /**
		   * Signed one.
		   * @type {!Long}
		   */
		  
		  Long.ONE = ONE;
		  /**
		   * @type {!Long}
		   * @inner
		   */
		  
		  var UONE = fromInt(1, true);
		  /**
		   * Unsigned one.
		   * @type {!Long}
		   */
		  
		  Long.UONE = UONE;
		  /**
		   * @type {!Long}
		   * @inner
		   */
		  
		  var NEG_ONE = fromInt(-1);
		  /**
		   * Signed negative one.
		   * @type {!Long}
		   */
		  
		  Long.NEG_ONE = NEG_ONE;
		  /**
		   * @type {!Long}
		   * @inner
		   */
		  
		  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);
		  /**
		   * Maximum signed value.
		   * @type {!Long}
		   */
		  
		  Long.MAX_VALUE = MAX_VALUE;
		  /**
		   * @type {!Long}
		   * @inner
		   */
		  
		  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);
		  /**
		   * Maximum unsigned value.
		   * @type {!Long}
		   */
		  
		  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
		  /**
		   * @type {!Long}
		   * @inner
		   */
		  
		  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);
		  /**
		   * Minimum signed value.
		   * @type {!Long}
		   */
		  
		  Long.MIN_VALUE = MIN_VALUE;
		  /**
		   * @alias Long.prototype
		   * @inner
		   */
		  
		  var LongPrototype = Long.prototype;
		  /**
		   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
		   * @this {!Long}
		   * @returns {number}
		   */
		  
		  LongPrototype.toInt = function toInt() {
		    return this.unsigned ? this.low >>> 0 : this.low;
		  };
		  /**
		   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
		   * @this {!Long}
		   * @returns {number}
		   */
		  
		  
		  LongPrototype.toNumber = function toNumber() {
		    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
		    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
		  };
		  /**
		   * Converts the Long to a string written in the specified radix.
		   * @this {!Long}
		   * @param {number=} radix Radix (2-36), defaults to 10
		   * @returns {string}
		   * @override
		   * @throws {RangeError} If `radix` is out of range
		   */
		  
		  
		  LongPrototype.toString = function toString(radix) {
		    radix = radix || 10;
		    if (radix < 2 || 36 < radix) throw RangeError('radix');
		    if (this.isZero()) return '0';
		  
		    if (this.isNegative()) {
		      // Unsigned Longs are never negative
		      if (this.eq(MIN_VALUE)) {
		        // We need to change the Long value before it can be negated, so we remove
		        // the bottom-most digit in this base and then recurse to do the rest.
		        var radixLong = fromNumber(radix),
		            div = this.div(radixLong),
		            rem1 = div.mul(radixLong).sub(this);
		        return div.toString(radix) + rem1.toInt().toString(radix);
		      } else return '-' + this.neg().toString(radix);
		    } // Do several (6) digits each time through the loop, so as to
		    // minimize the calls to the very expensive emulated div.
		  
		  
		    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
		        rem = this;
		    var result = '';
		  
		    while (true) {
		      var remDiv = rem.div(radixToPower),
		          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
		          digits = intval.toString(radix);
		      rem = remDiv;
		      if (rem.isZero()) return digits + result;else {
		        while (digits.length < 6) digits = '0' + digits;
		  
		        result = '' + digits + result;
		      }
		    }
		  };
		  /**
		   * Gets the high 32 bits as a signed integer.
		   * @this {!Long}
		   * @returns {number} Signed high bits
		   */
		  
		  
		  LongPrototype.getHighBits = function getHighBits() {
		    return this.high;
		  };
		  /**
		   * Gets the high 32 bits as an unsigned integer.
		   * @this {!Long}
		   * @returns {number} Unsigned high bits
		   */
		  
		  
		  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
		    return this.high >>> 0;
		  };
		  /**
		   * Gets the low 32 bits as a signed integer.
		   * @this {!Long}
		   * @returns {number} Signed low bits
		   */
		  
		  
		  LongPrototype.getLowBits = function getLowBits() {
		    return this.low;
		  };
		  /**
		   * Gets the low 32 bits as an unsigned integer.
		   * @this {!Long}
		   * @returns {number} Unsigned low bits
		   */
		  
		  
		  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
		    return this.low >>> 0;
		  };
		  /**
		   * Gets the number of bits needed to represent the absolute value of this Long.
		   * @this {!Long}
		   * @returns {number}
		   */
		  
		  
		  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
		    if (this.isNegative()) // Unsigned Longs are never negative
		      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
		    var val = this.high != 0 ? this.high : this.low;
		  
		    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;
		  
		    return this.high != 0 ? bit + 33 : bit + 1;
		  };
		  /**
		   * Tests if this Long's value equals zero.
		   * @this {!Long}
		   * @returns {boolean}
		   */
		  
		  
		  LongPrototype.isZero = function isZero() {
		    return this.high === 0 && this.low === 0;
		  };
		  /**
		   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
		   * @returns {boolean}
		   */
		  
		  
		  LongPrototype.eqz = LongPrototype.isZero;
		  /**
		   * Tests if this Long's value is negative.
		   * @this {!Long}
		   * @returns {boolean}
		   */
		  
		  LongPrototype.isNegative = function isNegative() {
		    return !this.unsigned && this.high < 0;
		  };
		  /**
		   * Tests if this Long's value is positive or zero.
		   * @this {!Long}
		   * @returns {boolean}
		   */
		  
		  
		  LongPrototype.isPositive = function isPositive() {
		    return this.unsigned || this.high >= 0;
		  };
		  /**
		   * Tests if this Long's value is odd.
		   * @this {!Long}
		   * @returns {boolean}
		   */
		  
		  
		  LongPrototype.isOdd = function isOdd() {
		    return (this.low & 1) === 1;
		  };
		  /**
		   * Tests if this Long's value is even.
		   * @this {!Long}
		   * @returns {boolean}
		   */
		  
		  
		  LongPrototype.isEven = function isEven() {
		    return (this.low & 1) === 0;
		  };
		  /**
		   * Tests if this Long's value equals the specified's.
		   * @this {!Long}
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  
		  
		  LongPrototype.equals = function equals(other) {
		    if (!isLong(other)) other = fromValue(other);
		    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;
		    return this.high === other.high && this.low === other.low;
		  };
		  /**
		   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  
		  
		  LongPrototype.eq = LongPrototype.equals;
		  /**
		   * Tests if this Long's value differs from the specified's.
		   * @this {!Long}
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  
		  LongPrototype.notEquals = function notEquals(other) {
		    return !this.eq(
		    /* validates */
		    other);
		  };
		  /**
		   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  
		  
		  LongPrototype.neq = LongPrototype.notEquals;
		  /**
		   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  
		  LongPrototype.ne = LongPrototype.notEquals;
		  /**
		   * Tests if this Long's value is less than the specified's.
		   * @this {!Long}
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  
		  LongPrototype.lessThan = function lessThan(other) {
		    return this.comp(
		    /* validates */
		    other) < 0;
		  };
		  /**
		   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  
		  
		  LongPrototype.lt = LongPrototype.lessThan;
		  /**
		   * Tests if this Long's value is less than or equal the specified's.
		   * @this {!Long}
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  
		  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
		    return this.comp(
		    /* validates */
		    other) <= 0;
		  };
		  /**
		   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  
		  
		  LongPrototype.lte = LongPrototype.lessThanOrEqual;
		  /**
		   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  
		  LongPrototype.le = LongPrototype.lessThanOrEqual;
		  /**
		   * Tests if this Long's value is greater than the specified's.
		   * @this {!Long}
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  
		  LongPrototype.greaterThan = function greaterThan(other) {
		    return this.comp(
		    /* validates */
		    other) > 0;
		  };
		  /**
		   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  
		  
		  LongPrototype.gt = LongPrototype.greaterThan;
		  /**
		   * Tests if this Long's value is greater than or equal the specified's.
		   * @this {!Long}
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  
		  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
		    return this.comp(
		    /* validates */
		    other) >= 0;
		  };
		  /**
		   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  
		  
		  LongPrototype.gte = LongPrototype.greaterThanOrEqual;
		  /**
		   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  
		  LongPrototype.ge = LongPrototype.greaterThanOrEqual;
		  /**
		   * Compares this Long's value with the specified's.
		   * @this {!Long}
		   * @param {!Long|number|string} other Other value
		   * @returns {number} 0 if they are the same, 1 if the this is greater and -1
		   *  if the given one is greater
		   */
		  
		  LongPrototype.compare = function compare(other) {
		    if (!isLong(other)) other = fromValue(other);
		    if (this.eq(other)) return 0;
		    var thisNeg = this.isNegative(),
		        otherNeg = other.isNegative();
		    if (thisNeg && !otherNeg) return -1;
		    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same
		  
		    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned
		  
		    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
		  };
		  /**
		   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {number} 0 if they are the same, 1 if the this is greater and -1
		   *  if the given one is greater
		   */
		  
		  
		  LongPrototype.comp = LongPrototype.compare;
		  /**
		   * Negates this Long's value.
		   * @this {!Long}
		   * @returns {!Long} Negated Long
		   */
		  
		  LongPrototype.negate = function negate() {
		    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;
		    return this.not().add(ONE);
		  };
		  /**
		   * Negates this Long's value. This is an alias of {@link Long#negate}.
		   * @function
		   * @returns {!Long} Negated Long
		   */
		  
		  
		  LongPrototype.neg = LongPrototype.negate;
		  /**
		   * Returns the sum of this and the specified Long.
		   * @this {!Long}
		   * @param {!Long|number|string} addend Addend
		   * @returns {!Long} Sum
		   */
		  
		  LongPrototype.add = function add(addend) {
		    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
		  
		    var a48 = this.high >>> 16;
		    var a32 = this.high & 0xFFFF;
		    var a16 = this.low >>> 16;
		    var a00 = this.low & 0xFFFF;
		    var b48 = addend.high >>> 16;
		    var b32 = addend.high & 0xFFFF;
		    var b16 = addend.low >>> 16;
		    var b00 = addend.low & 0xFFFF;
		    var c48 = 0,
		        c32 = 0,
		        c16 = 0,
		        c00 = 0;
		    c00 += a00 + b00;
		    c16 += c00 >>> 16;
		    c00 &= 0xFFFF;
		    c16 += a16 + b16;
		    c32 += c16 >>> 16;
		    c16 &= 0xFFFF;
		    c32 += a32 + b32;
		    c48 += c32 >>> 16;
		    c32 &= 0xFFFF;
		    c48 += a48 + b48;
		    c48 &= 0xFFFF;
		    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
		  };
		  /**
		   * Returns the difference of this and the specified Long.
		   * @this {!Long}
		   * @param {!Long|number|string} subtrahend Subtrahend
		   * @returns {!Long} Difference
		   */
		  
		  
		  LongPrototype.subtract = function subtract(subtrahend) {
		    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);
		    return this.add(subtrahend.neg());
		  };
		  /**
		   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
		   * @function
		   * @param {!Long|number|string} subtrahend Subtrahend
		   * @returns {!Long} Difference
		   */
		  
		  
		  LongPrototype.sub = LongPrototype.subtract;
		  /**
		   * Returns the product of this and the specified Long.
		   * @this {!Long}
		   * @param {!Long|number|string} multiplier Multiplier
		   * @returns {!Long} Product
		   */
		  
		  LongPrototype.multiply = function multiply(multiplier) {
		    if (this.isZero()) return this;
		    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present
		  
		    if (wasm) {
		      var low = wasm["mul"](this.low, this.high, multiplier.low, multiplier.high);
		      return fromBits(low, wasm["get_high"](), this.unsigned);
		    }
		  
		    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;
		    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;
		    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;
		  
		    if (this.isNegative()) {
		      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();
		    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication
		  
		  
		    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
		    // We can skip products that would overflow.
		  
		    var a48 = this.high >>> 16;
		    var a32 = this.high & 0xFFFF;
		    var a16 = this.low >>> 16;
		    var a00 = this.low & 0xFFFF;
		    var b48 = multiplier.high >>> 16;
		    var b32 = multiplier.high & 0xFFFF;
		    var b16 = multiplier.low >>> 16;
		    var b00 = multiplier.low & 0xFFFF;
		    var c48 = 0,
		        c32 = 0,
		        c16 = 0,
		        c00 = 0;
		    c00 += a00 * b00;
		    c16 += c00 >>> 16;
		    c00 &= 0xFFFF;
		    c16 += a16 * b00;
		    c32 += c16 >>> 16;
		    c16 &= 0xFFFF;
		    c16 += a00 * b16;
		    c32 += c16 >>> 16;
		    c16 &= 0xFFFF;
		    c32 += a32 * b00;
		    c48 += c32 >>> 16;
		    c32 &= 0xFFFF;
		    c32 += a16 * b16;
		    c48 += c32 >>> 16;
		    c32 &= 0xFFFF;
		    c32 += a00 * b32;
		    c48 += c32 >>> 16;
		    c32 &= 0xFFFF;
		    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
		    c48 &= 0xFFFF;
		    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
		  };
		  /**
		   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
		   * @function
		   * @param {!Long|number|string} multiplier Multiplier
		   * @returns {!Long} Product
		   */
		  
		  
		  LongPrototype.mul = LongPrototype.multiply;
		  /**
		   * Returns this Long divided by the specified. The result is signed if this Long is signed or
		   *  unsigned if this Long is unsigned.
		   * @this {!Long}
		   * @param {!Long|number|string} divisor Divisor
		   * @returns {!Long} Quotient
		   */
		  
		  LongPrototype.divide = function divide(divisor) {
		    if (!isLong(divisor)) divisor = fromValue(divisor);
		    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present
		  
		    if (wasm) {
		      // guard against signed division overflow: the largest
		      // negative number / -1 would be 1 larger than the largest
		      // positive number, due to two's complement.
		      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {
		        // be consistent with non-wasm code path
		        return this;
		      }
		  
		      var low = (this.unsigned ? wasm["div_u"] : wasm["div_s"])(this.low, this.high, divisor.low, divisor.high);
		      return fromBits(low, wasm["get_high"](), this.unsigned);
		    }
		  
		    if (this.isZero()) return this.unsigned ? UZERO : ZERO;
		    var approx, rem, res;
		  
		    if (!this.unsigned) {
		      // This section is only relevant for signed longs and is derived from the
		      // closure library as a whole.
		      if (this.eq(MIN_VALUE)) {
		        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE
		        else if (divisor.eq(MIN_VALUE)) return ONE;else {
		          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
		          var halfThis = this.shr(1);
		          approx = halfThis.div(divisor).shl(1);
		  
		          if (approx.eq(ZERO)) {
		            return divisor.isNegative() ? ONE : NEG_ONE;
		          } else {
		            rem = this.sub(divisor.mul(approx));
		            res = approx.add(rem.div(divisor));
		            return res;
		          }
		        }
		      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;
		  
		      if (this.isNegative()) {
		        if (divisor.isNegative()) return this.neg().div(divisor.neg());
		        return this.neg().div(divisor).neg();
		      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();
		  
		      res = ZERO;
		    } else {
		      // The algorithm below has not been made for unsigned longs. It's therefore
		      // required to take special care of the MSB prior to running it.
		      if (!divisor.unsigned) divisor = divisor.toUnsigned();
		      if (divisor.gt(this)) return UZERO;
		      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
		        return UONE;
		      res = UZERO;
		    } // Repeat the following until the remainder is less than other:  find a
		    // floating-point that approximates remainder / other *from below*, add this
		    // into the result, and subtract it from the remainder.  It is critical that
		    // the approximate value is less than or equal to the real value so that the
		    // remainder never becomes negative.
		  
		  
		    rem = this;
		  
		    while (rem.gte(divisor)) {
		      // Approximate the result of division. This may be a little greater or
		      // smaller than the actual value.
		      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or
		      // the smallest non-fractional digit, whichever is larger.
		  
		      var log2 = Math.ceil(Math.log(approx) / Math.LN2),
		          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),
		          // Decrease the approximation until it is smaller than the remainder.  Note
		      // that if it is too large, the product overflows and is negative.
		      approxRes = fromNumber(approx),
		          approxRem = approxRes.mul(divisor);
		  
		      while (approxRem.isNegative() || approxRem.gt(rem)) {
		        approx -= delta;
		        approxRes = fromNumber(approx, this.unsigned);
		        approxRem = approxRes.mul(divisor);
		      } // We know the answer can't be zero... and actually, zero would cause
		      // infinite recursion since we would make no progress.
		  
		  
		      if (approxRes.isZero()) approxRes = ONE;
		      res = res.add(approxRes);
		      rem = rem.sub(approxRem);
		    }
		  
		    return res;
		  };
		  /**
		   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
		   * @function
		   * @param {!Long|number|string} divisor Divisor
		   * @returns {!Long} Quotient
		   */
		  
		  
		  LongPrototype.div = LongPrototype.divide;
		  /**
		   * Returns this Long modulo the specified.
		   * @this {!Long}
		   * @param {!Long|number|string} divisor Divisor
		   * @returns {!Long} Remainder
		   */
		  
		  LongPrototype.modulo = function modulo(divisor) {
		    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present
		  
		    if (wasm) {
		      var low = (this.unsigned ? wasm["rem_u"] : wasm["rem_s"])(this.low, this.high, divisor.low, divisor.high);
		      return fromBits(low, wasm["get_high"](), this.unsigned);
		    }
		  
		    return this.sub(this.div(divisor).mul(divisor));
		  };
		  /**
		   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
		   * @function
		   * @param {!Long|number|string} divisor Divisor
		   * @returns {!Long} Remainder
		   */
		  
		  
		  LongPrototype.mod = LongPrototype.modulo;
		  /**
		   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
		   * @function
		   * @param {!Long|number|string} divisor Divisor
		   * @returns {!Long} Remainder
		   */
		  
		  LongPrototype.rem = LongPrototype.modulo;
		  /**
		   * Returns the bitwise NOT of this Long.
		   * @this {!Long}
		   * @returns {!Long}
		   */
		  
		  LongPrototype.not = function not() {
		    return fromBits(~this.low, ~this.high, this.unsigned);
		  };
		  /**
		   * Returns count leading zeros of this Long.
		   * @this {!Long}
		   * @returns {!number}
		   */
		  
		  
		  LongPrototype.countLeadingZeros = function countLeadingZeros() {
		    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;
		  };
		  /**
		   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.
		   * @function
		   * @param {!Long}
		   * @returns {!number}
		   */
		  
		  
		  LongPrototype.clz = LongPrototype.countLeadingZeros;
		  /**
		   * Returns count trailing zeros of this Long.
		   * @this {!Long}
		   * @returns {!number}
		   */
		  
		  LongPrototype.countTrailingZeros = function countTrailingZeros() {
		    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;
		  };
		  /**
		   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.
		   * @function
		   * @param {!Long}
		   * @returns {!number}
		   */
		  
		  
		  LongPrototype.ctz = LongPrototype.countTrailingZeros;
		  /**
		   * Returns the bitwise AND of this Long and the specified.
		   * @this {!Long}
		   * @param {!Long|number|string} other Other Long
		   * @returns {!Long}
		   */
		  
		  LongPrototype.and = function and(other) {
		    if (!isLong(other)) other = fromValue(other);
		    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
		  };
		  /**
		   * Returns the bitwise OR of this Long and the specified.
		   * @this {!Long}
		   * @param {!Long|number|string} other Other Long
		   * @returns {!Long}
		   */
		  
		  
		  LongPrototype.or = function or(other) {
		    if (!isLong(other)) other = fromValue(other);
		    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
		  };
		  /**
		   * Returns the bitwise XOR of this Long and the given one.
		   * @this {!Long}
		   * @param {!Long|number|string} other Other Long
		   * @returns {!Long}
		   */
		  
		  
		  LongPrototype.xor = function xor(other) {
		    if (!isLong(other)) other = fromValue(other);
		    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
		  };
		  /**
		   * Returns this Long with bits shifted to the left by the given amount.
		   * @this {!Long}
		   * @param {number|!Long} numBits Number of bits
		   * @returns {!Long} Shifted Long
		   */
		  
		  
		  LongPrototype.shiftLeft = function shiftLeft(numBits) {
		    if (isLong(numBits)) numBits = numBits.toInt();
		    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);
		  };
		  /**
		   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
		   * @function
		   * @param {number|!Long} numBits Number of bits
		   * @returns {!Long} Shifted Long
		   */
		  
		  
		  LongPrototype.shl = LongPrototype.shiftLeft;
		  /**
		   * Returns this Long with bits arithmetically shifted to the right by the given amount.
		   * @this {!Long}
		   * @param {number|!Long} numBits Number of bits
		   * @returns {!Long} Shifted Long
		   */
		  
		  LongPrototype.shiftRight = function shiftRight(numBits) {
		    if (isLong(numBits)) numBits = numBits.toInt();
		    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
		  };
		  /**
		   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
		   * @function
		   * @param {number|!Long} numBits Number of bits
		   * @returns {!Long} Shifted Long
		   */
		  
		  
		  LongPrototype.shr = LongPrototype.shiftRight;
		  /**
		   * Returns this Long with bits logically shifted to the right by the given amount.
		   * @this {!Long}
		   * @param {number|!Long} numBits Number of bits
		   * @returns {!Long} Shifted Long
		   */
		  
		  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
		    if (isLong(numBits)) numBits = numBits.toInt();
		    if ((numBits &= 63) === 0) return this;
		    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);
		    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);
		    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);
		  };
		  /**
		   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
		   * @function
		   * @param {number|!Long} numBits Number of bits
		   * @returns {!Long} Shifted Long
		   */
		  
		  
		  LongPrototype.shru = LongPrototype.shiftRightUnsigned;
		  /**
		   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
		   * @function
		   * @param {number|!Long} numBits Number of bits
		   * @returns {!Long} Shifted Long
		   */
		  
		  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;
		  /**
		   * Returns this Long with bits rotated to the left by the given amount.
		   * @this {!Long}
		   * @param {number|!Long} numBits Number of bits
		   * @returns {!Long} Rotated Long
		   */
		  
		  LongPrototype.rotateLeft = function rotateLeft(numBits) {
		    var b;
		    if (isLong(numBits)) numBits = numBits.toInt();
		    if ((numBits &= 63) === 0) return this;
		    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);
		  
		    if (numBits < 32) {
		      b = 32 - numBits;
		      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);
		    }
		  
		    numBits -= 32;
		    b = 32 - numBits;
		    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);
		  };
		  /**
		   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.
		   * @function
		   * @param {number|!Long} numBits Number of bits
		   * @returns {!Long} Rotated Long
		   */
		  
		  
		  LongPrototype.rotl = LongPrototype.rotateLeft;
		  /**
		   * Returns this Long with bits rotated to the right by the given amount.
		   * @this {!Long}
		   * @param {number|!Long} numBits Number of bits
		   * @returns {!Long} Rotated Long
		   */
		  
		  LongPrototype.rotateRight = function rotateRight(numBits) {
		    var b;
		    if (isLong(numBits)) numBits = numBits.toInt();
		    if ((numBits &= 63) === 0) return this;
		    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);
		  
		    if (numBits < 32) {
		      b = 32 - numBits;
		      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);
		    }
		  
		    numBits -= 32;
		    b = 32 - numBits;
		    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);
		  };
		  /**
		   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.
		   * @function
		   * @param {number|!Long} numBits Number of bits
		   * @returns {!Long} Rotated Long
		   */
		  
		  
		  LongPrototype.rotr = LongPrototype.rotateRight;
		  /**
		   * Converts this Long to signed.
		   * @this {!Long}
		   * @returns {!Long} Signed long
		   */
		  
		  LongPrototype.toSigned = function toSigned() {
		    if (!this.unsigned) return this;
		    return fromBits(this.low, this.high, false);
		  };
		  /**
		   * Converts this Long to unsigned.
		   * @this {!Long}
		   * @returns {!Long} Unsigned long
		   */
		  
		  
		  LongPrototype.toUnsigned = function toUnsigned() {
		    if (this.unsigned) return this;
		    return fromBits(this.low, this.high, true);
		  };
		  /**
		   * Converts this Long to its byte representation.
		   * @param {boolean=} le Whether little or big endian, defaults to big endian
		   * @this {!Long}
		   * @returns {!Array.<number>} Byte representation
		   */
		  
		  
		  LongPrototype.toBytes = function toBytes(le) {
		    return le ? this.toBytesLE() : this.toBytesBE();
		  };
		  /**
		   * Converts this Long to its little endian byte representation.
		   * @this {!Long}
		   * @returns {!Array.<number>} Little endian byte representation
		   */
		  
		  
		  LongPrototype.toBytesLE = function toBytesLE() {
		    var hi = this.high,
		        lo = this.low;
		    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];
		  };
		  /**
		   * Converts this Long to its big endian byte representation.
		   * @this {!Long}
		   * @returns {!Array.<number>} Big endian byte representation
		   */
		  
		  
		  LongPrototype.toBytesBE = function toBytesBE() {
		    var hi = this.high,
		        lo = this.low;
		    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];
		  };
		  /**
		   * Creates a Long from its byte representation.
		   * @param {!Array.<number>} bytes Byte representation
		   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
		   * @param {boolean=} le Whether little or big endian, defaults to big endian
		   * @returns {Long} The corresponding Long value
		   */
		  
		  
		  Long.fromBytes = function fromBytes(bytes, unsigned, le) {
		    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
		  };
		  /**
		   * Creates a Long from its little endian byte representation.
		   * @param {!Array.<number>} bytes Little endian byte representation
		   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
		   * @returns {Long} The corresponding Long value
		   */
		  
		  
		  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
		    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);
		  };
		  /**
		   * Creates a Long from its big endian byte representation.
		   * @param {!Array.<number>} bytes Big endian byte representation
		   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
		   * @returns {Long} The corresponding Long value
		   */
		  
		  
		  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
		    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);
		  };
		  
		  var _default = Long;
		  exports.default = _default;
		  return "default" in exports ? exports.default : exports;
		})({});
		module.exports = Long; 
	} (umd));
	return umd.exports;
}

var hasRequiredSrc;

function requireSrc () {
	if (hasRequiredSrc) return src$1;
	hasRequiredSrc = 1;
	(function (exports) {
		/**
		 * @license
		 * Copyright 2018 gRPC authors.
		 *
		 * Licensed under the Apache License, Version 2.0 (the "License");
		 * you may not use this file except in compliance with the License.
		 * You may obtain a copy of the License at
		 *
		 *     http://www.apache.org/licenses/LICENSE-2.0
		 *
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS,
		 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 * See the License for the specific language governing permissions and
		 * limitations under the License.
		 *
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.loadFileDescriptorSetFromObject = exports.loadFileDescriptorSetFromBuffer = exports.fromJSON = exports.loadSync = exports.load = exports.IdempotencyLevel = exports.isAnyExtension = exports.Long = void 0;
		const camelCase = requireLodash_camelcase();
		const Protobuf = requireProtobufjs();
		const descriptor = requireDescriptor();
		const util_1 = requireUtil();
		const Long = requireUmd();
		exports.Long = Long;
		function isAnyExtension(obj) {
		    return ('@type' in obj) && (typeof obj['@type'] === 'string');
		}
		exports.isAnyExtension = isAnyExtension;
		var IdempotencyLevel;
		(function (IdempotencyLevel) {
		    IdempotencyLevel["IDEMPOTENCY_UNKNOWN"] = "IDEMPOTENCY_UNKNOWN";
		    IdempotencyLevel["NO_SIDE_EFFECTS"] = "NO_SIDE_EFFECTS";
		    IdempotencyLevel["IDEMPOTENT"] = "IDEMPOTENT";
		})(IdempotencyLevel = exports.IdempotencyLevel || (exports.IdempotencyLevel = {}));
		const descriptorOptions = {
		    longs: String,
		    enums: String,
		    bytes: String,
		    defaults: true,
		    oneofs: true,
		    json: true,
		};
		function joinName(baseName, name) {
		    if (baseName === '') {
		        return name;
		    }
		    else {
		        return baseName + '.' + name;
		    }
		}
		function isHandledReflectionObject(obj) {
		    return (obj instanceof Protobuf.Service ||
		        obj instanceof Protobuf.Type ||
		        obj instanceof Protobuf.Enum);
		}
		function isNamespaceBase(obj) {
		    return obj instanceof Protobuf.Namespace || obj instanceof Protobuf.Root;
		}
		function getAllHandledReflectionObjects(obj, parentName) {
		    const objName = joinName(parentName, obj.name);
		    if (isHandledReflectionObject(obj)) {
		        return [[objName, obj]];
		    }
		    else {
		        if (isNamespaceBase(obj) && typeof obj.nested !== 'undefined') {
		            return Object.keys(obj.nested)
		                .map(name => {
		                return getAllHandledReflectionObjects(obj.nested[name], objName);
		            })
		                .reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);
		        }
		    }
		    return [];
		}
		function createDeserializer(cls, options) {
		    return function deserialize(argBuf) {
		        return cls.toObject(cls.decode(argBuf), options);
		    };
		}
		function createSerializer(cls) {
		    return function serialize(arg) {
		        if (Array.isArray(arg)) {
		            throw new Error(`Failed to serialize message: expected object with ${cls.name} structure, got array instead`);
		        }
		        const message = cls.fromObject(arg);
		        return cls.encode(message).finish();
		    };
		}
		function mapMethodOptions(options) {
		    return (options || []).reduce((obj, item) => {
		        for (const [key, value] of Object.entries(item)) {
		            switch (key) {
		                case 'uninterpreted_option':
		                    obj.uninterpreted_option.push(item.uninterpreted_option);
		                    break;
		                default:
		                    obj[key] = value;
		            }
		        }
		        return obj;
		    }, {
		        deprecated: false,
		        idempotency_level: IdempotencyLevel.IDEMPOTENCY_UNKNOWN,
		        uninterpreted_option: [],
		    });
		}
		function createMethodDefinition(method, serviceName, options, fileDescriptors) {
		    /* This is only ever called after the corresponding root.resolveAll(), so we
		     * can assume that the resolved request and response types are non-null */
		    const requestType = method.resolvedRequestType;
		    const responseType = method.resolvedResponseType;
		    return {
		        path: '/' + serviceName + '/' + method.name,
		        requestStream: !!method.requestStream,
		        responseStream: !!method.responseStream,
		        requestSerialize: createSerializer(requestType),
		        requestDeserialize: createDeserializer(requestType, options),
		        responseSerialize: createSerializer(responseType),
		        responseDeserialize: createDeserializer(responseType, options),
		        // TODO(murgatroid99): Find a better way to handle this
		        originalName: camelCase(method.name),
		        requestType: createMessageDefinition(requestType, fileDescriptors),
		        responseType: createMessageDefinition(responseType, fileDescriptors),
		        options: mapMethodOptions(method.parsedOptions),
		    };
		}
		function createServiceDefinition(service, name, options, fileDescriptors) {
		    const def = {};
		    for (const method of service.methodsArray) {
		        def[method.name] = createMethodDefinition(method, name, options, fileDescriptors);
		    }
		    return def;
		}
		function createMessageDefinition(message, fileDescriptors) {
		    const messageDescriptor = message.toDescriptor('proto3');
		    return {
		        format: 'Protocol Buffer 3 DescriptorProto',
		        type: messageDescriptor.$type.toObject(messageDescriptor, descriptorOptions),
		        fileDescriptorProtos: fileDescriptors,
		    };
		}
		function createEnumDefinition(enumType, fileDescriptors) {
		    const enumDescriptor = enumType.toDescriptor('proto3');
		    return {
		        format: 'Protocol Buffer 3 EnumDescriptorProto',
		        type: enumDescriptor.$type.toObject(enumDescriptor, descriptorOptions),
		        fileDescriptorProtos: fileDescriptors,
		    };
		}
		/**
		 * function createDefinition(obj: Protobuf.Service, name: string, options:
		 * Options): ServiceDefinition; function createDefinition(obj: Protobuf.Type,
		 * name: string, options: Options): MessageTypeDefinition; function
		 * createDefinition(obj: Protobuf.Enum, name: string, options: Options):
		 * EnumTypeDefinition;
		 */
		function createDefinition(obj, name, options, fileDescriptors) {
		    if (obj instanceof Protobuf.Service) {
		        return createServiceDefinition(obj, name, options, fileDescriptors);
		    }
		    else if (obj instanceof Protobuf.Type) {
		        return createMessageDefinition(obj, fileDescriptors);
		    }
		    else if (obj instanceof Protobuf.Enum) {
		        return createEnumDefinition(obj, fileDescriptors);
		    }
		    else {
		        throw new Error('Type mismatch in reflection object handling');
		    }
		}
		function createPackageDefinition(root, options) {
		    const def = {};
		    root.resolveAll();
		    const descriptorList = root.toDescriptor('proto3').file;
		    const bufferList = descriptorList.map(value => Buffer.from(descriptor.FileDescriptorProto.encode(value).finish()));
		    for (const [name, obj] of getAllHandledReflectionObjects(root, '')) {
		        def[name] = createDefinition(obj, name, options, bufferList);
		    }
		    return def;
		}
		function createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options) {
		    options = options || {};
		    const root = Protobuf.Root.fromDescriptor(decodedDescriptorSet);
		    root.resolveAll();
		    return createPackageDefinition(root, options);
		}
		/**
		 * Load a .proto file with the specified options.
		 * @param filename One or multiple file paths to load. Can be an absolute path
		 *     or relative to an include path.
		 * @param options.keepCase Preserve field names. The default is to change them
		 *     to camel case.
		 * @param options.longs The type that should be used to represent `long` values.
		 *     Valid options are `Number` and `String`. Defaults to a `Long` object type
		 *     from a library.
		 * @param options.enums The type that should be used to represent `enum` values.
		 *     The only valid option is `String`. Defaults to the numeric value.
		 * @param options.bytes The type that should be used to represent `bytes`
		 *     values. Valid options are `Array` and `String`. The default is to use
		 *     `Buffer`.
		 * @param options.defaults Set default values on output objects. Defaults to
		 *     `false`.
		 * @param options.arrays Set empty arrays for missing array values even if
		 *     `defaults` is `false`. Defaults to `false`.
		 * @param options.objects Set empty objects for missing object values even if
		 *     `defaults` is `false`. Defaults to `false`.
		 * @param options.oneofs Set virtual oneof properties to the present field's
		 *     name
		 * @param options.json Represent Infinity and NaN as strings in float fields,
		 *     and automatically decode google.protobuf.Any values.
		 * @param options.includeDirs Paths to search for imported `.proto` files.
		 */
		function load(filename, options) {
		    return (0, util_1.loadProtosWithOptions)(filename, options).then(loadedRoot => {
		        return createPackageDefinition(loadedRoot, options);
		    });
		}
		exports.load = load;
		function loadSync(filename, options) {
		    const loadedRoot = (0, util_1.loadProtosWithOptionsSync)(filename, options);
		    return createPackageDefinition(loadedRoot, options);
		}
		exports.loadSync = loadSync;
		function fromJSON(json, options) {
		    options = options || {};
		    const loadedRoot = Protobuf.Root.fromJSON(json);
		    loadedRoot.resolveAll();
		    return createPackageDefinition(loadedRoot, options);
		}
		exports.fromJSON = fromJSON;
		function loadFileDescriptorSetFromBuffer(descriptorSet, options) {
		    const decodedDescriptorSet = descriptor.FileDescriptorSet.decode(descriptorSet);
		    return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);
		}
		exports.loadFileDescriptorSetFromBuffer = loadFileDescriptorSetFromBuffer;
		function loadFileDescriptorSetFromObject(descriptorSet, options) {
		    const decodedDescriptorSet = descriptor.FileDescriptorSet.fromObject(descriptorSet);
		    return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);
		}
		exports.loadFileDescriptorSetFromObject = loadFileDescriptorSetFromObject;
		(0, util_1.addCommonProtos)();
		
	} (src$1));
	return src$1;
}

var hasRequiredChannelz;

function requireChannelz () {
	if (hasRequiredChannelz) return channelz;
	hasRequiredChannelz = 1;
	/*
	 * Copyright 2021 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(channelz, "__esModule", { value: true });
	channelz.registerChannelzSocket = channelz.registerChannelzServer = channelz.registerChannelzSubchannel = channelz.registerChannelzChannel = channelz.ChannelzCallTrackerStub = channelz.ChannelzCallTracker = channelz.ChannelzChildrenTrackerStub = channelz.ChannelzChildrenTracker = channelz.ChannelzTrace = channelz.ChannelzTraceStub = void 0;
	channelz.unregisterChannelzRef = unregisterChannelzRef;
	channelz.getChannelzHandlers = getChannelzHandlers;
	channelz.getChannelzServiceDefinition = getChannelzServiceDefinition;
	channelz.setup = setup;
	const net_1 = require$$0$3;
	const ordered_map_1 = require$$1;
	const connectivity_state_1 = connectivityState;
	const constants_1 = constants;
	const subchannel_address_1 = subchannelAddress;
	const admin_1 = requireAdmin();
	const make_client_1 = requireMakeClient();
	function channelRefToMessage(ref) {
	    return {
	        channel_id: ref.id,
	        name: ref.name,
	    };
	}
	function subchannelRefToMessage(ref) {
	    return {
	        subchannel_id: ref.id,
	        name: ref.name,
	    };
	}
	function serverRefToMessage(ref) {
	    return {
	        server_id: ref.id,
	    };
	}
	function socketRefToMessage(ref) {
	    return {
	        socket_id: ref.id,
	        name: ref.name,
	    };
	}
	/**
	 * The loose upper bound on the number of events that should be retained in a
	 * trace. This may be exceeded by up to a factor of 2. Arbitrarily chosen as a
	 * number that should be large enough to contain the recent relevant
	 * information, but small enough to not use excessive memory.
	 */
	const TARGET_RETAINED_TRACES = 32;
	/**
	 * Default number of sockets/servers/channels/subchannels to return
	 */
	const DEFAULT_MAX_RESULTS = 100;
	class ChannelzTraceStub {
	    constructor() {
	        this.events = [];
	        this.creationTimestamp = new Date();
	        this.eventsLogged = 0;
	    }
	    addTrace() { }
	    getTraceMessage() {
	        return {
	            creation_timestamp: dateToProtoTimestamp(this.creationTimestamp),
	            num_events_logged: this.eventsLogged,
	            events: [],
	        };
	    }
	}
	channelz.ChannelzTraceStub = ChannelzTraceStub;
	class ChannelzTrace {
	    constructor() {
	        this.events = [];
	        this.eventsLogged = 0;
	        this.creationTimestamp = new Date();
	    }
	    addTrace(severity, description, child) {
	        const timestamp = new Date();
	        this.events.push({
	            description: description,
	            severity: severity,
	            timestamp: timestamp,
	            childChannel: (child === null || child === void 0 ? void 0 : child.kind) === 'channel' ? child : undefined,
	            childSubchannel: (child === null || child === void 0 ? void 0 : child.kind) === 'subchannel' ? child : undefined,
	        });
	        // Whenever the trace array gets too large, discard the first half
	        if (this.events.length >= TARGET_RETAINED_TRACES * 2) {
	            this.events = this.events.slice(TARGET_RETAINED_TRACES);
	        }
	        this.eventsLogged += 1;
	    }
	    getTraceMessage() {
	        return {
	            creation_timestamp: dateToProtoTimestamp(this.creationTimestamp),
	            num_events_logged: this.eventsLogged,
	            events: this.events.map(event => {
	                return {
	                    description: event.description,
	                    severity: event.severity,
	                    timestamp: dateToProtoTimestamp(event.timestamp),
	                    channel_ref: event.childChannel
	                        ? channelRefToMessage(event.childChannel)
	                        : null,
	                    subchannel_ref: event.childSubchannel
	                        ? subchannelRefToMessage(event.childSubchannel)
	                        : null,
	                };
	            }),
	        };
	    }
	}
	channelz.ChannelzTrace = ChannelzTrace;
	class ChannelzChildrenTracker {
	    constructor() {
	        this.channelChildren = new ordered_map_1.OrderedMap();
	        this.subchannelChildren = new ordered_map_1.OrderedMap();
	        this.socketChildren = new ordered_map_1.OrderedMap();
	        this.trackerMap = {
	            ["channel" /* EntityTypes.channel */]: this.channelChildren,
	            ["subchannel" /* EntityTypes.subchannel */]: this.subchannelChildren,
	            ["socket" /* EntityTypes.socket */]: this.socketChildren,
	        };
	    }
	    refChild(child) {
	        const tracker = this.trackerMap[child.kind];
	        const trackedChild = tracker.find(child.id);
	        if (trackedChild.equals(tracker.end())) {
	            tracker.setElement(child.id, {
	                ref: child,
	                count: 1,
	            }, trackedChild);
	        }
	        else {
	            trackedChild.pointer[1].count += 1;
	        }
	    }
	    unrefChild(child) {
	        const tracker = this.trackerMap[child.kind];
	        const trackedChild = tracker.getElementByKey(child.id);
	        if (trackedChild !== undefined) {
	            trackedChild.count -= 1;
	            if (trackedChild.count === 0) {
	                tracker.eraseElementByKey(child.id);
	            }
	        }
	    }
	    getChildLists() {
	        return {
	            channels: this.channelChildren,
	            subchannels: this.subchannelChildren,
	            sockets: this.socketChildren,
	        };
	    }
	}
	channelz.ChannelzChildrenTracker = ChannelzChildrenTracker;
	class ChannelzChildrenTrackerStub extends ChannelzChildrenTracker {
	    refChild() { }
	    unrefChild() { }
	}
	channelz.ChannelzChildrenTrackerStub = ChannelzChildrenTrackerStub;
	class ChannelzCallTracker {
	    constructor() {
	        this.callsStarted = 0;
	        this.callsSucceeded = 0;
	        this.callsFailed = 0;
	        this.lastCallStartedTimestamp = null;
	    }
	    addCallStarted() {
	        this.callsStarted += 1;
	        this.lastCallStartedTimestamp = new Date();
	    }
	    addCallSucceeded() {
	        this.callsSucceeded += 1;
	    }
	    addCallFailed() {
	        this.callsFailed += 1;
	    }
	}
	channelz.ChannelzCallTracker = ChannelzCallTracker;
	class ChannelzCallTrackerStub extends ChannelzCallTracker {
	    addCallStarted() { }
	    addCallSucceeded() { }
	    addCallFailed() { }
	}
	channelz.ChannelzCallTrackerStub = ChannelzCallTrackerStub;
	const entityMaps = {
	    ["channel" /* EntityTypes.channel */]: new ordered_map_1.OrderedMap(),
	    ["subchannel" /* EntityTypes.subchannel */]: new ordered_map_1.OrderedMap(),
	    ["server" /* EntityTypes.server */]: new ordered_map_1.OrderedMap(),
	    ["socket" /* EntityTypes.socket */]: new ordered_map_1.OrderedMap(),
	};
	const generateRegisterFn = (kind) => {
	    let nextId = 1;
	    function getNextId() {
	        return nextId++;
	    }
	    const entityMap = entityMaps[kind];
	    return (name, getInfo, channelzEnabled) => {
	        const id = getNextId();
	        const ref = { id, name, kind };
	        if (channelzEnabled) {
	            entityMap.setElement(id, { ref, getInfo });
	        }
	        return ref;
	    };
	};
	channelz.registerChannelzChannel = generateRegisterFn("channel" /* EntityTypes.channel */);
	channelz.registerChannelzSubchannel = generateRegisterFn("subchannel" /* EntityTypes.subchannel */);
	channelz.registerChannelzServer = generateRegisterFn("server" /* EntityTypes.server */);
	channelz.registerChannelzSocket = generateRegisterFn("socket" /* EntityTypes.socket */);
	function unregisterChannelzRef(ref) {
	    entityMaps[ref.kind].eraseElementByKey(ref.id);
	}
	/**
	 * Parse a single section of an IPv6 address as two bytes
	 * @param addressSection A hexadecimal string of length up to 4
	 * @returns The pair of bytes representing this address section
	 */
	function parseIPv6Section(addressSection) {
	    const numberValue = Number.parseInt(addressSection, 16);
	    return [(numberValue / 256) | 0, numberValue % 256];
	}
	/**
	 * Parse a chunk of an IPv6 address string to some number of bytes
	 * @param addressChunk Some number of segments of up to 4 hexadecimal
	 *   characters each, joined by colons.
	 * @returns The list of bytes representing this address chunk
	 */
	function parseIPv6Chunk(addressChunk) {
	    if (addressChunk === '') {
	        return [];
	    }
	    const bytePairs = addressChunk
	        .split(':')
	        .map(section => parseIPv6Section(section));
	    const result = [];
	    return result.concat(...bytePairs);
	}
	function isIPv6MappedIPv4(ipAddress) {
	    return (0, net_1.isIPv6)(ipAddress) && ipAddress.toLowerCase().startsWith('::ffff:') && (0, net_1.isIPv4)(ipAddress.substring(7));
	}
	/**
	 * Prerequisite: isIPv4(ipAddress)
	 * @param ipAddress
	 * @returns
	 */
	function ipv4AddressStringToBuffer(ipAddress) {
	    return Buffer.from(Uint8Array.from(ipAddress.split('.').map(segment => Number.parseInt(segment))));
	}
	/**
	 * Converts an IPv4 or IPv6 address from string representation to binary
	 * representation
	 * @param ipAddress an IP address in standard IPv4 or IPv6 text format
	 * @returns
	 */
	function ipAddressStringToBuffer(ipAddress) {
	    if ((0, net_1.isIPv4)(ipAddress)) {
	        return ipv4AddressStringToBuffer(ipAddress);
	    }
	    else if (isIPv6MappedIPv4(ipAddress)) {
	        return ipv4AddressStringToBuffer(ipAddress.substring(7));
	    }
	    else if ((0, net_1.isIPv6)(ipAddress)) {
	        let leftSection;
	        let rightSection;
	        const doubleColonIndex = ipAddress.indexOf('::');
	        if (doubleColonIndex === -1) {
	            leftSection = ipAddress;
	            rightSection = '';
	        }
	        else {
	            leftSection = ipAddress.substring(0, doubleColonIndex);
	            rightSection = ipAddress.substring(doubleColonIndex + 2);
	        }
	        const leftBuffer = Buffer.from(parseIPv6Chunk(leftSection));
	        const rightBuffer = Buffer.from(parseIPv6Chunk(rightSection));
	        const middleBuffer = Buffer.alloc(16 - leftBuffer.length - rightBuffer.length, 0);
	        return Buffer.concat([leftBuffer, middleBuffer, rightBuffer]);
	    }
	    else {
	        return null;
	    }
	}
	function connectivityStateToMessage(state) {
	    switch (state) {
	        case connectivity_state_1.ConnectivityState.CONNECTING:
	            return {
	                state: 'CONNECTING',
	            };
	        case connectivity_state_1.ConnectivityState.IDLE:
	            return {
	                state: 'IDLE',
	            };
	        case connectivity_state_1.ConnectivityState.READY:
	            return {
	                state: 'READY',
	            };
	        case connectivity_state_1.ConnectivityState.SHUTDOWN:
	            return {
	                state: 'SHUTDOWN',
	            };
	        case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:
	            return {
	                state: 'TRANSIENT_FAILURE',
	            };
	        default:
	            return {
	                state: 'UNKNOWN',
	            };
	    }
	}
	function dateToProtoTimestamp(date) {
	    if (!date) {
	        return null;
	    }
	    const millisSinceEpoch = date.getTime();
	    return {
	        seconds: (millisSinceEpoch / 1000) | 0,
	        nanos: (millisSinceEpoch % 1000) * 1000000,
	    };
	}
	function getChannelMessage(channelEntry) {
	    const resolvedInfo = channelEntry.getInfo();
	    const channelRef = [];
	    const subchannelRef = [];
	    resolvedInfo.children.channels.forEach(el => {
	        channelRef.push(channelRefToMessage(el[1].ref));
	    });
	    resolvedInfo.children.subchannels.forEach(el => {
	        subchannelRef.push(subchannelRefToMessage(el[1].ref));
	    });
	    return {
	        ref: channelRefToMessage(channelEntry.ref),
	        data: {
	            target: resolvedInfo.target,
	            state: connectivityStateToMessage(resolvedInfo.state),
	            calls_started: resolvedInfo.callTracker.callsStarted,
	            calls_succeeded: resolvedInfo.callTracker.callsSucceeded,
	            calls_failed: resolvedInfo.callTracker.callsFailed,
	            last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),
	            trace: resolvedInfo.trace.getTraceMessage(),
	        },
	        channel_ref: channelRef,
	        subchannel_ref: subchannelRef,
	    };
	}
	function GetChannel(call, callback) {
	    const channelId = parseInt(call.request.channel_id, 10);
	    const channelEntry = entityMaps["channel" /* EntityTypes.channel */].getElementByKey(channelId);
	    if (channelEntry === undefined) {
	        callback({
	            code: constants_1.Status.NOT_FOUND,
	            details: 'No channel data found for id ' + channelId,
	        });
	        return;
	    }
	    callback(null, { channel: getChannelMessage(channelEntry) });
	}
	function GetTopChannels(call, callback) {
	    const maxResults = parseInt(call.request.max_results, 10) || DEFAULT_MAX_RESULTS;
	    const resultList = [];
	    const startId = parseInt(call.request.start_channel_id, 10);
	    const channelEntries = entityMaps["channel" /* EntityTypes.channel */];
	    let i;
	    for (i = channelEntries.lowerBound(startId); !i.equals(channelEntries.end()) && resultList.length < maxResults; i = i.next()) {
	        resultList.push(getChannelMessage(i.pointer[1]));
	    }
	    callback(null, {
	        channel: resultList,
	        end: i.equals(channelEntries.end()),
	    });
	}
	function getServerMessage(serverEntry) {
	    const resolvedInfo = serverEntry.getInfo();
	    const listenSocket = [];
	    resolvedInfo.listenerChildren.sockets.forEach(el => {
	        listenSocket.push(socketRefToMessage(el[1].ref));
	    });
	    return {
	        ref: serverRefToMessage(serverEntry.ref),
	        data: {
	            calls_started: resolvedInfo.callTracker.callsStarted,
	            calls_succeeded: resolvedInfo.callTracker.callsSucceeded,
	            calls_failed: resolvedInfo.callTracker.callsFailed,
	            last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),
	            trace: resolvedInfo.trace.getTraceMessage(),
	        },
	        listen_socket: listenSocket,
	    };
	}
	function GetServer(call, callback) {
	    const serverId = parseInt(call.request.server_id, 10);
	    const serverEntries = entityMaps["server" /* EntityTypes.server */];
	    const serverEntry = serverEntries.getElementByKey(serverId);
	    if (serverEntry === undefined) {
	        callback({
	            code: constants_1.Status.NOT_FOUND,
	            details: 'No server data found for id ' + serverId,
	        });
	        return;
	    }
	    callback(null, { server: getServerMessage(serverEntry) });
	}
	function GetServers(call, callback) {
	    const maxResults = parseInt(call.request.max_results, 10) || DEFAULT_MAX_RESULTS;
	    const startId = parseInt(call.request.start_server_id, 10);
	    const serverEntries = entityMaps["server" /* EntityTypes.server */];
	    const resultList = [];
	    let i;
	    for (i = serverEntries.lowerBound(startId); !i.equals(serverEntries.end()) && resultList.length < maxResults; i = i.next()) {
	        resultList.push(getServerMessage(i.pointer[1]));
	    }
	    callback(null, {
	        server: resultList,
	        end: i.equals(serverEntries.end()),
	    });
	}
	function GetSubchannel(call, callback) {
	    const subchannelId = parseInt(call.request.subchannel_id, 10);
	    const subchannelEntry = entityMaps["subchannel" /* EntityTypes.subchannel */].getElementByKey(subchannelId);
	    if (subchannelEntry === undefined) {
	        callback({
	            code: constants_1.Status.NOT_FOUND,
	            details: 'No subchannel data found for id ' + subchannelId,
	        });
	        return;
	    }
	    const resolvedInfo = subchannelEntry.getInfo();
	    const listenSocket = [];
	    resolvedInfo.children.sockets.forEach(el => {
	        listenSocket.push(socketRefToMessage(el[1].ref));
	    });
	    const subchannelMessage = {
	        ref: subchannelRefToMessage(subchannelEntry.ref),
	        data: {
	            target: resolvedInfo.target,
	            state: connectivityStateToMessage(resolvedInfo.state),
	            calls_started: resolvedInfo.callTracker.callsStarted,
	            calls_succeeded: resolvedInfo.callTracker.callsSucceeded,
	            calls_failed: resolvedInfo.callTracker.callsFailed,
	            last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),
	            trace: resolvedInfo.trace.getTraceMessage(),
	        },
	        socket_ref: listenSocket,
	    };
	    callback(null, { subchannel: subchannelMessage });
	}
	function subchannelAddressToAddressMessage(subchannelAddress) {
	    var _a;
	    if ((0, subchannel_address_1.isTcpSubchannelAddress)(subchannelAddress)) {
	        return {
	            address: 'tcpip_address',
	            tcpip_address: {
	                ip_address: (_a = ipAddressStringToBuffer(subchannelAddress.host)) !== null && _a !== void 0 ? _a : undefined,
	                port: subchannelAddress.port,
	            },
	        };
	    }
	    else {
	        return {
	            address: 'uds_address',
	            uds_address: {
	                filename: subchannelAddress.path,
	            },
	        };
	    }
	}
	function GetSocket(call, callback) {
	    var _a, _b, _c, _d, _e;
	    const socketId = parseInt(call.request.socket_id, 10);
	    const socketEntry = entityMaps["socket" /* EntityTypes.socket */].getElementByKey(socketId);
	    if (socketEntry === undefined) {
	        callback({
	            code: constants_1.Status.NOT_FOUND,
	            details: 'No socket data found for id ' + socketId,
	        });
	        return;
	    }
	    const resolvedInfo = socketEntry.getInfo();
	    const securityMessage = resolvedInfo.security
	        ? {
	            model: 'tls',
	            tls: {
	                cipher_suite: resolvedInfo.security.cipherSuiteStandardName
	                    ? 'standard_name'
	                    : 'other_name',
	                standard_name: (_a = resolvedInfo.security.cipherSuiteStandardName) !== null && _a !== void 0 ? _a : undefined,
	                other_name: (_b = resolvedInfo.security.cipherSuiteOtherName) !== null && _b !== void 0 ? _b : undefined,
	                local_certificate: (_c = resolvedInfo.security.localCertificate) !== null && _c !== void 0 ? _c : undefined,
	                remote_certificate: (_d = resolvedInfo.security.remoteCertificate) !== null && _d !== void 0 ? _d : undefined,
	            },
	        }
	        : null;
	    const socketMessage = {
	        ref: socketRefToMessage(socketEntry.ref),
	        local: resolvedInfo.localAddress
	            ? subchannelAddressToAddressMessage(resolvedInfo.localAddress)
	            : null,
	        remote: resolvedInfo.remoteAddress
	            ? subchannelAddressToAddressMessage(resolvedInfo.remoteAddress)
	            : null,
	        remote_name: (_e = resolvedInfo.remoteName) !== null && _e !== void 0 ? _e : undefined,
	        security: securityMessage,
	        data: {
	            keep_alives_sent: resolvedInfo.keepAlivesSent,
	            streams_started: resolvedInfo.streamsStarted,
	            streams_succeeded: resolvedInfo.streamsSucceeded,
	            streams_failed: resolvedInfo.streamsFailed,
	            last_local_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastLocalStreamCreatedTimestamp),
	            last_remote_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastRemoteStreamCreatedTimestamp),
	            messages_received: resolvedInfo.messagesReceived,
	            messages_sent: resolvedInfo.messagesSent,
	            last_message_received_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageReceivedTimestamp),
	            last_message_sent_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageSentTimestamp),
	            local_flow_control_window: resolvedInfo.localFlowControlWindow
	                ? { value: resolvedInfo.localFlowControlWindow }
	                : null,
	            remote_flow_control_window: resolvedInfo.remoteFlowControlWindow
	                ? { value: resolvedInfo.remoteFlowControlWindow }
	                : null,
	        },
	    };
	    callback(null, { socket: socketMessage });
	}
	function GetServerSockets(call, callback) {
	    const serverId = parseInt(call.request.server_id, 10);
	    const serverEntry = entityMaps["server" /* EntityTypes.server */].getElementByKey(serverId);
	    if (serverEntry === undefined) {
	        callback({
	            code: constants_1.Status.NOT_FOUND,
	            details: 'No server data found for id ' + serverId,
	        });
	        return;
	    }
	    const startId = parseInt(call.request.start_socket_id, 10);
	    const maxResults = parseInt(call.request.max_results, 10) || DEFAULT_MAX_RESULTS;
	    const resolvedInfo = serverEntry.getInfo();
	    // If we wanted to include listener sockets in the result, this line would
	    // instead say
	    // const allSockets = resolvedInfo.listenerChildren.sockets.concat(resolvedInfo.sessionChildren.sockets).sort((ref1, ref2) => ref1.id - ref2.id);
	    const allSockets = resolvedInfo.sessionChildren.sockets;
	    const resultList = [];
	    let i;
	    for (i = allSockets.lowerBound(startId); !i.equals(allSockets.end()) && resultList.length < maxResults; i = i.next()) {
	        resultList.push(socketRefToMessage(i.pointer[1].ref));
	    }
	    callback(null, {
	        socket_ref: resultList,
	        end: i.equals(allSockets.end()),
	    });
	}
	function getChannelzHandlers() {
	    return {
	        GetChannel,
	        GetTopChannels,
	        GetServer,
	        GetServers,
	        GetSubchannel,
	        GetSocket,
	        GetServerSockets,
	    };
	}
	let loadedChannelzDefinition = null;
	function getChannelzServiceDefinition() {
	    if (loadedChannelzDefinition) {
	        return loadedChannelzDefinition;
	    }
	    /* The purpose of this complexity is to avoid loading @grpc/proto-loader at
	     * runtime for users who will not use/enable channelz. */
	    const loaderLoadSync = requireSrc()
	        .loadSync;
	    const loadedProto = loaderLoadSync('channelz.proto', {
	        keepCase: true,
	        longs: String,
	        enums: String,
	        defaults: true,
	        oneofs: true,
	        includeDirs: [`${__dirname}/../../proto`],
	    });
	    const channelzGrpcObject = (0, make_client_1.loadPackageDefinition)(loadedProto);
	    loadedChannelzDefinition =
	        channelzGrpcObject.grpc.channelz.v1.Channelz.service;
	    return loadedChannelzDefinition;
	}
	function setup() {
	    (0, admin_1.registerAdminService)(getChannelzServiceDefinition, getChannelzHandlers);
	}
	
	return channelz;
}

var hasRequiredSubchannel;

function requireSubchannel () {
	if (hasRequiredSubchannel) return subchannel;
	hasRequiredSubchannel = 1;
	/*
	 * Copyright 2019 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(subchannel, "__esModule", { value: true });
	subchannel.Subchannel = void 0;
	const connectivity_state_1 = connectivityState;
	const backoff_timeout_1 = requireBackoffTimeout();
	const logging = logging$8;
	const constants_1 = constants;
	const uri_parser_1 = uriParser;
	const subchannel_address_1 = subchannelAddress;
	const channelz_1 = requireChannelz();
	const TRACER_NAME = 'subchannel';
	/* setInterval and setTimeout only accept signed 32 bit integers. JS doesn't
	 * have a constant for the max signed 32 bit integer, so this is a simple way
	 * to calculate it */
	const KEEPALIVE_MAX_TIME_MS = ~(1 << 31);
	class Subchannel {
	    /**
	     * A class representing a connection to a single backend.
	     * @param channelTarget The target string for the channel as a whole
	     * @param subchannelAddress The address for the backend that this subchannel
	     *     will connect to
	     * @param options The channel options, plus any specific subchannel options
	     *     for this subchannel
	     * @param credentials The channel credentials used to establish this
	     *     connection
	     */
	    constructor(channelTarget, subchannelAddress, options, credentials, connector) {
	        var _a;
	        this.channelTarget = channelTarget;
	        this.subchannelAddress = subchannelAddress;
	        this.options = options;
	        this.connector = connector;
	        /**
	         * The subchannel's current connectivity state. Invariant: `session` === `null`
	         * if and only if `connectivityState` is IDLE or TRANSIENT_FAILURE.
	         */
	        this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;
	        /**
	         * The underlying http2 session used to make requests.
	         */
	        this.transport = null;
	        /**
	         * Indicates that the subchannel should transition from TRANSIENT_FAILURE to
	         * CONNECTING instead of IDLE when the backoff timeout ends.
	         */
	        this.continueConnecting = false;
	        /**
	         * A list of listener functions that will be called whenever the connectivity
	         * state changes. Will be modified by `addConnectivityStateListener` and
	         * `removeConnectivityStateListener`
	         */
	        this.stateListeners = new Set();
	        /**
	         * Tracks channels and subchannel pools with references to this subchannel
	         */
	        this.refcount = 0;
	        // Channelz info
	        this.channelzEnabled = true;
	        const backoffOptions = {
	            initialDelay: options['grpc.initial_reconnect_backoff_ms'],
	            maxDelay: options['grpc.max_reconnect_backoff_ms'],
	        };
	        this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(() => {
	            this.handleBackoffTimer();
	        }, backoffOptions);
	        this.backoffTimeout.unref();
	        this.subchannelAddressString = (0, subchannel_address_1.subchannelAddressToString)(subchannelAddress);
	        this.keepaliveTime = (_a = options['grpc.keepalive_time_ms']) !== null && _a !== void 0 ? _a : -1;
	        if (options['grpc.enable_channelz'] === 0) {
	            this.channelzEnabled = false;
	            this.channelzTrace = new channelz_1.ChannelzTraceStub();
	            this.callTracker = new channelz_1.ChannelzCallTrackerStub();
	            this.childrenTracker = new channelz_1.ChannelzChildrenTrackerStub();
	            this.streamTracker = new channelz_1.ChannelzCallTrackerStub();
	        }
	        else {
	            this.channelzTrace = new channelz_1.ChannelzTrace();
	            this.callTracker = new channelz_1.ChannelzCallTracker();
	            this.childrenTracker = new channelz_1.ChannelzChildrenTracker();
	            this.streamTracker = new channelz_1.ChannelzCallTracker();
	        }
	        this.channelzRef = (0, channelz_1.registerChannelzSubchannel)(this.subchannelAddressString, () => this.getChannelzInfo(), this.channelzEnabled);
	        this.channelzTrace.addTrace('CT_INFO', 'Subchannel created');
	        this.trace('Subchannel constructed with options ' +
	            JSON.stringify(options, undefined, 2));
	        this.secureConnector = credentials._createSecureConnector(channelTarget, options);
	    }
	    getChannelzInfo() {
	        return {
	            state: this.connectivityState,
	            trace: this.channelzTrace,
	            callTracker: this.callTracker,
	            children: this.childrenTracker.getChildLists(),
	            target: this.subchannelAddressString,
	        };
	    }
	    trace(text) {
	        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '(' +
	            this.channelzRef.id +
	            ') ' +
	            this.subchannelAddressString +
	            ' ' +
	            text);
	    }
	    refTrace(text) {
	        logging.trace(constants_1.LogVerbosity.DEBUG, 'subchannel_refcount', '(' +
	            this.channelzRef.id +
	            ') ' +
	            this.subchannelAddressString +
	            ' ' +
	            text);
	    }
	    handleBackoffTimer() {
	        if (this.continueConnecting) {
	            this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.CONNECTING);
	        }
	        else {
	            this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.IDLE);
	        }
	    }
	    /**
	     * Start a backoff timer with the current nextBackoff timeout
	     */
	    startBackoff() {
	        this.backoffTimeout.runOnce();
	    }
	    stopBackoff() {
	        this.backoffTimeout.stop();
	        this.backoffTimeout.reset();
	    }
	    startConnectingInternal() {
	        let options = this.options;
	        if (options['grpc.keepalive_time_ms']) {
	            const adjustedKeepaliveTime = Math.min(this.keepaliveTime, KEEPALIVE_MAX_TIME_MS);
	            options = Object.assign(Object.assign({}, options), { 'grpc.keepalive_time_ms': adjustedKeepaliveTime });
	        }
	        this.connector
	            .connect(this.subchannelAddress, this.secureConnector, options)
	            .then(transport => {
	            if (this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING], connectivity_state_1.ConnectivityState.READY)) {
	                this.transport = transport;
	                if (this.channelzEnabled) {
	                    this.childrenTracker.refChild(transport.getChannelzRef());
	                }
	                transport.addDisconnectListener(tooManyPings => {
	                    this.transitionToState([connectivity_state_1.ConnectivityState.READY], connectivity_state_1.ConnectivityState.IDLE);
	                    if (tooManyPings && this.keepaliveTime > 0) {
	                        this.keepaliveTime *= 2;
	                        logging.log(constants_1.LogVerbosity.ERROR, `Connection to ${(0, uri_parser_1.uriToString)(this.channelTarget)} at ${this.subchannelAddressString} rejected by server because of excess pings. Increasing ping interval to ${this.keepaliveTime} ms`);
	                    }
	                });
	            }
	            else {
	                /* If we can't transition from CONNECTING to READY here, we will
	                 * not be using this transport, so release its resources. */
	                transport.shutdown();
	            }
	        }, error => {
	            this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING], connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, `${error}`);
	        });
	    }
	    /**
	     * Initiate a state transition from any element of oldStates to the new
	     * state. If the current connectivityState is not in oldStates, do nothing.
	     * @param oldStates The set of states to transition from
	     * @param newState The state to transition to
	     * @returns True if the state changed, false otherwise
	     */
	    transitionToState(oldStates, newState, errorMessage) {
	        var _a, _b;
	        if (oldStates.indexOf(this.connectivityState) === -1) {
	            return false;
	        }
	        if (errorMessage) {
	            this.trace(connectivity_state_1.ConnectivityState[this.connectivityState] +
	                ' -> ' +
	                connectivity_state_1.ConnectivityState[newState] +
	                ' with error "' + errorMessage + '"');
	        }
	        else {
	            this.trace(connectivity_state_1.ConnectivityState[this.connectivityState] +
	                ' -> ' +
	                connectivity_state_1.ConnectivityState[newState]);
	        }
	        if (this.channelzEnabled) {
	            this.channelzTrace.addTrace('CT_INFO', 'Connectivity state change to ' + connectivity_state_1.ConnectivityState[newState]);
	        }
	        const previousState = this.connectivityState;
	        this.connectivityState = newState;
	        switch (newState) {
	            case connectivity_state_1.ConnectivityState.READY:
	                this.stopBackoff();
	                break;
	            case connectivity_state_1.ConnectivityState.CONNECTING:
	                this.startBackoff();
	                this.startConnectingInternal();
	                this.continueConnecting = false;
	                break;
	            case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:
	                if (this.channelzEnabled && this.transport) {
	                    this.childrenTracker.unrefChild(this.transport.getChannelzRef());
	                }
	                (_a = this.transport) === null || _a === void 0 ? void 0 : _a.shutdown();
	                this.transport = null;
	                /* If the backoff timer has already ended by the time we get to the
	                 * TRANSIENT_FAILURE state, we want to immediately transition out of
	                 * TRANSIENT_FAILURE as though the backoff timer is ending right now */
	                if (!this.backoffTimeout.isRunning()) {
	                    process.nextTick(() => {
	                        this.handleBackoffTimer();
	                    });
	                }
	                break;
	            case connectivity_state_1.ConnectivityState.IDLE:
	                if (this.channelzEnabled && this.transport) {
	                    this.childrenTracker.unrefChild(this.transport.getChannelzRef());
	                }
	                (_b = this.transport) === null || _b === void 0 ? void 0 : _b.shutdown();
	                this.transport = null;
	                break;
	            default:
	                throw new Error(`Invalid state: unknown ConnectivityState ${newState}`);
	        }
	        for (const listener of this.stateListeners) {
	            listener(this, previousState, newState, this.keepaliveTime, errorMessage);
	        }
	        return true;
	    }
	    ref() {
	        this.refTrace('refcount ' + this.refcount + ' -> ' + (this.refcount + 1));
	        this.refcount += 1;
	    }
	    unref() {
	        this.refTrace('refcount ' + this.refcount + ' -> ' + (this.refcount - 1));
	        this.refcount -= 1;
	        if (this.refcount === 0) {
	            this.channelzTrace.addTrace('CT_INFO', 'Shutting down');
	            (0, channelz_1.unregisterChannelzRef)(this.channelzRef);
	            this.secureConnector.destroy();
	            process.nextTick(() => {
	                this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING, connectivity_state_1.ConnectivityState.READY], connectivity_state_1.ConnectivityState.IDLE);
	            });
	        }
	    }
	    unrefIfOneRef() {
	        if (this.refcount === 1) {
	            this.unref();
	            return true;
	        }
	        return false;
	    }
	    createCall(metadata, host, method, listener) {
	        if (!this.transport) {
	            throw new Error('Cannot create call, subchannel not READY');
	        }
	        let statsTracker;
	        if (this.channelzEnabled) {
	            this.callTracker.addCallStarted();
	            this.streamTracker.addCallStarted();
	            statsTracker = {
	                onCallEnd: status => {
	                    if (status.code === constants_1.Status.OK) {
	                        this.callTracker.addCallSucceeded();
	                    }
	                    else {
	                        this.callTracker.addCallFailed();
	                    }
	                },
	            };
	        }
	        else {
	            statsTracker = {};
	        }
	        return this.transport.createCall(metadata, host, method, listener, statsTracker);
	    }
	    /**
	     * If the subchannel is currently IDLE, start connecting and switch to the
	     * CONNECTING state. If the subchannel is current in TRANSIENT_FAILURE,
	     * the next time it would transition to IDLE, start connecting again instead.
	     * Otherwise, do nothing.
	     */
	    startConnecting() {
	        process.nextTick(() => {
	            /* First, try to transition from IDLE to connecting. If that doesn't happen
	             * because the state is not currently IDLE, check if it is
	             * TRANSIENT_FAILURE, and if so indicate that it should go back to
	             * connecting after the backoff timer ends. Otherwise do nothing */
	            if (!this.transitionToState([connectivity_state_1.ConnectivityState.IDLE], connectivity_state_1.ConnectivityState.CONNECTING)) {
	                if (this.connectivityState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {
	                    this.continueConnecting = true;
	                }
	            }
	        });
	    }
	    /**
	     * Get the subchannel's current connectivity state.
	     */
	    getConnectivityState() {
	        return this.connectivityState;
	    }
	    /**
	     * Add a listener function to be called whenever the subchannel's
	     * connectivity state changes.
	     * @param listener
	     */
	    addConnectivityStateListener(listener) {
	        this.stateListeners.add(listener);
	    }
	    /**
	     * Remove a listener previously added with `addConnectivityStateListener`
	     * @param listener A reference to a function previously passed to
	     *     `addConnectivityStateListener`
	     */
	    removeConnectivityStateListener(listener) {
	        this.stateListeners.delete(listener);
	    }
	    /**
	     * Reset the backoff timeout, and immediately start connecting if in backoff.
	     */
	    resetBackoff() {
	        process.nextTick(() => {
	            this.backoffTimeout.reset();
	            this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.CONNECTING);
	        });
	    }
	    getAddress() {
	        return this.subchannelAddressString;
	    }
	    getChannelzRef() {
	        return this.channelzRef;
	    }
	    isHealthy() {
	        return true;
	    }
	    addHealthStateWatcher(listener) {
	        // Do nothing with the listener
	    }
	    removeHealthStateWatcher(listener) {
	        // Do nothing with the listener
	    }
	    getRealSubchannel() {
	        return this;
	    }
	    realSubchannelEquals(other) {
	        return other.getRealSubchannel() === this;
	    }
	    throttleKeepalive(newKeepaliveTime) {
	        if (newKeepaliveTime > this.keepaliveTime) {
	            this.keepaliveTime = newKeepaliveTime;
	        }
	    }
	    getCallCredentials() {
	        return this.secureConnector.getCallCredentials();
	    }
	}
	subchannel.Subchannel = Subchannel;
	
	return subchannel;
}

var transport = {};

var http_proxy = {};

var resolverDns = {};

var environment = {};

var hasRequiredEnvironment;

function requireEnvironment () {
	if (hasRequiredEnvironment) return environment;
	hasRequiredEnvironment = 1;
	/*
	 * Copyright 2024 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	var _a;
	Object.defineProperty(environment, "__esModule", { value: true });
	environment.GRPC_NODE_USE_ALTERNATIVE_RESOLVER = void 0;
	environment.GRPC_NODE_USE_ALTERNATIVE_RESOLVER = ((_a = process.env.GRPC_NODE_USE_ALTERNATIVE_RESOLVER) !== null && _a !== void 0 ? _a : 'false') === 'true';
	
	return environment;
}

var hasRequiredResolverDns;

function requireResolverDns () {
	if (hasRequiredResolverDns) return resolverDns;
	hasRequiredResolverDns = 1;
	(function (exports) {
		/*
		 * Copyright 2019 gRPC authors.
		 *
		 * Licensed under the Apache License, Version 2.0 (the "License");
		 * you may not use this file except in compliance with the License.
		 * You may obtain a copy of the License at
		 *
		 *     http://www.apache.org/licenses/LICENSE-2.0
		 *
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS,
		 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 * See the License for the specific language governing permissions and
		 * limitations under the License.
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.DEFAULT_PORT = void 0;
		exports.setup = setup;
		const resolver_1 = resolver;
		const dns_1 = require$$1$4;
		const service_config_1 = requireServiceConfig();
		const constants_1 = constants;
		const metadata_1 = metadata;
		const logging = logging$8;
		const constants_2 = constants;
		const uri_parser_1 = uriParser;
		const net_1 = require$$0$3;
		const backoff_timeout_1 = requireBackoffTimeout();
		const environment_1 = requireEnvironment();
		const TRACER_NAME = 'dns_resolver';
		function trace(text) {
		    logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);
		}
		/**
		 * The default TCP port to connect to if not explicitly specified in the target.
		 */
		exports.DEFAULT_PORT = 443;
		const DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS = 30000;
		/**
		 * Resolver implementation that handles DNS names and IP addresses.
		 */
		class DnsResolver {
		    constructor(target, listener, channelOptions) {
		        var _a, _b, _c;
		        this.target = target;
		        this.listener = listener;
		        this.pendingLookupPromise = null;
		        this.pendingTxtPromise = null;
		        this.latestLookupResult = null;
		        this.latestServiceConfig = null;
		        this.latestServiceConfigError = null;
		        this.continueResolving = false;
		        this.isNextResolutionTimerRunning = false;
		        this.isServiceConfigEnabled = true;
		        this.returnedIpResult = false;
		        this.alternativeResolver = new dns_1.promises.Resolver();
		        trace('Resolver constructed for target ' + (0, uri_parser_1.uriToString)(target));
		        if (target.authority) {
		            this.alternativeResolver.setServers([target.authority]);
		        }
		        const hostPort = (0, uri_parser_1.splitHostPort)(target.path);
		        if (hostPort === null) {
		            this.ipResult = null;
		            this.dnsHostname = null;
		            this.port = null;
		        }
		        else {
		            if ((0, net_1.isIPv4)(hostPort.host) || (0, net_1.isIPv6)(hostPort.host)) {
		                this.ipResult = [
		                    {
		                        addresses: [
		                            {
		                                host: hostPort.host,
		                                port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : exports.DEFAULT_PORT,
		                            },
		                        ],
		                    },
		                ];
		                this.dnsHostname = null;
		                this.port = null;
		            }
		            else {
		                this.ipResult = null;
		                this.dnsHostname = hostPort.host;
		                this.port = (_b = hostPort.port) !== null && _b !== void 0 ? _b : exports.DEFAULT_PORT;
		            }
		        }
		        this.percentage = Math.random() * 100;
		        if (channelOptions['grpc.service_config_disable_resolution'] === 1) {
		            this.isServiceConfigEnabled = false;
		        }
		        this.defaultResolutionError = {
		            code: constants_1.Status.UNAVAILABLE,
		            details: `Name resolution failed for target ${(0, uri_parser_1.uriToString)(this.target)}`,
		            metadata: new metadata_1.Metadata(),
		        };
		        const backoffOptions = {
		            initialDelay: channelOptions['grpc.initial_reconnect_backoff_ms'],
		            maxDelay: channelOptions['grpc.max_reconnect_backoff_ms'],
		        };
		        this.backoff = new backoff_timeout_1.BackoffTimeout(() => {
		            if (this.continueResolving) {
		                this.startResolutionWithBackoff();
		            }
		        }, backoffOptions);
		        this.backoff.unref();
		        this.minTimeBetweenResolutionsMs =
		            (_c = channelOptions['grpc.dns_min_time_between_resolutions_ms']) !== null && _c !== void 0 ? _c : DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS;
		        this.nextResolutionTimer = setTimeout(() => { }, 0);
		        clearTimeout(this.nextResolutionTimer);
		    }
		    /**
		     * If the target is an IP address, just provide that address as a result.
		     * Otherwise, initiate A, AAAA, and TXT lookups
		     */
		    startResolution() {
		        if (this.ipResult !== null) {
		            if (!this.returnedIpResult) {
		                trace('Returning IP address for target ' + (0, uri_parser_1.uriToString)(this.target));
		                setImmediate(() => {
		                    this.listener.onSuccessfulResolution(this.ipResult, null, null, null, {});
		                });
		                this.returnedIpResult = true;
		            }
		            this.backoff.stop();
		            this.backoff.reset();
		            this.stopNextResolutionTimer();
		            return;
		        }
		        if (this.dnsHostname === null) {
		            trace('Failed to parse DNS address ' + (0, uri_parser_1.uriToString)(this.target));
		            setImmediate(() => {
		                this.listener.onError({
		                    code: constants_1.Status.UNAVAILABLE,
		                    details: `Failed to parse DNS address ${(0, uri_parser_1.uriToString)(this.target)}`,
		                    metadata: new metadata_1.Metadata(),
		                });
		            });
		            this.stopNextResolutionTimer();
		        }
		        else {
		            if (this.pendingLookupPromise !== null) {
		                return;
		            }
		            trace('Looking up DNS hostname ' + this.dnsHostname);
		            /* We clear out latestLookupResult here to ensure that it contains the
		             * latest result since the last time we started resolving. That way, the
		             * TXT resolution handler can use it, but only if it finishes second. We
		             * don't clear out any previous service config results because it's
		             * better to use a service config that's slightly out of date than to
		             * revert to an effectively blank one. */
		            this.latestLookupResult = null;
		            const hostname = this.dnsHostname;
		            this.pendingLookupPromise = this.lookup(hostname);
		            this.pendingLookupPromise.then(addressList => {
		                if (this.pendingLookupPromise === null) {
		                    return;
		                }
		                this.pendingLookupPromise = null;
		                this.backoff.reset();
		                this.backoff.stop();
		                this.latestLookupResult = addressList.map(address => ({
		                    addresses: [address],
		                }));
		                const allAddressesString = '[' +
		                    addressList.map(addr => addr.host + ':' + addr.port).join(',') +
		                    ']';
		                trace('Resolved addresses for target ' +
		                    (0, uri_parser_1.uriToString)(this.target) +
		                    ': ' +
		                    allAddressesString);
		                if (this.latestLookupResult.length === 0) {
		                    this.listener.onError(this.defaultResolutionError);
		                    return;
		                }
		                /* If the TXT lookup has not yet finished, both of the last two
		                 * arguments will be null, which is the equivalent of getting an
		                 * empty TXT response. When the TXT lookup does finish, its handler
		                 * can update the service config by using the same address list */
		                this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});
		            }, err => {
		                if (this.pendingLookupPromise === null) {
		                    return;
		                }
		                trace('Resolution error for target ' +
		                    (0, uri_parser_1.uriToString)(this.target) +
		                    ': ' +
		                    err.message);
		                this.pendingLookupPromise = null;
		                this.stopNextResolutionTimer();
		                this.listener.onError(this.defaultResolutionError);
		            });
		            /* If there already is a still-pending TXT resolution, we can just use
		             * that result when it comes in */
		            if (this.isServiceConfigEnabled && this.pendingTxtPromise === null) {
		                /* We handle the TXT query promise differently than the others because
		                 * the name resolution attempt as a whole is a success even if the TXT
		                 * lookup fails */
		                this.pendingTxtPromise = this.resolveTxt(hostname);
		                this.pendingTxtPromise.then(txtRecord => {
		                    if (this.pendingTxtPromise === null) {
		                        return;
		                    }
		                    this.pendingTxtPromise = null;
		                    try {
		                        this.latestServiceConfig = (0, service_config_1.extractAndSelectServiceConfig)(txtRecord, this.percentage);
		                    }
		                    catch (err) {
		                        this.latestServiceConfigError = {
		                            code: constants_1.Status.UNAVAILABLE,
		                            details: `Parsing service config failed with error ${err.message}`,
		                            metadata: new metadata_1.Metadata(),
		                        };
		                    }
		                    if (this.latestLookupResult !== null) {
		                        /* We rely here on the assumption that calling this function with
		                         * identical parameters will be essentialy idempotent, and calling
		                         * it with the same address list and a different service config
		                         * should result in a fast and seamless switchover. */
		                        this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});
		                    }
		                }, err => {
		                    /* If TXT lookup fails we should do nothing, which means that we
		                     * continue to use the result of the most recent successful lookup,
		                     * or the default null config object if there has never been a
		                     * successful lookup. We do not set the latestServiceConfigError
		                     * here because that is specifically used for response validation
		                     * errors. We still need to handle this error so that it does not
		                     * bubble up as an unhandled promise rejection. */
		                });
		            }
		        }
		    }
		    async lookup(hostname) {
		        if (environment_1.GRPC_NODE_USE_ALTERNATIVE_RESOLVER) {
		            trace('Using alternative DNS resolver.');
		            const records = await Promise.allSettled([
		                this.alternativeResolver.resolve4(hostname),
		                this.alternativeResolver.resolve6(hostname),
		            ]);
		            if (records.every(result => result.status === 'rejected')) {
		                throw new Error(records[0].reason);
		            }
		            return records
		                .reduce((acc, result) => {
		                return result.status === 'fulfilled'
		                    ? [...acc, ...result.value]
		                    : acc;
		            }, [])
		                .map(addr => ({
		                host: addr,
		                port: +this.port,
		            }));
		        }
		        /* We lookup both address families here and then split them up later
		         * because when looking up a single family, dns.lookup outputs an error
		         * if the name exists but there are no records for that family, and that
		         * error is indistinguishable from other kinds of errors */
		        const addressList = await dns_1.promises.lookup(hostname, { all: true });
		        return addressList.map(addr => ({ host: addr.address, port: +this.port }));
		    }
		    async resolveTxt(hostname) {
		        if (environment_1.GRPC_NODE_USE_ALTERNATIVE_RESOLVER) {
		            trace('Using alternative DNS resolver.');
		            return this.alternativeResolver.resolveTxt(hostname);
		        }
		        return dns_1.promises.resolveTxt(hostname);
		    }
		    startNextResolutionTimer() {
		        var _a, _b;
		        clearTimeout(this.nextResolutionTimer);
		        this.nextResolutionTimer = setTimeout(() => {
		            this.stopNextResolutionTimer();
		            if (this.continueResolving) {
		                this.startResolutionWithBackoff();
		            }
		        }, this.minTimeBetweenResolutionsMs);
		        (_b = (_a = this.nextResolutionTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
		        this.isNextResolutionTimerRunning = true;
		    }
		    stopNextResolutionTimer() {
		        clearTimeout(this.nextResolutionTimer);
		        this.isNextResolutionTimerRunning = false;
		    }
		    startResolutionWithBackoff() {
		        if (this.pendingLookupPromise === null) {
		            this.continueResolving = false;
		            this.backoff.runOnce();
		            this.startNextResolutionTimer();
		            this.startResolution();
		        }
		    }
		    updateResolution() {
		        /* If there is a pending lookup, just let it finish. Otherwise, if the
		         * nextResolutionTimer or backoff timer is running, set the
		         * continueResolving flag to resolve when whichever of those timers
		         * fires. Otherwise, start resolving immediately. */
		        if (this.pendingLookupPromise === null) {
		            if (this.isNextResolutionTimerRunning || this.backoff.isRunning()) {
		                if (this.isNextResolutionTimerRunning) {
		                    trace('resolution update delayed by "min time between resolutions" rate limit');
		                }
		                else {
		                    trace('resolution update delayed by backoff timer until ' +
		                        this.backoff.getEndTime().toISOString());
		                }
		                this.continueResolving = true;
		            }
		            else {
		                this.startResolutionWithBackoff();
		            }
		        }
		    }
		    /**
		     * Reset the resolver to the same state it had when it was created. In-flight
		     * DNS requests cannot be cancelled, but they are discarded and their results
		     * will be ignored.
		     */
		    destroy() {
		        this.continueResolving = false;
		        this.backoff.reset();
		        this.backoff.stop();
		        this.stopNextResolutionTimer();
		        this.pendingLookupPromise = null;
		        this.pendingTxtPromise = null;
		        this.latestLookupResult = null;
		        this.latestServiceConfig = null;
		        this.latestServiceConfigError = null;
		        this.returnedIpResult = false;
		    }
		    /**
		     * Get the default authority for the given target. For IP targets, that is
		     * the IP address. For DNS targets, it is the hostname.
		     * @param target
		     */
		    static getDefaultAuthority(target) {
		        return target.path;
		    }
		}
		/**
		 * Set up the DNS resolver class by registering it as the handler for the
		 * "dns:" prefix and as the default resolver.
		 */
		function setup() {
		    (0, resolver_1.registerResolver)('dns', DnsResolver);
		    (0, resolver_1.registerDefaultScheme)('dns');
		}
		
	} (resolverDns));
	return resolverDns;
}

/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(http_proxy, "__esModule", { value: true });
http_proxy.parseCIDR = parseCIDR;
http_proxy.mapProxyName = mapProxyName;
http_proxy.getProxiedConnection = getProxiedConnection;
const logging_1 = logging$8;
const constants_1$8 = constants;
const net_1 = require$$0$3;
const http = require$$3$1;
const logging$6 = logging$8;
const subchannel_address_1$1 = subchannelAddress;
const uri_parser_1$2 = uriParser;
const url_1 = require$$6$1;
const resolver_dns_1 = requireResolverDns();
const TRACER_NAME$5 = 'proxy';
function trace(text) {
    logging$6.trace(constants_1$8.LogVerbosity.DEBUG, TRACER_NAME$5, text);
}
function getProxyInfo() {
    let proxyEnv = '';
    let envVar = '';
    /* Prefer using 'grpc_proxy'. Fallback on 'http_proxy' if it is not set.
     * Also prefer using 'https_proxy' with fallback on 'http_proxy'. The
     * fallback behavior can be removed if there's a demand for it.
     */
    if (process.env.grpc_proxy) {
        envVar = 'grpc_proxy';
        proxyEnv = process.env.grpc_proxy;
    }
    else if (process.env.https_proxy) {
        envVar = 'https_proxy';
        proxyEnv = process.env.https_proxy;
    }
    else if (process.env.http_proxy) {
        envVar = 'http_proxy';
        proxyEnv = process.env.http_proxy;
    }
    else {
        return {};
    }
    let proxyUrl;
    try {
        proxyUrl = new url_1.URL(proxyEnv);
    }
    catch (e) {
        (0, logging_1.log)(constants_1$8.LogVerbosity.ERROR, `cannot parse value of "${envVar}" env var`);
        return {};
    }
    if (proxyUrl.protocol !== 'http:') {
        (0, logging_1.log)(constants_1$8.LogVerbosity.ERROR, `"${proxyUrl.protocol}" scheme not supported in proxy URI`);
        return {};
    }
    let userCred = null;
    if (proxyUrl.username) {
        if (proxyUrl.password) {
            (0, logging_1.log)(constants_1$8.LogVerbosity.INFO, 'userinfo found in proxy URI');
            userCred = decodeURIComponent(`${proxyUrl.username}:${proxyUrl.password}`);
        }
        else {
            userCred = proxyUrl.username;
        }
    }
    const hostname = proxyUrl.hostname;
    let port = proxyUrl.port;
    /* The proxy URL uses the scheme "http:", which has a default port number of
     * 80. We need to set that explicitly here if it is omitted because otherwise
     * it will use gRPC's default port 443. */
    if (port === '') {
        port = '80';
    }
    const result = {
        address: `${hostname}:${port}`,
    };
    if (userCred) {
        result.creds = userCred;
    }
    trace('Proxy server ' + result.address + ' set by environment variable ' + envVar);
    return result;
}
function getNoProxyHostList() {
    /* Prefer using 'no_grpc_proxy'. Fallback on 'no_proxy' if it is not set. */
    let noProxyStr = process.env.no_grpc_proxy;
    let envVar = 'no_grpc_proxy';
    if (!noProxyStr) {
        noProxyStr = process.env.no_proxy;
        envVar = 'no_proxy';
    }
    if (noProxyStr) {
        trace('No proxy server list set by environment variable ' + envVar);
        return noProxyStr.split(',');
    }
    else {
        return [];
    }
}
/*
 * The groups correspond to CIDR parts as follows:
 * 1. ip
 * 2. prefixLength
 */
function parseCIDR(cidrString) {
    const splitRange = cidrString.split('/');
    if (splitRange.length !== 2) {
        return null;
    }
    const prefixLength = parseInt(splitRange[1], 10);
    if (!(0, net_1.isIPv4)(splitRange[0]) || Number.isNaN(prefixLength) || prefixLength < 0 || prefixLength > 32) {
        return null;
    }
    return {
        ip: ipToInt(splitRange[0]),
        prefixLength: prefixLength
    };
}
function ipToInt(ip) {
    return ip.split(".").reduce((acc, octet) => (acc << 8) + parseInt(octet, 10), 0);
}
function isIpInCIDR(cidr, serverHost) {
    const ip = cidr.ip;
    const mask = -1 << (32 - cidr.prefixLength);
    const hostIP = ipToInt(serverHost);
    return (hostIP & mask) === (ip & mask);
}
function hostMatchesNoProxyList(serverHost) {
    for (const host of getNoProxyHostList()) {
        const parsedCIDR = parseCIDR(host);
        // host is a CIDR and serverHost is an IP address
        if ((0, net_1.isIPv4)(serverHost) && parsedCIDR && isIpInCIDR(parsedCIDR, serverHost)) {
            return true;
        }
        else if (serverHost.endsWith(host)) {
            // host is a single IP or a domain name suffix
            return true;
        }
    }
    return false;
}
function mapProxyName(target, options) {
    var _a;
    const noProxyResult = {
        target: target,
        extraOptions: {},
    };
    if (((_a = options['grpc.enable_http_proxy']) !== null && _a !== void 0 ? _a : 1) === 0) {
        return noProxyResult;
    }
    if (target.scheme === 'unix') {
        return noProxyResult;
    }
    const proxyInfo = getProxyInfo();
    if (!proxyInfo.address) {
        return noProxyResult;
    }
    const hostPort = (0, uri_parser_1$2.splitHostPort)(target.path);
    if (!hostPort) {
        return noProxyResult;
    }
    const serverHost = hostPort.host;
    if (hostMatchesNoProxyList(serverHost)) {
        trace('Not using proxy for target in no_proxy list: ' + (0, uri_parser_1$2.uriToString)(target));
        return noProxyResult;
    }
    const extraOptions = {
        'grpc.http_connect_target': (0, uri_parser_1$2.uriToString)(target),
    };
    if (proxyInfo.creds) {
        extraOptions['grpc.http_connect_creds'] = proxyInfo.creds;
    }
    return {
        target: {
            scheme: 'dns',
            path: proxyInfo.address,
        },
        extraOptions: extraOptions,
    };
}
function getProxiedConnection(address, channelOptions) {
    var _a;
    if (!('grpc.http_connect_target' in channelOptions)) {
        return Promise.resolve(null);
    }
    const realTarget = channelOptions['grpc.http_connect_target'];
    const parsedTarget = (0, uri_parser_1$2.parseUri)(realTarget);
    if (parsedTarget === null) {
        return Promise.resolve(null);
    }
    const splitHostPost = (0, uri_parser_1$2.splitHostPort)(parsedTarget.path);
    if (splitHostPost === null) {
        return Promise.resolve(null);
    }
    const hostPort = `${splitHostPost.host}:${(_a = splitHostPost.port) !== null && _a !== void 0 ? _a : resolver_dns_1.DEFAULT_PORT}`;
    const options = {
        method: 'CONNECT',
        path: hostPort,
    };
    const headers = {
        Host: hostPort,
    };
    // Connect to the subchannel address as a proxy
    if ((0, subchannel_address_1$1.isTcpSubchannelAddress)(address)) {
        options.host = address.host;
        options.port = address.port;
    }
    else {
        options.socketPath = address.path;
    }
    if ('grpc.http_connect_creds' in channelOptions) {
        headers['Proxy-Authorization'] =
            'Basic ' +
                Buffer.from(channelOptions['grpc.http_connect_creds']).toString('base64');
    }
    options.headers = headers;
    const proxyAddressString = (0, subchannel_address_1$1.subchannelAddressToString)(address);
    trace('Using proxy ' + proxyAddressString + ' to connect to ' + options.path);
    return new Promise((resolve, reject) => {
        const request = http.request(options);
        request.once('connect', (res, socket, head) => {
            request.removeAllListeners();
            socket.removeAllListeners();
            if (res.statusCode === 200) {
                trace('Successfully connected to ' +
                    options.path +
                    ' through proxy ' +
                    proxyAddressString);
                // The HTTP client may have already read a few bytes of the proxied
                // connection. If that's the case, put them back into the socket.
                // See https://github.com/grpc/grpc-node/issues/2744.
                if (head.length > 0) {
                    socket.unshift(head);
                }
                trace('Successfully established a plaintext connection to ' +
                    options.path +
                    ' through proxy ' +
                    proxyAddressString);
                resolve(socket);
            }
            else {
                (0, logging_1.log)(constants_1$8.LogVerbosity.ERROR, 'Failed to connect to ' +
                    options.path +
                    ' through proxy ' +
                    proxyAddressString +
                    ' with status ' +
                    res.statusCode);
                reject();
            }
        });
        request.once('error', err => {
            request.removeAllListeners();
            (0, logging_1.log)(constants_1$8.LogVerbosity.ERROR, 'Failed to connect to proxy ' +
                proxyAddressString +
                ' with error ' +
                err.message);
            reject();
        });
        request.end();
    });
}

var subchannelCall = {};

var streamDecoder = {};

var hasRequiredStreamDecoder;

function requireStreamDecoder () {
	if (hasRequiredStreamDecoder) return streamDecoder;
	hasRequiredStreamDecoder = 1;
	/*
	 * Copyright 2019 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(streamDecoder, "__esModule", { value: true });
	streamDecoder.StreamDecoder = void 0;
	var ReadState;
	(function (ReadState) {
	    ReadState[ReadState["NO_DATA"] = 0] = "NO_DATA";
	    ReadState[ReadState["READING_SIZE"] = 1] = "READING_SIZE";
	    ReadState[ReadState["READING_MESSAGE"] = 2] = "READING_MESSAGE";
	})(ReadState || (ReadState = {}));
	class StreamDecoder {
	    constructor(maxReadMessageLength) {
	        this.maxReadMessageLength = maxReadMessageLength;
	        this.readState = ReadState.NO_DATA;
	        this.readCompressFlag = Buffer.alloc(1);
	        this.readPartialSize = Buffer.alloc(4);
	        this.readSizeRemaining = 4;
	        this.readMessageSize = 0;
	        this.readPartialMessage = [];
	        this.readMessageRemaining = 0;
	    }
	    write(data) {
	        let readHead = 0;
	        let toRead;
	        const result = [];
	        while (readHead < data.length) {
	            switch (this.readState) {
	                case ReadState.NO_DATA:
	                    this.readCompressFlag = data.slice(readHead, readHead + 1);
	                    readHead += 1;
	                    this.readState = ReadState.READING_SIZE;
	                    this.readPartialSize.fill(0);
	                    this.readSizeRemaining = 4;
	                    this.readMessageSize = 0;
	                    this.readMessageRemaining = 0;
	                    this.readPartialMessage = [];
	                    break;
	                case ReadState.READING_SIZE:
	                    toRead = Math.min(data.length - readHead, this.readSizeRemaining);
	                    data.copy(this.readPartialSize, 4 - this.readSizeRemaining, readHead, readHead + toRead);
	                    this.readSizeRemaining -= toRead;
	                    readHead += toRead;
	                    // readSizeRemaining >=0 here
	                    if (this.readSizeRemaining === 0) {
	                        this.readMessageSize = this.readPartialSize.readUInt32BE(0);
	                        if (this.maxReadMessageLength !== -1 && this.readMessageSize > this.maxReadMessageLength) {
	                            throw new Error(`Received message larger than max (${this.readMessageSize} vs ${this.maxReadMessageLength})`);
	                        }
	                        this.readMessageRemaining = this.readMessageSize;
	                        if (this.readMessageRemaining > 0) {
	                            this.readState = ReadState.READING_MESSAGE;
	                        }
	                        else {
	                            const message = Buffer.concat([this.readCompressFlag, this.readPartialSize], 5);
	                            this.readState = ReadState.NO_DATA;
	                            result.push(message);
	                        }
	                    }
	                    break;
	                case ReadState.READING_MESSAGE:
	                    toRead = Math.min(data.length - readHead, this.readMessageRemaining);
	                    this.readPartialMessage.push(data.slice(readHead, readHead + toRead));
	                    this.readMessageRemaining -= toRead;
	                    readHead += toRead;
	                    // readMessageRemaining >=0 here
	                    if (this.readMessageRemaining === 0) {
	                        // At this point, we have read a full message
	                        const framedMessageBuffers = [
	                            this.readCompressFlag,
	                            this.readPartialSize,
	                        ].concat(this.readPartialMessage);
	                        const framedMessage = Buffer.concat(framedMessageBuffers, this.readMessageSize + 5);
	                        this.readState = ReadState.NO_DATA;
	                        result.push(framedMessage);
	                    }
	                    break;
	                default:
	                    throw new Error('Unexpected read state');
	            }
	        }
	        return result;
	    }
	}
	streamDecoder.StreamDecoder = StreamDecoder;
	
	return streamDecoder;
}

/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(subchannelCall, "__esModule", { value: true });
subchannelCall.Http2SubchannelCall = void 0;
const http2$2 = require$$0$5;
const os = require$$0$2;
const constants_1$7 = constants;
const metadata_1$4 = metadata;
const stream_decoder_1 = requireStreamDecoder();
const logging$5 = logging$8;
const constants_2 = constants;
const TRACER_NAME$4 = 'subchannel_call';
/**
 * Should do approximately the same thing as util.getSystemErrorName but the
 * TypeScript types don't have that function for some reason so I just made my
 * own.
 * @param errno
 */
function getSystemErrorName(errno) {
    for (const [name, num] of Object.entries(os.constants.errno)) {
        if (num === errno) {
            return name;
        }
    }
    return 'Unknown system error ' + errno;
}
function mapHttpStatusCode(code) {
    const details = `Received HTTP status code ${code}`;
    let mappedStatusCode;
    switch (code) {
        // TODO(murgatroid99): handle 100 and 101
        case 400:
            mappedStatusCode = constants_1$7.Status.INTERNAL;
            break;
        case 401:
            mappedStatusCode = constants_1$7.Status.UNAUTHENTICATED;
            break;
        case 403:
            mappedStatusCode = constants_1$7.Status.PERMISSION_DENIED;
            break;
        case 404:
            mappedStatusCode = constants_1$7.Status.UNIMPLEMENTED;
            break;
        case 429:
        case 502:
        case 503:
        case 504:
            mappedStatusCode = constants_1$7.Status.UNAVAILABLE;
            break;
        default:
            mappedStatusCode = constants_1$7.Status.UNKNOWN;
    }
    return {
        code: mappedStatusCode,
        details: details,
        metadata: new metadata_1$4.Metadata()
    };
}
class Http2SubchannelCall {
    constructor(http2Stream, callEventTracker, listener, transport, callId) {
        var _a;
        this.http2Stream = http2Stream;
        this.callEventTracker = callEventTracker;
        this.listener = listener;
        this.transport = transport;
        this.callId = callId;
        this.isReadFilterPending = false;
        this.isPushPending = false;
        this.canPush = false;
        /**
         * Indicates that an 'end' event has come from the http2 stream, so there
         * will be no more data events.
         */
        this.readsClosed = false;
        this.statusOutput = false;
        this.unpushedReadMessages = [];
        // This is populated (non-null) if and only if the call has ended
        this.finalStatus = null;
        this.internalError = null;
        this.serverEndedCall = false;
        this.connectionDropped = false;
        const maxReceiveMessageLength = (_a = transport.getOptions()['grpc.max_receive_message_length']) !== null && _a !== void 0 ? _a : constants_1$7.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;
        this.decoder = new stream_decoder_1.StreamDecoder(maxReceiveMessageLength);
        http2Stream.on('response', (headers, flags) => {
            let headersString = '';
            for (const header of Object.keys(headers)) {
                headersString += '\t\t' + header + ': ' + headers[header] + '\n';
            }
            this.trace('Received server headers:\n' + headersString);
            this.httpStatusCode = headers[':status'];
            if (flags & http2$2.constants.NGHTTP2_FLAG_END_STREAM) {
                this.handleTrailers(headers);
            }
            else {
                let metadata;
                try {
                    metadata = metadata_1$4.Metadata.fromHttp2Headers(headers);
                }
                catch (error) {
                    this.endCall({
                        code: constants_1$7.Status.UNKNOWN,
                        details: error.message,
                        metadata: new metadata_1$4.Metadata(),
                    });
                    return;
                }
                this.listener.onReceiveMetadata(metadata);
            }
        });
        http2Stream.on('trailers', (headers) => {
            this.handleTrailers(headers);
        });
        http2Stream.on('data', (data) => {
            /* If the status has already been output, allow the http2 stream to
             * drain without processing the data. */
            if (this.statusOutput) {
                return;
            }
            this.trace('receive HTTP/2 data frame of length ' + data.length);
            let messages;
            try {
                messages = this.decoder.write(data);
            }
            catch (e) {
                /* Some servers send HTML error pages along with HTTP status codes.
                 * When the client attempts to parse this as a length-delimited
                 * message, the parsed message size is greater than the default limit,
                 * resulting in a message decoding error. In that situation, the HTTP
                 * error code information is more useful to the user than the
                 * RESOURCE_EXHAUSTED error is, so we report that instead. Normally,
                 * we delay processing the HTTP status until after the stream ends, to
                 * prioritize reporting the gRPC status from trailers if it is present,
                 * but when there is a message parsing error we end the stream early
                 * before processing trailers. */
                if (this.httpStatusCode !== undefined && this.httpStatusCode !== 200) {
                    const mappedStatus = mapHttpStatusCode(this.httpStatusCode);
                    this.cancelWithStatus(mappedStatus.code, mappedStatus.details);
                }
                else {
                    this.cancelWithStatus(constants_1$7.Status.RESOURCE_EXHAUSTED, e.message);
                }
                return;
            }
            for (const message of messages) {
                this.trace('parsed message of length ' + message.length);
                this.callEventTracker.addMessageReceived();
                this.tryPush(message);
            }
        });
        http2Stream.on('end', () => {
            this.readsClosed = true;
            this.maybeOutputStatus();
        });
        http2Stream.on('close', () => {
            this.serverEndedCall = true;
            /* Use process.next tick to ensure that this code happens after any
             * "error" event that may be emitted at about the same time, so that
             * we can bubble up the error message from that event. */
            process.nextTick(() => {
                var _a;
                this.trace('HTTP/2 stream closed with code ' + http2Stream.rstCode);
                /* If we have a final status with an OK status code, that means that
                 * we have received all of the messages and we have processed the
                 * trailers and the call completed successfully, so it doesn't matter
                 * how the stream ends after that */
                if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1$7.Status.OK) {
                    return;
                }
                let code;
                let details = '';
                switch (http2Stream.rstCode) {
                    case http2$2.constants.NGHTTP2_NO_ERROR:
                        /* If we get a NO_ERROR code and we already have a status, the
                         * stream completed properly and we just haven't fully processed
                         * it yet */
                        if (this.finalStatus !== null) {
                            return;
                        }
                        if (this.httpStatusCode && this.httpStatusCode !== 200) {
                            const mappedStatus = mapHttpStatusCode(this.httpStatusCode);
                            code = mappedStatus.code;
                            details = mappedStatus.details;
                        }
                        else {
                            code = constants_1$7.Status.INTERNAL;
                            details = `Received RST_STREAM with code ${http2Stream.rstCode} (Call ended without gRPC status)`;
                        }
                        break;
                    case http2$2.constants.NGHTTP2_REFUSED_STREAM:
                        code = constants_1$7.Status.UNAVAILABLE;
                        details = 'Stream refused by server';
                        break;
                    case http2$2.constants.NGHTTP2_CANCEL:
                        /* Bug reports indicate that Node synthesizes a NGHTTP2_CANCEL
                         * code from connection drops. We want to prioritize reporting
                         * an unavailable status when that happens. */
                        if (this.connectionDropped) {
                            code = constants_1$7.Status.UNAVAILABLE;
                            details = 'Connection dropped';
                        }
                        else {
                            code = constants_1$7.Status.CANCELLED;
                            details = 'Call cancelled';
                        }
                        break;
                    case http2$2.constants.NGHTTP2_ENHANCE_YOUR_CALM:
                        code = constants_1$7.Status.RESOURCE_EXHAUSTED;
                        details = 'Bandwidth exhausted or memory limit exceeded';
                        break;
                    case http2$2.constants.NGHTTP2_INADEQUATE_SECURITY:
                        code = constants_1$7.Status.PERMISSION_DENIED;
                        details = 'Protocol not secure enough';
                        break;
                    case http2$2.constants.NGHTTP2_INTERNAL_ERROR:
                        code = constants_1$7.Status.INTERNAL;
                        if (this.internalError === null) {
                            /* This error code was previously handled in the default case, and
                             * there are several instances of it online, so I wanted to
                             * preserve the original error message so that people find existing
                             * information in searches, but also include the more recognizable
                             * "Internal server error" message. */
                            details = `Received RST_STREAM with code ${http2Stream.rstCode} (Internal server error)`;
                        }
                        else {
                            if (this.internalError.code === 'ECONNRESET' ||
                                this.internalError.code === 'ETIMEDOUT') {
                                code = constants_1$7.Status.UNAVAILABLE;
                                details = this.internalError.message;
                            }
                            else {
                                /* The "Received RST_STREAM with code ..." error is preserved
                                 * here for continuity with errors reported online, but the
                                 * error message at the end will probably be more relevant in
                                 * most cases. */
                                details = `Received RST_STREAM with code ${http2Stream.rstCode} triggered by internal client error: ${this.internalError.message}`;
                            }
                        }
                        break;
                    default:
                        code = constants_1$7.Status.INTERNAL;
                        details = `Received RST_STREAM with code ${http2Stream.rstCode}`;
                }
                // This is a no-op if trailers were received at all.
                // This is OK, because status codes emitted here correspond to more
                // catastrophic issues that prevent us from receiving trailers in the
                // first place.
                this.endCall({
                    code,
                    details,
                    metadata: new metadata_1$4.Metadata(),
                    rstCode: http2Stream.rstCode,
                });
            });
        });
        http2Stream.on('error', (err) => {
            /* We need an error handler here to stop "Uncaught Error" exceptions
             * from bubbling up. However, errors here should all correspond to
             * "close" events, where we will handle the error more granularly */
            /* Specifically looking for stream errors that were *not* constructed
             * from a RST_STREAM response here:
             * https://github.com/nodejs/node/blob/8b8620d580314050175983402dfddf2674e8e22a/lib/internal/http2/core.js#L2267
             */
            if (err.code !== 'ERR_HTTP2_STREAM_ERROR') {
                this.trace('Node error event: message=' +
                    err.message +
                    ' code=' +
                    err.code +
                    ' errno=' +
                    getSystemErrorName(err.errno) +
                    ' syscall=' +
                    err.syscall);
                this.internalError = err;
            }
            this.callEventTracker.onStreamEnd(false);
        });
    }
    getDeadlineInfo() {
        return [`remote_addr=${this.getPeer()}`];
    }
    onDisconnect() {
        this.connectionDropped = true;
        /* Give the call an event loop cycle to finish naturally before reporting
         * the disconnection as an error. */
        setImmediate(() => {
            this.endCall({
                code: constants_1$7.Status.UNAVAILABLE,
                details: 'Connection dropped',
                metadata: new metadata_1$4.Metadata(),
            });
        });
    }
    outputStatus() {
        /* Precondition: this.finalStatus !== null */
        if (!this.statusOutput) {
            this.statusOutput = true;
            this.trace('ended with status: code=' +
                this.finalStatus.code +
                ' details="' +
                this.finalStatus.details +
                '"');
            this.callEventTracker.onCallEnd(this.finalStatus);
            /* We delay the actual action of bubbling up the status to insulate the
             * cleanup code in this class from any errors that may be thrown in the
             * upper layers as a result of bubbling up the status. In particular,
             * if the status is not OK, the "error" event may be emitted
             * synchronously at the top level, which will result in a thrown error if
             * the user does not handle that event. */
            process.nextTick(() => {
                this.listener.onReceiveStatus(this.finalStatus);
            });
            /* Leave the http2 stream in flowing state to drain incoming messages, to
             * ensure that the stream closure completes. The call stream already does
             * not push more messages after the status is output, so the messages go
             * nowhere either way. */
            this.http2Stream.resume();
        }
    }
    trace(text) {
        logging$5.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME$4, '[' + this.callId + '] ' + text);
    }
    /**
     * On first call, emits a 'status' event with the given StatusObject.
     * Subsequent calls are no-ops.
     * @param status The status of the call.
     */
    endCall(status) {
        /* If the status is OK and a new status comes in (e.g. from a
         * deserialization failure), that new status takes priority */
        if (this.finalStatus === null || this.finalStatus.code === constants_1$7.Status.OK) {
            this.finalStatus = status;
            this.maybeOutputStatus();
        }
        this.destroyHttp2Stream();
    }
    maybeOutputStatus() {
        if (this.finalStatus !== null) {
            /* The combination check of readsClosed and that the two message buffer
             * arrays are empty checks that there all incoming data has been fully
             * processed */
            if (this.finalStatus.code !== constants_1$7.Status.OK ||
                (this.readsClosed &&
                    this.unpushedReadMessages.length === 0 &&
                    !this.isReadFilterPending &&
                    !this.isPushPending)) {
                this.outputStatus();
            }
        }
    }
    push(message) {
        this.trace('pushing to reader message of length ' +
            (message instanceof Buffer ? message.length : null));
        this.canPush = false;
        this.isPushPending = true;
        process.nextTick(() => {
            this.isPushPending = false;
            /* If we have already output the status any later messages should be
             * ignored, and can cause out-of-order operation errors higher up in the
             * stack. Checking as late as possible here to avoid any race conditions.
             */
            if (this.statusOutput) {
                return;
            }
            this.listener.onReceiveMessage(message);
            this.maybeOutputStatus();
        });
    }
    tryPush(messageBytes) {
        if (this.canPush) {
            this.http2Stream.pause();
            this.push(messageBytes);
        }
        else {
            this.trace('unpushedReadMessages.push message of length ' + messageBytes.length);
            this.unpushedReadMessages.push(messageBytes);
        }
    }
    handleTrailers(headers) {
        this.serverEndedCall = true;
        this.callEventTracker.onStreamEnd(true);
        let headersString = '';
        for (const header of Object.keys(headers)) {
            headersString += '\t\t' + header + ': ' + headers[header] + '\n';
        }
        this.trace('Received server trailers:\n' + headersString);
        let metadata;
        try {
            metadata = metadata_1$4.Metadata.fromHttp2Headers(headers);
        }
        catch (e) {
            metadata = new metadata_1$4.Metadata();
        }
        const metadataMap = metadata.getMap();
        let status;
        if (typeof metadataMap['grpc-status'] === 'string') {
            const receivedStatus = Number(metadataMap['grpc-status']);
            this.trace('received status code ' + receivedStatus + ' from server');
            metadata.remove('grpc-status');
            let details = '';
            if (typeof metadataMap['grpc-message'] === 'string') {
                try {
                    details = decodeURI(metadataMap['grpc-message']);
                }
                catch (e) {
                    details = metadataMap['grpc-message'];
                }
                metadata.remove('grpc-message');
                this.trace('received status details string "' + details + '" from server');
            }
            status = {
                code: receivedStatus,
                details: details,
                metadata: metadata
            };
        }
        else if (this.httpStatusCode) {
            status = mapHttpStatusCode(this.httpStatusCode);
            status.metadata = metadata;
        }
        else {
            status = {
                code: constants_1$7.Status.UNKNOWN,
                details: 'No status information received',
                metadata: metadata
            };
        }
        // This is a no-op if the call was already ended when handling headers.
        this.endCall(status);
    }
    destroyHttp2Stream() {
        var _a;
        // The http2 stream could already have been destroyed if cancelWithStatus
        // is called in response to an internal http2 error.
        if (this.http2Stream.destroyed) {
            return;
        }
        /* If the server ended the call, sending an RST_STREAM is redundant, so we
         * just half close on the client side instead to finish closing the stream.
         */
        if (this.serverEndedCall) {
            this.http2Stream.end();
        }
        else {
            /* If the call has ended with an OK status, communicate that when closing
             * the stream, partly to avoid a situation in which we detect an error
             * RST_STREAM as a result after we have the status */
            let code;
            if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1$7.Status.OK) {
                code = http2$2.constants.NGHTTP2_NO_ERROR;
            }
            else {
                code = http2$2.constants.NGHTTP2_CANCEL;
            }
            this.trace('close http2 stream with code ' + code);
            this.http2Stream.close(code);
        }
    }
    cancelWithStatus(status, details) {
        this.trace('cancelWithStatus code: ' + status + ' details: "' + details + '"');
        this.endCall({ code: status, details, metadata: new metadata_1$4.Metadata() });
    }
    getStatus() {
        return this.finalStatus;
    }
    getPeer() {
        return this.transport.getPeerName();
    }
    getCallNumber() {
        return this.callId;
    }
    startRead() {
        /* If the stream has ended with an error, we should not emit any more
         * messages and we should communicate that the stream has ended */
        if (this.finalStatus !== null && this.finalStatus.code !== constants_1$7.Status.OK) {
            this.readsClosed = true;
            this.maybeOutputStatus();
            return;
        }
        this.canPush = true;
        if (this.unpushedReadMessages.length > 0) {
            const nextMessage = this.unpushedReadMessages.shift();
            this.push(nextMessage);
            return;
        }
        /* Only resume reading from the http2Stream if we don't have any pending
         * messages to emit */
        this.http2Stream.resume();
    }
    sendMessageWithContext(context, message) {
        this.trace('write() called with message of length ' + message.length);
        const cb = (error) => {
            /* nextTick here ensures that no stream action can be taken in the call
             * stack of the write callback, in order to hopefully work around
             * https://github.com/nodejs/node/issues/49147 */
            process.nextTick(() => {
                var _a;
                let code = constants_1$7.Status.UNAVAILABLE;
                if ((error === null || error === void 0 ? void 0 : error.code) ===
                    'ERR_STREAM_WRITE_AFTER_END') {
                    code = constants_1$7.Status.INTERNAL;
                }
                if (error) {
                    this.cancelWithStatus(code, `Write error: ${error.message}`);
                }
                (_a = context.callback) === null || _a === void 0 ? void 0 : _a.call(context);
            });
        };
        this.trace('sending data chunk of length ' + message.length);
        this.callEventTracker.addMessageSent();
        try {
            this.http2Stream.write(message, cb);
        }
        catch (error) {
            this.endCall({
                code: constants_1$7.Status.UNAVAILABLE,
                details: `Write failed with error ${error.message}`,
                metadata: new metadata_1$4.Metadata(),
            });
        }
    }
    halfClose() {
        this.trace('end() called');
        this.trace('calling end() on HTTP/2 stream');
        this.http2Stream.end();
    }
}
subchannelCall.Http2SubchannelCall = Http2SubchannelCall;

var callNumber = {};

/*
 * Copyright 2022 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(callNumber, "__esModule", { value: true });
callNumber.getNextCallNumber = getNextCallNumber;
let nextCallNumber = 0;
function getNextCallNumber() {
    return nextCallNumber++;
}

var hasRequiredTransport;

function requireTransport () {
	if (hasRequiredTransport) return transport;
	hasRequiredTransport = 1;
	/*
	 * Copyright 2023 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(transport, "__esModule", { value: true });
	transport.Http2SubchannelConnector = void 0;
	const http2 = require$$0$5;
	const channelz_1 = requireChannelz();
	const constants_1 = constants;
	const http_proxy_1 = http_proxy;
	const logging = logging$8;
	const resolver_1 = resolver;
	const subchannel_address_1 = subchannelAddress;
	const uri_parser_1 = uriParser;
	const net = require$$0$3;
	const subchannel_call_1 = subchannelCall;
	const call_number_1 = callNumber;
	const TRACER_NAME = 'transport';
	const FLOW_CONTROL_TRACER_NAME = 'transport_flowctrl';
	const clientVersion = require$$11.version;
	const { HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_TE, HTTP2_HEADER_USER_AGENT, } = http2.constants;
	const KEEPALIVE_TIMEOUT_MS = 20000;
	const tooManyPingsData = Buffer.from('too_many_pings', 'ascii');
	class Http2Transport {
	    constructor(session, subchannelAddress, options, 
	    /**
	     * Name of the remote server, if it is not the same as the subchannel
	     * address, i.e. if connecting through an HTTP CONNECT proxy.
	     */
	    remoteName) {
	        this.session = session;
	        this.options = options;
	        this.remoteName = remoteName;
	        /**
	         * Timer reference indicating when to send the next ping or when the most recent ping will be considered lost.
	         */
	        this.keepaliveTimer = null;
	        /**
	         * Indicates that the keepalive timer ran out while there were no active
	         * calls, and a ping should be sent the next time a call starts.
	         */
	        this.pendingSendKeepalivePing = false;
	        this.activeCalls = new Set();
	        this.disconnectListeners = [];
	        this.disconnectHandled = false;
	        this.channelzEnabled = true;
	        this.keepalivesSent = 0;
	        this.messagesSent = 0;
	        this.messagesReceived = 0;
	        this.lastMessageSentTimestamp = null;
	        this.lastMessageReceivedTimestamp = null;
	        /* Populate subchannelAddressString and channelzRef before doing anything
	         * else, because they are used in the trace methods. */
	        this.subchannelAddressString = (0, subchannel_address_1.subchannelAddressToString)(subchannelAddress);
	        if (options['grpc.enable_channelz'] === 0) {
	            this.channelzEnabled = false;
	            this.streamTracker = new channelz_1.ChannelzCallTrackerStub();
	        }
	        else {
	            this.streamTracker = new channelz_1.ChannelzCallTracker();
	        }
	        this.channelzRef = (0, channelz_1.registerChannelzSocket)(this.subchannelAddressString, () => this.getChannelzInfo(), this.channelzEnabled);
	        // Build user-agent string.
	        this.userAgent = [
	            options['grpc.primary_user_agent'],
	            `grpc-node-js/${clientVersion}`,
	            options['grpc.secondary_user_agent'],
	        ]
	            .filter(e => e)
	            .join(' '); // remove falsey values first
	        if ('grpc.keepalive_time_ms' in options) {
	            this.keepaliveTimeMs = options['grpc.keepalive_time_ms'];
	        }
	        else {
	            this.keepaliveTimeMs = -1;
	        }
	        if ('grpc.keepalive_timeout_ms' in options) {
	            this.keepaliveTimeoutMs = options['grpc.keepalive_timeout_ms'];
	        }
	        else {
	            this.keepaliveTimeoutMs = KEEPALIVE_TIMEOUT_MS;
	        }
	        if ('grpc.keepalive_permit_without_calls' in options) {
	            this.keepaliveWithoutCalls =
	                options['grpc.keepalive_permit_without_calls'] === 1;
	        }
	        else {
	            this.keepaliveWithoutCalls = false;
	        }
	        session.once('close', () => {
	            this.trace('session closed');
	            this.handleDisconnect();
	        });
	        session.once('goaway', (errorCode, lastStreamID, opaqueData) => {
	            let tooManyPings = false;
	            /* See the last paragraph of
	             * https://github.com/grpc/proposal/blob/master/A8-client-side-keepalive.md#basic-keepalive */
	            if (errorCode === http2.constants.NGHTTP2_ENHANCE_YOUR_CALM &&
	                opaqueData &&
	                opaqueData.equals(tooManyPingsData)) {
	                tooManyPings = true;
	            }
	            this.trace('connection closed by GOAWAY with code ' +
	                errorCode +
	                ' and data ' +
	                (opaqueData === null || opaqueData === void 0 ? void 0 : opaqueData.toString()));
	            this.reportDisconnectToOwner(tooManyPings);
	        });
	        session.once('error', error => {
	            this.trace('connection closed with error ' + error.message);
	            this.handleDisconnect();
	        });
	        session.socket.once('close', (hadError) => {
	            this.trace('connection closed. hadError=' + hadError);
	            this.handleDisconnect();
	        });
	        if (logging.isTracerEnabled(TRACER_NAME)) {
	            session.on('remoteSettings', (settings) => {
	                this.trace('new settings received' +
	                    (this.session !== session ? ' on the old connection' : '') +
	                    ': ' +
	                    JSON.stringify(settings));
	            });
	            session.on('localSettings', (settings) => {
	                this.trace('local settings acknowledged by remote' +
	                    (this.session !== session ? ' on the old connection' : '') +
	                    ': ' +
	                    JSON.stringify(settings));
	            });
	        }
	        /* Start the keepalive timer last, because this can trigger trace logs,
	         * which should only happen after everything else is set up. */
	        if (this.keepaliveWithoutCalls) {
	            this.maybeStartKeepalivePingTimer();
	        }
	    }
	    getChannelzInfo() {
	        var _a, _b, _c;
	        const sessionSocket = this.session.socket;
	        const remoteAddress = sessionSocket.remoteAddress
	            ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.remoteAddress, sessionSocket.remotePort)
	            : null;
	        const localAddress = sessionSocket.localAddress
	            ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.localAddress, sessionSocket.localPort)
	            : null;
	        let tlsInfo;
	        if (this.session.encrypted) {
	            const tlsSocket = sessionSocket;
	            const cipherInfo = tlsSocket.getCipher();
	            const certificate = tlsSocket.getCertificate();
	            const peerCertificate = tlsSocket.getPeerCertificate();
	            tlsInfo = {
	                cipherSuiteStandardName: (_a = cipherInfo.standardName) !== null && _a !== void 0 ? _a : null,
	                cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,
	                localCertificate: certificate && 'raw' in certificate ? certificate.raw : null,
	                remoteCertificate: peerCertificate && 'raw' in peerCertificate
	                    ? peerCertificate.raw
	                    : null,
	            };
	        }
	        else {
	            tlsInfo = null;
	        }
	        const socketInfo = {
	            remoteAddress: remoteAddress,
	            localAddress: localAddress,
	            security: tlsInfo,
	            remoteName: this.remoteName,
	            streamsStarted: this.streamTracker.callsStarted,
	            streamsSucceeded: this.streamTracker.callsSucceeded,
	            streamsFailed: this.streamTracker.callsFailed,
	            messagesSent: this.messagesSent,
	            messagesReceived: this.messagesReceived,
	            keepAlivesSent: this.keepalivesSent,
	            lastLocalStreamCreatedTimestamp: this.streamTracker.lastCallStartedTimestamp,
	            lastRemoteStreamCreatedTimestamp: null,
	            lastMessageSentTimestamp: this.lastMessageSentTimestamp,
	            lastMessageReceivedTimestamp: this.lastMessageReceivedTimestamp,
	            localFlowControlWindow: (_b = this.session.state.localWindowSize) !== null && _b !== void 0 ? _b : null,
	            remoteFlowControlWindow: (_c = this.session.state.remoteWindowSize) !== null && _c !== void 0 ? _c : null,
	        };
	        return socketInfo;
	    }
	    trace(text) {
	        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '(' +
	            this.channelzRef.id +
	            ') ' +
	            this.subchannelAddressString +
	            ' ' +
	            text);
	    }
	    keepaliveTrace(text) {
	        logging.trace(constants_1.LogVerbosity.DEBUG, 'keepalive', '(' +
	            this.channelzRef.id +
	            ') ' +
	            this.subchannelAddressString +
	            ' ' +
	            text);
	    }
	    flowControlTrace(text) {
	        logging.trace(constants_1.LogVerbosity.DEBUG, FLOW_CONTROL_TRACER_NAME, '(' +
	            this.channelzRef.id +
	            ') ' +
	            this.subchannelAddressString +
	            ' ' +
	            text);
	    }
	    internalsTrace(text) {
	        logging.trace(constants_1.LogVerbosity.DEBUG, 'transport_internals', '(' +
	            this.channelzRef.id +
	            ') ' +
	            this.subchannelAddressString +
	            ' ' +
	            text);
	    }
	    /**
	     * Indicate to the owner of this object that this transport should no longer
	     * be used. That happens if the connection drops, or if the server sends a
	     * GOAWAY.
	     * @param tooManyPings If true, this was triggered by a GOAWAY with data
	     * indicating that the session was closed becaues the client sent too many
	     * pings.
	     * @returns
	     */
	    reportDisconnectToOwner(tooManyPings) {
	        if (this.disconnectHandled) {
	            return;
	        }
	        this.disconnectHandled = true;
	        this.disconnectListeners.forEach(listener => listener(tooManyPings));
	    }
	    /**
	     * Handle connection drops, but not GOAWAYs.
	     */
	    handleDisconnect() {
	        this.clearKeepaliveTimeout();
	        this.reportDisconnectToOwner(false);
	        for (const call of this.activeCalls) {
	            call.onDisconnect();
	        }
	        // Wait an event loop cycle before destroying the connection
	        setImmediate(() => {
	            this.session.destroy();
	        });
	    }
	    addDisconnectListener(listener) {
	        this.disconnectListeners.push(listener);
	    }
	    canSendPing() {
	        return (!this.session.destroyed &&
	            this.keepaliveTimeMs > 0 &&
	            (this.keepaliveWithoutCalls || this.activeCalls.size > 0));
	    }
	    maybeSendPing() {
	        var _a, _b;
	        if (!this.canSendPing()) {
	            this.pendingSendKeepalivePing = true;
	            return;
	        }
	        if (this.keepaliveTimer) {
	            console.error('keepaliveTimeout is not null');
	            return;
	        }
	        if (this.channelzEnabled) {
	            this.keepalivesSent += 1;
	        }
	        this.keepaliveTrace('Sending ping with timeout ' + this.keepaliveTimeoutMs + 'ms');
	        this.keepaliveTimer = setTimeout(() => {
	            this.keepaliveTimer = null;
	            this.keepaliveTrace('Ping timeout passed without response');
	            this.handleDisconnect();
	        }, this.keepaliveTimeoutMs);
	        (_b = (_a = this.keepaliveTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
	        let pingSendError = '';
	        try {
	            const pingSentSuccessfully = this.session.ping((err, duration, payload) => {
	                this.clearKeepaliveTimeout();
	                if (err) {
	                    this.keepaliveTrace('Ping failed with error ' + err.message);
	                    this.handleDisconnect();
	                }
	                else {
	                    this.keepaliveTrace('Received ping response');
	                    this.maybeStartKeepalivePingTimer();
	                }
	            });
	            if (!pingSentSuccessfully) {
	                pingSendError = 'Ping returned false';
	            }
	        }
	        catch (e) {
	            // grpc/grpc-node#2139
	            pingSendError = (e instanceof Error ? e.message : '') || 'Unknown error';
	        }
	        if (pingSendError) {
	            this.keepaliveTrace('Ping send failed: ' + pingSendError);
	            this.handleDisconnect();
	        }
	    }
	    /**
	     * Starts the keepalive ping timer if appropriate. If the timer already ran
	     * out while there were no active requests, instead send a ping immediately.
	     * If the ping timer is already running or a ping is currently in flight,
	     * instead do nothing and wait for them to resolve.
	     */
	    maybeStartKeepalivePingTimer() {
	        var _a, _b;
	        if (!this.canSendPing()) {
	            return;
	        }
	        if (this.pendingSendKeepalivePing) {
	            this.pendingSendKeepalivePing = false;
	            this.maybeSendPing();
	        }
	        else if (!this.keepaliveTimer) {
	            this.keepaliveTrace('Starting keepalive timer for ' + this.keepaliveTimeMs + 'ms');
	            this.keepaliveTimer = setTimeout(() => {
	                this.keepaliveTimer = null;
	                this.maybeSendPing();
	            }, this.keepaliveTimeMs);
	            (_b = (_a = this.keepaliveTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
	        }
	        /* Otherwise, there is already either a keepalive timer or a ping pending,
	         * wait for those to resolve. */
	    }
	    /**
	     * Clears whichever keepalive timeout is currently active, if any.
	     */
	    clearKeepaliveTimeout() {
	        if (this.keepaliveTimer) {
	            clearTimeout(this.keepaliveTimer);
	            this.keepaliveTimer = null;
	        }
	    }
	    removeActiveCall(call) {
	        this.activeCalls.delete(call);
	        if (this.activeCalls.size === 0) {
	            this.session.unref();
	        }
	    }
	    addActiveCall(call) {
	        this.activeCalls.add(call);
	        if (this.activeCalls.size === 1) {
	            this.session.ref();
	            if (!this.keepaliveWithoutCalls) {
	                this.maybeStartKeepalivePingTimer();
	            }
	        }
	    }
	    createCall(metadata, host, method, listener, subchannelCallStatsTracker) {
	        const headers = metadata.toHttp2Headers();
	        headers[HTTP2_HEADER_AUTHORITY] = host;
	        headers[HTTP2_HEADER_USER_AGENT] = this.userAgent;
	        headers[HTTP2_HEADER_CONTENT_TYPE] = 'application/grpc';
	        headers[HTTP2_HEADER_METHOD] = 'POST';
	        headers[HTTP2_HEADER_PATH] = method;
	        headers[HTTP2_HEADER_TE] = 'trailers';
	        let http2Stream;
	        /* In theory, if an error is thrown by session.request because session has
	         * become unusable (e.g. because it has received a goaway), this subchannel
	         * should soon see the corresponding close or goaway event anyway and leave
	         * READY. But we have seen reports that this does not happen
	         * (https://github.com/googleapis/nodejs-firestore/issues/1023#issuecomment-653204096)
	         * so for defense in depth, we just discard the session when we see an
	         * error here.
	         */
	        try {
	            http2Stream = this.session.request(headers);
	        }
	        catch (e) {
	            this.handleDisconnect();
	            throw e;
	        }
	        this.flowControlTrace('local window size: ' +
	            this.session.state.localWindowSize +
	            ' remote window size: ' +
	            this.session.state.remoteWindowSize);
	        this.internalsTrace('session.closed=' +
	            this.session.closed +
	            ' session.destroyed=' +
	            this.session.destroyed +
	            ' session.socket.destroyed=' +
	            this.session.socket.destroyed);
	        let eventTracker;
	        // eslint-disable-next-line prefer-const
	        let call;
	        if (this.channelzEnabled) {
	            this.streamTracker.addCallStarted();
	            eventTracker = {
	                addMessageSent: () => {
	                    var _a;
	                    this.messagesSent += 1;
	                    this.lastMessageSentTimestamp = new Date();
	                    (_a = subchannelCallStatsTracker.addMessageSent) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);
	                },
	                addMessageReceived: () => {
	                    var _a;
	                    this.messagesReceived += 1;
	                    this.lastMessageReceivedTimestamp = new Date();
	                    (_a = subchannelCallStatsTracker.addMessageReceived) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);
	                },
	                onCallEnd: status => {
	                    var _a;
	                    (_a = subchannelCallStatsTracker.onCallEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, status);
	                    this.removeActiveCall(call);
	                },
	                onStreamEnd: success => {
	                    var _a;
	                    if (success) {
	                        this.streamTracker.addCallSucceeded();
	                    }
	                    else {
	                        this.streamTracker.addCallFailed();
	                    }
	                    (_a = subchannelCallStatsTracker.onStreamEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, success);
	                },
	            };
	        }
	        else {
	            eventTracker = {
	                addMessageSent: () => {
	                    var _a;
	                    (_a = subchannelCallStatsTracker.addMessageSent) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);
	                },
	                addMessageReceived: () => {
	                    var _a;
	                    (_a = subchannelCallStatsTracker.addMessageReceived) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);
	                },
	                onCallEnd: status => {
	                    var _a;
	                    (_a = subchannelCallStatsTracker.onCallEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, status);
	                    this.removeActiveCall(call);
	                },
	                onStreamEnd: success => {
	                    var _a;
	                    (_a = subchannelCallStatsTracker.onStreamEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, success);
	                },
	            };
	        }
	        call = new subchannel_call_1.Http2SubchannelCall(http2Stream, eventTracker, listener, this, (0, call_number_1.getNextCallNumber)());
	        this.addActiveCall(call);
	        return call;
	    }
	    getChannelzRef() {
	        return this.channelzRef;
	    }
	    getPeerName() {
	        return this.subchannelAddressString;
	    }
	    getOptions() {
	        return this.options;
	    }
	    shutdown() {
	        this.session.close();
	        (0, channelz_1.unregisterChannelzRef)(this.channelzRef);
	    }
	}
	class Http2SubchannelConnector {
	    constructor(channelTarget) {
	        this.channelTarget = channelTarget;
	        this.session = null;
	        this.isShutdown = false;
	    }
	    trace(text) {
	        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, (0, uri_parser_1.uriToString)(this.channelTarget) + ' ' + text);
	    }
	    createSession(secureConnectResult, address, options) {
	        if (this.isShutdown) {
	            return Promise.reject();
	        }
	        if (secureConnectResult.socket.closed) {
	            return Promise.reject('Connection closed before starting HTTP/2 handshake');
	        }
	        return new Promise((resolve, reject) => {
	            let remoteName = null;
	            let realTarget = this.channelTarget;
	            if ('grpc.http_connect_target' in options) {
	                const parsedTarget = (0, uri_parser_1.parseUri)(options['grpc.http_connect_target']);
	                if (parsedTarget) {
	                    realTarget = parsedTarget;
	                    remoteName = (0, uri_parser_1.uriToString)(parsedTarget);
	                }
	            }
	            const scheme = secureConnectResult.secure ? 'https' : 'http';
	            const targetPath = (0, resolver_1.getDefaultAuthority)(realTarget);
	            const closeHandler = () => {
	                var _a;
	                (_a = this.session) === null || _a === void 0 ? void 0 : _a.destroy();
	                this.session = null;
	                // Leave time for error event to happen before rejecting
	                setImmediate(() => {
	                    if (!reportedError) {
	                        reportedError = true;
	                        reject(`${errorMessage.trim()} (${new Date().toISOString()})`);
	                    }
	                });
	            };
	            const errorHandler = (error) => {
	                var _a;
	                (_a = this.session) === null || _a === void 0 ? void 0 : _a.destroy();
	                errorMessage = error.message;
	                this.trace('connection failed with error ' + errorMessage);
	                if (!reportedError) {
	                    reportedError = true;
	                    reject(`${errorMessage} (${new Date().toISOString()})`);
	                }
	            };
	            const sessionOptions = {
	                createConnection: (authority, option) => {
	                    return secureConnectResult.socket;
	                }
	            };
	            if (options['grpc-node.flow_control_window'] !== undefined) {
	                sessionOptions.settings = {
	                    initialWindowSize: options['grpc-node.flow_control_window']
	                };
	            }
	            const session = http2.connect(`${scheme}://${targetPath}`, sessionOptions);
	            this.session = session;
	            let errorMessage = 'Failed to connect';
	            let reportedError = false;
	            session.unref();
	            session.once('remoteSettings', () => {
	                session.removeAllListeners();
	                secureConnectResult.socket.removeListener('close', closeHandler);
	                secureConnectResult.socket.removeListener('error', errorHandler);
	                resolve(new Http2Transport(session, address, options, remoteName));
	                this.session = null;
	            });
	            session.once('close', closeHandler);
	            session.once('error', errorHandler);
	            secureConnectResult.socket.once('close', closeHandler);
	            secureConnectResult.socket.once('error', errorHandler);
	        });
	    }
	    tcpConnect(address, options) {
	        return (0, http_proxy_1.getProxiedConnection)(address, options).then(proxiedSocket => {
	            if (proxiedSocket) {
	                return proxiedSocket;
	            }
	            else {
	                return new Promise((resolve, reject) => {
	                    const closeCallback = () => {
	                        reject(new Error('Socket closed'));
	                    };
	                    const errorCallback = (error) => {
	                        reject(error);
	                    };
	                    const socket = net.connect(address, () => {
	                        socket.removeListener('close', closeCallback);
	                        socket.removeListener('error', errorCallback);
	                        resolve(socket);
	                    });
	                    socket.once('close', closeCallback);
	                    socket.once('error', errorCallback);
	                });
	            }
	        });
	    }
	    async connect(address, secureConnector, options) {
	        if (this.isShutdown) {
	            return Promise.reject();
	        }
	        let tcpConnection = null;
	        let secureConnectResult = null;
	        const addressString = (0, subchannel_address_1.subchannelAddressToString)(address);
	        try {
	            this.trace(addressString + ' Waiting for secureConnector to be ready');
	            await secureConnector.waitForReady();
	            this.trace(addressString + ' secureConnector is ready');
	            tcpConnection = await this.tcpConnect(address, options);
	            tcpConnection.setNoDelay();
	            this.trace(addressString + ' Established TCP connection');
	            secureConnectResult = await secureConnector.connect(tcpConnection);
	            this.trace(addressString + ' Established secure connection');
	            return this.createSession(secureConnectResult, address, options);
	        }
	        catch (e) {
	            tcpConnection === null || tcpConnection === void 0 ? void 0 : tcpConnection.destroy();
	            secureConnectResult === null || secureConnectResult === void 0 ? void 0 : secureConnectResult.socket.destroy();
	            throw e;
	        }
	    }
	    shutdown() {
	        var _a;
	        this.isShutdown = true;
	        (_a = this.session) === null || _a === void 0 ? void 0 : _a.close();
	        this.session = null;
	    }
	}
	transport.Http2SubchannelConnector = Http2SubchannelConnector;
	
	return transport;
}

var hasRequiredSubchannelPool;

function requireSubchannelPool () {
	if (hasRequiredSubchannelPool) return subchannelPool;
	hasRequiredSubchannelPool = 1;
	/*
	 * Copyright 2019 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(subchannelPool, "__esModule", { value: true });
	subchannelPool.SubchannelPool = void 0;
	subchannelPool.getSubchannelPool = getSubchannelPool;
	const channel_options_1 = channelOptions;
	const subchannel_1 = requireSubchannel();
	const subchannel_address_1 = subchannelAddress;
	const uri_parser_1 = uriParser;
	const transport_1 = requireTransport();
	// 10 seconds in milliseconds. This value is arbitrary.
	/**
	 * The amount of time in between checks for dropping subchannels that have no
	 * other references
	 */
	const REF_CHECK_INTERVAL = 10000;
	class SubchannelPool {
	    /**
	     * A pool of subchannels use for making connections. Subchannels with the
	     * exact same parameters will be reused.
	     */
	    constructor() {
	        this.pool = Object.create(null);
	        /**
	         * A timer of a task performing a periodic subchannel cleanup.
	         */
	        this.cleanupTimer = null;
	    }
	    /**
	     * Unrefs all unused subchannels and cancels the cleanup task if all
	     * subchannels have been unrefed.
	     */
	    unrefUnusedSubchannels() {
	        let allSubchannelsUnrefed = true;
	        /* These objects are created with Object.create(null), so they do not
	         * have a prototype, which means that for (... in ...) loops over them
	         * do not need to be filtered */
	        // eslint-disable-disable-next-line:forin
	        for (const channelTarget in this.pool) {
	            const subchannelObjArray = this.pool[channelTarget];
	            const refedSubchannels = subchannelObjArray.filter(value => !value.subchannel.unrefIfOneRef());
	            if (refedSubchannels.length > 0) {
	                allSubchannelsUnrefed = false;
	            }
	            /* For each subchannel in the pool, try to unref it if it has
	             * exactly one ref (which is the ref from the pool itself). If that
	             * does happen, remove the subchannel from the pool */
	            this.pool[channelTarget] = refedSubchannels;
	        }
	        /* Currently we do not delete keys with empty values. If that results
	         * in significant memory usage we should change it. */
	        // Cancel the cleanup task if all subchannels have been unrefed.
	        if (allSubchannelsUnrefed && this.cleanupTimer !== null) {
	            clearInterval(this.cleanupTimer);
	            this.cleanupTimer = null;
	        }
	    }
	    /**
	     * Ensures that the cleanup task is spawned.
	     */
	    ensureCleanupTask() {
	        var _a, _b;
	        if (this.cleanupTimer === null) {
	            this.cleanupTimer = setInterval(() => {
	                this.unrefUnusedSubchannels();
	            }, REF_CHECK_INTERVAL);
	            // Unref because this timer should not keep the event loop running.
	            // Call unref only if it exists to address electron/electron#21162
	            (_b = (_a = this.cleanupTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
	        }
	    }
	    /**
	     * Get a subchannel if one already exists with exactly matching parameters.
	     * Otherwise, create and save a subchannel with those parameters.
	     * @param channelTarget
	     * @param subchannelTarget
	     * @param channelArguments
	     * @param channelCredentials
	     */
	    getOrCreateSubchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials) {
	        this.ensureCleanupTask();
	        const channelTarget = (0, uri_parser_1.uriToString)(channelTargetUri);
	        if (channelTarget in this.pool) {
	            const subchannelObjArray = this.pool[channelTarget];
	            for (const subchannelObj of subchannelObjArray) {
	                if ((0, subchannel_address_1.subchannelAddressEqual)(subchannelTarget, subchannelObj.subchannelAddress) &&
	                    (0, channel_options_1.channelOptionsEqual)(channelArguments, subchannelObj.channelArguments) &&
	                    channelCredentials._equals(subchannelObj.channelCredentials)) {
	                    return subchannelObj.subchannel;
	                }
	            }
	        }
	        // If we get here, no matching subchannel was found
	        const subchannel = new subchannel_1.Subchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials, new transport_1.Http2SubchannelConnector(channelTargetUri));
	        if (!(channelTarget in this.pool)) {
	            this.pool[channelTarget] = [];
	        }
	        this.pool[channelTarget].push({
	            subchannelAddress: subchannelTarget,
	            channelArguments,
	            channelCredentials,
	            subchannel,
	        });
	        subchannel.ref();
	        return subchannel;
	    }
	}
	subchannelPool.SubchannelPool = SubchannelPool;
	const globalSubchannelPool = new SubchannelPool();
	/**
	 * Get either the global subchannel pool, or a new subchannel pool.
	 * @param global
	 */
	function getSubchannelPool(global) {
	    if (global) {
	        return globalSubchannelPool;
	    }
	    else {
	        return new SubchannelPool();
	    }
	}
	
	return subchannelPool;
}

var filterStack = {};

var hasRequiredFilterStack;

function requireFilterStack () {
	if (hasRequiredFilterStack) return filterStack;
	hasRequiredFilterStack = 1;
	/*
	 * Copyright 2019 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(filterStack, "__esModule", { value: true });
	filterStack.FilterStackFactory = filterStack.FilterStack = void 0;
	class FilterStack {
	    constructor(filters) {
	        this.filters = filters;
	    }
	    sendMetadata(metadata) {
	        let result = metadata;
	        for (let i = 0; i < this.filters.length; i++) {
	            result = this.filters[i].sendMetadata(result);
	        }
	        return result;
	    }
	    receiveMetadata(metadata) {
	        let result = metadata;
	        for (let i = this.filters.length - 1; i >= 0; i--) {
	            result = this.filters[i].receiveMetadata(result);
	        }
	        return result;
	    }
	    sendMessage(message) {
	        let result = message;
	        for (let i = 0; i < this.filters.length; i++) {
	            result = this.filters[i].sendMessage(result);
	        }
	        return result;
	    }
	    receiveMessage(message) {
	        let result = message;
	        for (let i = this.filters.length - 1; i >= 0; i--) {
	            result = this.filters[i].receiveMessage(result);
	        }
	        return result;
	    }
	    receiveTrailers(status) {
	        let result = status;
	        for (let i = this.filters.length - 1; i >= 0; i--) {
	            result = this.filters[i].receiveTrailers(result);
	        }
	        return result;
	    }
	    push(filters) {
	        this.filters.unshift(...filters);
	    }
	    getFilters() {
	        return this.filters;
	    }
	}
	filterStack.FilterStack = FilterStack;
	class FilterStackFactory {
	    constructor(factories) {
	        this.factories = factories;
	    }
	    push(filterFactories) {
	        this.factories.unshift(...filterFactories);
	    }
	    clone() {
	        return new FilterStackFactory([...this.factories]);
	    }
	    createFilter() {
	        return new FilterStack(this.factories.map(factory => factory.createFilter()));
	    }
	}
	filterStack.FilterStackFactory = FilterStackFactory;
	
	return filterStack;
}

var compressionFilter = {};

var compressionAlgorithms = {};

/*
 * Copyright 2021 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(compressionAlgorithms, "__esModule", { value: true });
compressionAlgorithms.CompressionAlgorithms = void 0;
var CompressionAlgorithms;
(function (CompressionAlgorithms) {
    CompressionAlgorithms[CompressionAlgorithms["identity"] = 0] = "identity";
    CompressionAlgorithms[CompressionAlgorithms["deflate"] = 1] = "deflate";
    CompressionAlgorithms[CompressionAlgorithms["gzip"] = 2] = "gzip";
})(CompressionAlgorithms || (compressionAlgorithms.CompressionAlgorithms = CompressionAlgorithms = {}));

var filter = {};

var hasRequiredFilter;

function requireFilter () {
	if (hasRequiredFilter) return filter;
	hasRequiredFilter = 1;
	/*
	 * Copyright 2019 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(filter, "__esModule", { value: true });
	filter.BaseFilter = void 0;
	class BaseFilter {
	    async sendMetadata(metadata) {
	        return metadata;
	    }
	    receiveMetadata(metadata) {
	        return metadata;
	    }
	    async sendMessage(message) {
	        return message;
	    }
	    async receiveMessage(message) {
	        return message;
	    }
	    receiveTrailers(status) {
	        return status;
	    }
	}
	filter.BaseFilter = BaseFilter;
	
	return filter;
}

/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(compressionFilter, "__esModule", { value: true });
compressionFilter.CompressionFilterFactory = compressionFilter.CompressionFilter = void 0;
const zlib = require$$0$6;
const compression_algorithms_1 = compressionAlgorithms;
const constants_1$6 = constants;
const filter_1 = requireFilter();
const logging$4 = logging$8;
const isCompressionAlgorithmKey = (key) => {
    return (typeof key === 'number' && typeof compression_algorithms_1.CompressionAlgorithms[key] === 'string');
};
class CompressionHandler {
    /**
     * @param message Raw uncompressed message bytes
     * @param compress Indicates whether the message should be compressed
     * @return Framed message, compressed if applicable
     */
    async writeMessage(message, compress) {
        let messageBuffer = message;
        if (compress) {
            messageBuffer = await this.compressMessage(messageBuffer);
        }
        const output = Buffer.allocUnsafe(messageBuffer.length + 5);
        output.writeUInt8(compress ? 1 : 0, 0);
        output.writeUInt32BE(messageBuffer.length, 1);
        messageBuffer.copy(output, 5);
        return output;
    }
    /**
     * @param data Framed message, possibly compressed
     * @return Uncompressed message
     */
    async readMessage(data) {
        const compressed = data.readUInt8(0) === 1;
        let messageBuffer = data.slice(5);
        if (compressed) {
            messageBuffer = await this.decompressMessage(messageBuffer);
        }
        return messageBuffer;
    }
}
class IdentityHandler extends CompressionHandler {
    async compressMessage(message) {
        return message;
    }
    async writeMessage(message, compress) {
        const output = Buffer.allocUnsafe(message.length + 5);
        /* With "identity" compression, messages should always be marked as
         * uncompressed */
        output.writeUInt8(0, 0);
        output.writeUInt32BE(message.length, 1);
        message.copy(output, 5);
        return output;
    }
    decompressMessage(message) {
        return Promise.reject(new Error('Received compressed message but "grpc-encoding" header was identity'));
    }
}
class DeflateHandler extends CompressionHandler {
    constructor(maxRecvMessageLength) {
        super();
        this.maxRecvMessageLength = maxRecvMessageLength;
    }
    compressMessage(message) {
        return new Promise((resolve, reject) => {
            zlib.deflate(message, (err, output) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(output);
                }
            });
        });
    }
    decompressMessage(message) {
        return new Promise((resolve, reject) => {
            let totalLength = 0;
            const messageParts = [];
            const decompresser = zlib.createInflate();
            decompresser.on('data', (chunk) => {
                messageParts.push(chunk);
                totalLength += chunk.byteLength;
                if (this.maxRecvMessageLength !== -1 && totalLength > this.maxRecvMessageLength) {
                    decompresser.destroy();
                    reject({
                        code: constants_1$6.Status.RESOURCE_EXHAUSTED,
                        details: `Received message that decompresses to a size larger than ${this.maxRecvMessageLength}`
                    });
                }
            });
            decompresser.on('end', () => {
                resolve(Buffer.concat(messageParts));
            });
            decompresser.write(message);
            decompresser.end();
        });
    }
}
class GzipHandler extends CompressionHandler {
    constructor(maxRecvMessageLength) {
        super();
        this.maxRecvMessageLength = maxRecvMessageLength;
    }
    compressMessage(message) {
        return new Promise((resolve, reject) => {
            zlib.gzip(message, (err, output) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(output);
                }
            });
        });
    }
    decompressMessage(message) {
        return new Promise((resolve, reject) => {
            let totalLength = 0;
            const messageParts = [];
            const decompresser = zlib.createGunzip();
            decompresser.on('data', (chunk) => {
                messageParts.push(chunk);
                totalLength += chunk.byteLength;
                if (this.maxRecvMessageLength !== -1 && totalLength > this.maxRecvMessageLength) {
                    decompresser.destroy();
                    reject({
                        code: constants_1$6.Status.RESOURCE_EXHAUSTED,
                        details: `Received message that decompresses to a size larger than ${this.maxRecvMessageLength}`
                    });
                }
            });
            decompresser.on('end', () => {
                resolve(Buffer.concat(messageParts));
            });
            decompresser.write(message);
            decompresser.end();
        });
    }
}
class UnknownHandler extends CompressionHandler {
    constructor(compressionName) {
        super();
        this.compressionName = compressionName;
    }
    compressMessage(message) {
        return Promise.reject(new Error(`Received message compressed with unsupported compression method ${this.compressionName}`));
    }
    decompressMessage(message) {
        // This should be unreachable
        return Promise.reject(new Error(`Compression method not supported: ${this.compressionName}`));
    }
}
function getCompressionHandler(compressionName, maxReceiveMessageSize) {
    switch (compressionName) {
        case 'identity':
            return new IdentityHandler();
        case 'deflate':
            return new DeflateHandler(maxReceiveMessageSize);
        case 'gzip':
            return new GzipHandler(maxReceiveMessageSize);
        default:
            return new UnknownHandler(compressionName);
    }
}
class CompressionFilter extends filter_1.BaseFilter {
    constructor(channelOptions, sharedFilterConfig) {
        var _a, _b, _c;
        super();
        this.sharedFilterConfig = sharedFilterConfig;
        this.sendCompression = new IdentityHandler();
        this.receiveCompression = new IdentityHandler();
        this.currentCompressionAlgorithm = 'identity';
        const compressionAlgorithmKey = channelOptions['grpc.default_compression_algorithm'];
        this.maxReceiveMessageLength = (_a = channelOptions['grpc.max_receive_message_length']) !== null && _a !== void 0 ? _a : constants_1$6.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;
        this.maxSendMessageLength = (_b = channelOptions['grpc.max_send_message_length']) !== null && _b !== void 0 ? _b : constants_1$6.DEFAULT_MAX_SEND_MESSAGE_LENGTH;
        if (compressionAlgorithmKey !== undefined) {
            if (isCompressionAlgorithmKey(compressionAlgorithmKey)) {
                const clientSelectedEncoding = compression_algorithms_1.CompressionAlgorithms[compressionAlgorithmKey];
                const serverSupportedEncodings = (_c = sharedFilterConfig.serverSupportedEncodingHeader) === null || _c === void 0 ? void 0 : _c.split(',');
                /**
                 * There are two possible situations here:
                 * 1) We don't have any info yet from the server about what compression it supports
                 *    In that case we should just use what the client tells us to use
                 * 2) We've previously received a response from the server including a grpc-accept-encoding header
                 *    In that case we only want to use the encoding chosen by the client if the server supports it
                 */
                if (!serverSupportedEncodings ||
                    serverSupportedEncodings.includes(clientSelectedEncoding)) {
                    this.currentCompressionAlgorithm = clientSelectedEncoding;
                    this.sendCompression = getCompressionHandler(this.currentCompressionAlgorithm, -1);
                }
            }
            else {
                logging$4.log(constants_1$6.LogVerbosity.ERROR, `Invalid value provided for grpc.default_compression_algorithm option: ${compressionAlgorithmKey}`);
            }
        }
    }
    async sendMetadata(metadata) {
        const headers = await metadata;
        headers.set('grpc-accept-encoding', 'identity,deflate,gzip');
        headers.set('accept-encoding', 'identity');
        // No need to send the header if it's "identity" -  behavior is identical; save the bandwidth
        if (this.currentCompressionAlgorithm === 'identity') {
            headers.remove('grpc-encoding');
        }
        else {
            headers.set('grpc-encoding', this.currentCompressionAlgorithm);
        }
        return headers;
    }
    receiveMetadata(metadata) {
        const receiveEncoding = metadata.get('grpc-encoding');
        if (receiveEncoding.length > 0) {
            const encoding = receiveEncoding[0];
            if (typeof encoding === 'string') {
                this.receiveCompression = getCompressionHandler(encoding, this.maxReceiveMessageLength);
            }
        }
        metadata.remove('grpc-encoding');
        /* Check to see if the compression we're using to send messages is supported by the server
         * If not, reset the sendCompression filter and have it use the default IdentityHandler */
        const serverSupportedEncodingsHeader = metadata.get('grpc-accept-encoding')[0];
        if (serverSupportedEncodingsHeader) {
            this.sharedFilterConfig.serverSupportedEncodingHeader =
                serverSupportedEncodingsHeader;
            const serverSupportedEncodings = serverSupportedEncodingsHeader.split(',');
            if (!serverSupportedEncodings.includes(this.currentCompressionAlgorithm)) {
                this.sendCompression = new IdentityHandler();
                this.currentCompressionAlgorithm = 'identity';
            }
        }
        metadata.remove('grpc-accept-encoding');
        return metadata;
    }
    async sendMessage(message) {
        var _a;
        /* This filter is special. The input message is the bare message bytes,
         * and the output is a framed and possibly compressed message. For this
         * reason, this filter should be at the bottom of the filter stack */
        const resolvedMessage = await message;
        if (this.maxSendMessageLength !== -1 && resolvedMessage.message.length > this.maxSendMessageLength) {
            throw {
                code: constants_1$6.Status.RESOURCE_EXHAUSTED,
                details: `Attempted to send message with a size larger than ${this.maxSendMessageLength}`
            };
        }
        let compress;
        if (this.sendCompression instanceof IdentityHandler) {
            compress = false;
        }
        else {
            compress = (((_a = resolvedMessage.flags) !== null && _a !== void 0 ? _a : 0) & 2 /* WriteFlags.NoCompress */) === 0;
        }
        return {
            message: await this.sendCompression.writeMessage(resolvedMessage.message, compress),
            flags: resolvedMessage.flags,
        };
    }
    async receiveMessage(message) {
        /* This filter is also special. The input message is framed and possibly
         * compressed, and the output message is deframed and uncompressed. So
         * this is another reason that this filter should be at the bottom of the
         * filter stack. */
        return this.receiveCompression.readMessage(await message);
    }
}
compressionFilter.CompressionFilter = CompressionFilter;
class CompressionFilterFactory {
    constructor(channel, options) {
        this.options = options;
        this.sharedFilterConfig = {};
    }
    createFilter() {
        return new CompressionFilter(this.options, this.sharedFilterConfig);
    }
}
compressionFilter.CompressionFilterFactory = CompressionFilterFactory;

var loadBalancingCall = {};

var deadline = {};

/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(deadline, "__esModule", { value: true });
deadline.minDeadline = minDeadline;
deadline.getDeadlineTimeoutString = getDeadlineTimeoutString;
deadline.getRelativeTimeout = getRelativeTimeout;
deadline.deadlineToString = deadlineToString;
deadline.formatDateDifference = formatDateDifference;
function minDeadline(...deadlineList) {
    let minValue = Infinity;
    for (const deadline of deadlineList) {
        const deadlineMsecs = deadline instanceof Date ? deadline.getTime() : deadline;
        if (deadlineMsecs < minValue) {
            minValue = deadlineMsecs;
        }
    }
    return minValue;
}
const units = [
    ['m', 1],
    ['S', 1000],
    ['M', 60 * 1000],
    ['H', 60 * 60 * 1000],
];
function getDeadlineTimeoutString(deadline) {
    const now = new Date().getTime();
    if (deadline instanceof Date) {
        deadline = deadline.getTime();
    }
    const timeoutMs = Math.max(deadline - now, 0);
    for (const [unit, factor] of units) {
        const amount = timeoutMs / factor;
        if (amount < 1e8) {
            return String(Math.ceil(amount)) + unit;
        }
    }
    throw new Error('Deadline is too far in the future');
}
/**
 * See https://nodejs.org/api/timers.html#settimeoutcallback-delay-args
 * In particular, "When delay is larger than 2147483647 or less than 1, the
 * delay will be set to 1. Non-integer delays are truncated to an integer."
 * This number of milliseconds is almost 25 days.
 */
const MAX_TIMEOUT_TIME = 2147483647;
/**
 * Get the timeout value that should be passed to setTimeout now for the timer
 * to end at the deadline. For any deadline before now, the timer should end
 * immediately, represented by a value of 0. For any deadline more than
 * MAX_TIMEOUT_TIME milliseconds in the future, a timer cannot be set that will
 * end at that time, so it is treated as infinitely far in the future.
 * @param deadline
 * @returns
 */
function getRelativeTimeout(deadline) {
    const deadlineMs = deadline instanceof Date ? deadline.getTime() : deadline;
    const now = new Date().getTime();
    const timeout = deadlineMs - now;
    if (timeout < 0) {
        return 0;
    }
    else if (timeout > MAX_TIMEOUT_TIME) {
        return Infinity;
    }
    else {
        return timeout;
    }
}
function deadlineToString(deadline) {
    if (deadline instanceof Date) {
        return deadline.toISOString();
    }
    else {
        const dateDeadline = new Date(deadline);
        if (Number.isNaN(dateDeadline.getTime())) {
            return '' + deadline;
        }
        else {
            return dateDeadline.toISOString();
        }
    }
}
/**
 * Calculate the difference between two dates as a number of seconds and format
 * it as a string.
 * @param startDate
 * @param endDate
 * @returns
 */
function formatDateDifference(startDate, endDate) {
    return ((endDate.getTime() - startDate.getTime()) / 1000).toFixed(3) + 's';
}

var controlPlaneStatus = {};

/*
 * Copyright 2022 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(controlPlaneStatus, "__esModule", { value: true });
controlPlaneStatus.restrictControlPlaneStatusCode = restrictControlPlaneStatusCode;
const constants_1$5 = constants;
const INAPPROPRIATE_CONTROL_PLANE_CODES = [
    constants_1$5.Status.OK,
    constants_1$5.Status.INVALID_ARGUMENT,
    constants_1$5.Status.NOT_FOUND,
    constants_1$5.Status.ALREADY_EXISTS,
    constants_1$5.Status.FAILED_PRECONDITION,
    constants_1$5.Status.ABORTED,
    constants_1$5.Status.OUT_OF_RANGE,
    constants_1$5.Status.DATA_LOSS,
];
function restrictControlPlaneStatusCode(code, details) {
    if (INAPPROPRIATE_CONTROL_PLANE_CODES.includes(code)) {
        return {
            code: constants_1$5.Status.INTERNAL,
            details: `Invalid status from control plane: ${code} ${constants_1$5.Status[code]} ${details}`,
        };
    }
    else {
        return { code, details };
    }
}

/*
 * Copyright 2022 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(loadBalancingCall, "__esModule", { value: true });
loadBalancingCall.LoadBalancingCall = void 0;
const connectivity_state_1 = connectivityState;
const constants_1$4 = constants;
const deadline_1$2 = deadline;
const metadata_1$3 = metadata;
const picker_1 = requirePicker();
const uri_parser_1$1 = uriParser;
const logging$3 = logging$8;
const control_plane_status_1$1 = controlPlaneStatus;
const http2$1 = require$$0$5;
const TRACER_NAME$3 = 'load_balancing_call';
class LoadBalancingCall {
    constructor(channel, callConfig, methodName, host, credentials, deadline, callNumber) {
        var _a, _b;
        this.channel = channel;
        this.callConfig = callConfig;
        this.methodName = methodName;
        this.host = host;
        this.credentials = credentials;
        this.deadline = deadline;
        this.callNumber = callNumber;
        this.child = null;
        this.readPending = false;
        this.pendingMessage = null;
        this.pendingHalfClose = false;
        this.ended = false;
        this.metadata = null;
        this.listener = null;
        this.onCallEnded = null;
        this.childStartTime = null;
        const splitPath = this.methodName.split('/');
        let serviceName = '';
        /* The standard path format is "/{serviceName}/{methodName}", so if we split
         * by '/', the first item should be empty and the second should be the
         * service name */
        if (splitPath.length >= 2) {
            serviceName = splitPath[1];
        }
        const hostname = (_b = (_a = (0, uri_parser_1$1.splitHostPort)(this.host)) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : 'localhost';
        /* Currently, call credentials are only allowed on HTTPS connections, so we
         * can assume that the scheme is "https" */
        this.serviceUrl = `https://${hostname}/${serviceName}`;
        this.startTime = new Date();
    }
    getDeadlineInfo() {
        var _a, _b;
        const deadlineInfo = [];
        if (this.childStartTime) {
            if (this.childStartTime > this.startTime) {
                if ((_a = this.metadata) === null || _a === void 0 ? void 0 : _a.getOptions().waitForReady) {
                    deadlineInfo.push('wait_for_ready');
                }
                deadlineInfo.push(`LB pick: ${(0, deadline_1$2.formatDateDifference)(this.startTime, this.childStartTime)}`);
            }
            deadlineInfo.push(...this.child.getDeadlineInfo());
            return deadlineInfo;
        }
        else {
            if ((_b = this.metadata) === null || _b === void 0 ? void 0 : _b.getOptions().waitForReady) {
                deadlineInfo.push('wait_for_ready');
            }
            deadlineInfo.push('Waiting for LB pick');
        }
        return deadlineInfo;
    }
    trace(text) {
        logging$3.trace(constants_1$4.LogVerbosity.DEBUG, TRACER_NAME$3, '[' + this.callNumber + '] ' + text);
    }
    outputStatus(status, progress) {
        var _a, _b;
        if (!this.ended) {
            this.ended = true;
            this.trace('ended with status: code=' +
                status.code +
                ' details="' +
                status.details +
                '" start time=' +
                this.startTime.toISOString());
            const finalStatus = Object.assign(Object.assign({}, status), { progress });
            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(finalStatus);
            (_b = this.onCallEnded) === null || _b === void 0 ? void 0 : _b.call(this, finalStatus.code);
        }
    }
    doPick() {
        var _a, _b;
        if (this.ended) {
            return;
        }
        if (!this.metadata) {
            throw new Error('doPick called before start');
        }
        this.trace('Pick called');
        const finalMetadata = this.metadata.clone();
        const pickResult = this.channel.doPick(finalMetadata, this.callConfig.pickInformation);
        const subchannelString = pickResult.subchannel
            ? '(' +
                pickResult.subchannel.getChannelzRef().id +
                ') ' +
                pickResult.subchannel.getAddress()
            : '' + pickResult.subchannel;
        this.trace('Pick result: ' +
            picker_1.PickResultType[pickResult.pickResultType] +
            ' subchannel: ' +
            subchannelString +
            ' status: ' +
            ((_a = pickResult.status) === null || _a === void 0 ? void 0 : _a.code) +
            ' ' +
            ((_b = pickResult.status) === null || _b === void 0 ? void 0 : _b.details));
        switch (pickResult.pickResultType) {
            case picker_1.PickResultType.COMPLETE:
                const combinedCallCredentials = this.credentials.compose(pickResult.subchannel.getCallCredentials());
                combinedCallCredentials
                    .generateMetadata({ method_name: this.methodName, service_url: this.serviceUrl })
                    .then(credsMetadata => {
                    var _a;
                    /* If this call was cancelled (e.g. by the deadline) before
                     * metadata generation finished, we shouldn't do anything with
                     * it. */
                    if (this.ended) {
                        this.trace('Credentials metadata generation finished after call ended');
                        return;
                    }
                    finalMetadata.merge(credsMetadata);
                    if (finalMetadata.get('authorization').length > 1) {
                        this.outputStatus({
                            code: constants_1$4.Status.INTERNAL,
                            details: '"authorization" metadata cannot have multiple values',
                            metadata: new metadata_1$3.Metadata(),
                        }, 'PROCESSED');
                    }
                    if (pickResult.subchannel.getConnectivityState() !==
                        connectivity_state_1.ConnectivityState.READY) {
                        this.trace('Picked subchannel ' +
                            subchannelString +
                            ' has state ' +
                            connectivity_state_1.ConnectivityState[pickResult.subchannel.getConnectivityState()] +
                            ' after getting credentials metadata. Retrying pick');
                        this.doPick();
                        return;
                    }
                    if (this.deadline !== Infinity) {
                        finalMetadata.set('grpc-timeout', (0, deadline_1$2.getDeadlineTimeoutString)(this.deadline));
                    }
                    try {
                        this.child = pickResult
                            .subchannel.getRealSubchannel()
                            .createCall(finalMetadata, this.host, this.methodName, {
                            onReceiveMetadata: metadata => {
                                this.trace('Received metadata');
                                this.listener.onReceiveMetadata(metadata);
                            },
                            onReceiveMessage: message => {
                                this.trace('Received message');
                                this.listener.onReceiveMessage(message);
                            },
                            onReceiveStatus: status => {
                                this.trace('Received status');
                                if (status.rstCode ===
                                    http2$1.constants.NGHTTP2_REFUSED_STREAM) {
                                    this.outputStatus(status, 'REFUSED');
                                }
                                else {
                                    this.outputStatus(status, 'PROCESSED');
                                }
                            },
                        });
                        this.childStartTime = new Date();
                    }
                    catch (error) {
                        this.trace('Failed to start call on picked subchannel ' +
                            subchannelString +
                            ' with error ' +
                            error.message);
                        this.outputStatus({
                            code: constants_1$4.Status.INTERNAL,
                            details: 'Failed to start HTTP/2 stream with error ' +
                                error.message,
                            metadata: new metadata_1$3.Metadata(),
                        }, 'NOT_STARTED');
                        return;
                    }
                    (_a = pickResult.onCallStarted) === null || _a === void 0 ? void 0 : _a.call(pickResult);
                    this.onCallEnded = pickResult.onCallEnded;
                    this.trace('Created child call [' + this.child.getCallNumber() + ']');
                    if (this.readPending) {
                        this.child.startRead();
                    }
                    if (this.pendingMessage) {
                        this.child.sendMessageWithContext(this.pendingMessage.context, this.pendingMessage.message);
                    }
                    if (this.pendingHalfClose) {
                        this.child.halfClose();
                    }
                }, (error) => {
                    // We assume the error code isn't 0 (Status.OK)
                    const { code, details } = (0, control_plane_status_1$1.restrictControlPlaneStatusCode)(typeof error.code === 'number' ? error.code : constants_1$4.Status.UNKNOWN, `Getting metadata from plugin failed with error: ${error.message}`);
                    this.outputStatus({
                        code: code,
                        details: details,
                        metadata: new metadata_1$3.Metadata(),
                    }, 'PROCESSED');
                });
                break;
            case picker_1.PickResultType.DROP:
                const { code, details } = (0, control_plane_status_1$1.restrictControlPlaneStatusCode)(pickResult.status.code, pickResult.status.details);
                setImmediate(() => {
                    this.outputStatus({ code, details, metadata: pickResult.status.metadata }, 'DROP');
                });
                break;
            case picker_1.PickResultType.TRANSIENT_FAILURE:
                if (this.metadata.getOptions().waitForReady) {
                    this.channel.queueCallForPick(this);
                }
                else {
                    const { code, details } = (0, control_plane_status_1$1.restrictControlPlaneStatusCode)(pickResult.status.code, pickResult.status.details);
                    setImmediate(() => {
                        this.outputStatus({ code, details, metadata: pickResult.status.metadata }, 'PROCESSED');
                    });
                }
                break;
            case picker_1.PickResultType.QUEUE:
                this.channel.queueCallForPick(this);
        }
    }
    cancelWithStatus(status, details) {
        var _a;
        this.trace('cancelWithStatus code: ' + status + ' details: "' + details + '"');
        (_a = this.child) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(status, details);
        this.outputStatus({ code: status, details: details, metadata: new metadata_1$3.Metadata() }, 'PROCESSED');
    }
    getPeer() {
        var _a, _b;
        return (_b = (_a = this.child) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : this.channel.getTarget();
    }
    start(metadata, listener) {
        this.trace('start called');
        this.listener = listener;
        this.metadata = metadata;
        this.doPick();
    }
    sendMessageWithContext(context, message) {
        this.trace('write() called with message of length ' + message.length);
        if (this.child) {
            this.child.sendMessageWithContext(context, message);
        }
        else {
            this.pendingMessage = { context, message };
        }
    }
    startRead() {
        this.trace('startRead called');
        if (this.child) {
            this.child.startRead();
        }
        else {
            this.readPending = true;
        }
    }
    halfClose() {
        this.trace('halfClose called');
        if (this.child) {
            this.child.halfClose();
        }
        else {
            this.pendingHalfClose = true;
        }
    }
    setCredentials(credentials) {
        throw new Error('Method not implemented.');
    }
    getCallNumber() {
        return this.callNumber;
    }
}
loadBalancingCall.LoadBalancingCall = LoadBalancingCall;

var resolvingCall = {};

/*
 * Copyright 2022 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(resolvingCall, "__esModule", { value: true });
resolvingCall.ResolvingCall = void 0;
const call_credentials_1 = callCredentials;
const constants_1$3 = constants;
const deadline_1$1 = deadline;
const metadata_1$2 = metadata;
const logging$2 = logging$8;
const control_plane_status_1 = controlPlaneStatus;
const TRACER_NAME$2 = 'resolving_call';
class ResolvingCall {
    constructor(channel, method, options, filterStackFactory, callNumber) {
        this.channel = channel;
        this.method = method;
        this.filterStackFactory = filterStackFactory;
        this.callNumber = callNumber;
        this.child = null;
        this.readPending = false;
        this.pendingMessage = null;
        this.pendingHalfClose = false;
        this.ended = false;
        this.readFilterPending = false;
        this.writeFilterPending = false;
        this.pendingChildStatus = null;
        this.metadata = null;
        this.listener = null;
        this.statusWatchers = [];
        this.deadlineTimer = setTimeout(() => { }, 0);
        this.filterStack = null;
        this.deadlineStartTime = null;
        this.configReceivedTime = null;
        this.childStartTime = null;
        /**
         * Credentials configured for this specific call. Does not include
         * call credentials associated with the channel credentials used to create
         * the channel.
         */
        this.credentials = call_credentials_1.CallCredentials.createEmpty();
        this.deadline = options.deadline;
        this.host = options.host;
        if (options.parentCall) {
            if (options.flags & constants_1$3.Propagate.CANCELLATION) {
                options.parentCall.on('cancelled', () => {
                    this.cancelWithStatus(constants_1$3.Status.CANCELLED, 'Cancelled by parent call');
                });
            }
            if (options.flags & constants_1$3.Propagate.DEADLINE) {
                this.trace('Propagating deadline from parent: ' +
                    options.parentCall.getDeadline());
                this.deadline = (0, deadline_1$1.minDeadline)(this.deadline, options.parentCall.getDeadline());
            }
        }
        this.trace('Created');
        this.runDeadlineTimer();
    }
    trace(text) {
        logging$2.trace(constants_1$3.LogVerbosity.DEBUG, TRACER_NAME$2, '[' + this.callNumber + '] ' + text);
    }
    runDeadlineTimer() {
        clearTimeout(this.deadlineTimer);
        this.deadlineStartTime = new Date();
        this.trace('Deadline: ' + (0, deadline_1$1.deadlineToString)(this.deadline));
        const timeout = (0, deadline_1$1.getRelativeTimeout)(this.deadline);
        if (timeout !== Infinity) {
            this.trace('Deadline will be reached in ' + timeout + 'ms');
            const handleDeadline = () => {
                if (!this.deadlineStartTime) {
                    this.cancelWithStatus(constants_1$3.Status.DEADLINE_EXCEEDED, 'Deadline exceeded');
                    return;
                }
                const deadlineInfo = [];
                const deadlineEndTime = new Date();
                deadlineInfo.push(`Deadline exceeded after ${(0, deadline_1$1.formatDateDifference)(this.deadlineStartTime, deadlineEndTime)}`);
                if (this.configReceivedTime) {
                    if (this.configReceivedTime > this.deadlineStartTime) {
                        deadlineInfo.push(`name resolution: ${(0, deadline_1$1.formatDateDifference)(this.deadlineStartTime, this.configReceivedTime)}`);
                    }
                    if (this.childStartTime) {
                        if (this.childStartTime > this.configReceivedTime) {
                            deadlineInfo.push(`metadata filters: ${(0, deadline_1$1.formatDateDifference)(this.configReceivedTime, this.childStartTime)}`);
                        }
                    }
                    else {
                        deadlineInfo.push('waiting for metadata filters');
                    }
                }
                else {
                    deadlineInfo.push('waiting for name resolution');
                }
                if (this.child) {
                    deadlineInfo.push(...this.child.getDeadlineInfo());
                }
                this.cancelWithStatus(constants_1$3.Status.DEADLINE_EXCEEDED, deadlineInfo.join(','));
            };
            if (timeout <= 0) {
                process.nextTick(handleDeadline);
            }
            else {
                this.deadlineTimer = setTimeout(handleDeadline, timeout);
            }
        }
    }
    outputStatus(status) {
        if (!this.ended) {
            this.ended = true;
            if (!this.filterStack) {
                this.filterStack = this.filterStackFactory.createFilter();
            }
            clearTimeout(this.deadlineTimer);
            const filteredStatus = this.filterStack.receiveTrailers(status);
            this.trace('ended with status: code=' +
                filteredStatus.code +
                ' details="' +
                filteredStatus.details +
                '"');
            this.statusWatchers.forEach(watcher => watcher(filteredStatus));
            process.nextTick(() => {
                var _a;
                (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(filteredStatus);
            });
        }
    }
    sendMessageOnChild(context, message) {
        if (!this.child) {
            throw new Error('sendMessageonChild called with child not populated');
        }
        const child = this.child;
        this.writeFilterPending = true;
        this.filterStack.sendMessage(Promise.resolve({ message: message, flags: context.flags })).then(filteredMessage => {
            this.writeFilterPending = false;
            child.sendMessageWithContext(context, filteredMessage.message);
            if (this.pendingHalfClose) {
                child.halfClose();
            }
        }, (status) => {
            this.cancelWithStatus(status.code, status.details);
        });
    }
    getConfig() {
        if (this.ended) {
            return;
        }
        if (!this.metadata || !this.listener) {
            throw new Error('getConfig called before start');
        }
        const configResult = this.channel.getConfig(this.method, this.metadata);
        if (configResult.type === 'NONE') {
            this.channel.queueCallForConfig(this);
            return;
        }
        else if (configResult.type === 'ERROR') {
            if (this.metadata.getOptions().waitForReady) {
                this.channel.queueCallForConfig(this);
            }
            else {
                this.outputStatus(configResult.error);
            }
            return;
        }
        // configResult.type === 'SUCCESS'
        this.configReceivedTime = new Date();
        const config = configResult.config;
        if (config.status !== constants_1$3.Status.OK) {
            const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(config.status, 'Failed to route call to method ' + this.method);
            this.outputStatus({
                code: code,
                details: details,
                metadata: new metadata_1$2.Metadata(),
            });
            return;
        }
        if (config.methodConfig.timeout) {
            const configDeadline = new Date();
            configDeadline.setSeconds(configDeadline.getSeconds() + config.methodConfig.timeout.seconds);
            configDeadline.setMilliseconds(configDeadline.getMilliseconds() +
                config.methodConfig.timeout.nanos / 1000000);
            this.deadline = (0, deadline_1$1.minDeadline)(this.deadline, configDeadline);
            this.runDeadlineTimer();
        }
        this.filterStackFactory.push(config.dynamicFilterFactories);
        this.filterStack = this.filterStackFactory.createFilter();
        this.filterStack.sendMetadata(Promise.resolve(this.metadata)).then(filteredMetadata => {
            this.child = this.channel.createRetryingCall(config, this.method, this.host, this.credentials, this.deadline);
            this.trace('Created child [' + this.child.getCallNumber() + ']');
            this.childStartTime = new Date();
            this.child.start(filteredMetadata, {
                onReceiveMetadata: metadata => {
                    this.trace('Received metadata');
                    this.listener.onReceiveMetadata(this.filterStack.receiveMetadata(metadata));
                },
                onReceiveMessage: message => {
                    this.trace('Received message');
                    this.readFilterPending = true;
                    this.filterStack.receiveMessage(message).then(filteredMesssage => {
                        this.trace('Finished filtering received message');
                        this.readFilterPending = false;
                        this.listener.onReceiveMessage(filteredMesssage);
                        if (this.pendingChildStatus) {
                            this.outputStatus(this.pendingChildStatus);
                        }
                    }, (status) => {
                        this.cancelWithStatus(status.code, status.details);
                    });
                },
                onReceiveStatus: status => {
                    this.trace('Received status');
                    if (this.readFilterPending) {
                        this.pendingChildStatus = status;
                    }
                    else {
                        this.outputStatus(status);
                    }
                },
            });
            if (this.readPending) {
                this.child.startRead();
            }
            if (this.pendingMessage) {
                this.sendMessageOnChild(this.pendingMessage.context, this.pendingMessage.message);
            }
            else if (this.pendingHalfClose) {
                this.child.halfClose();
            }
        }, (status) => {
            this.outputStatus(status);
        });
    }
    reportResolverError(status) {
        var _a;
        if ((_a = this.metadata) === null || _a === void 0 ? void 0 : _a.getOptions().waitForReady) {
            this.channel.queueCallForConfig(this);
        }
        else {
            this.outputStatus(status);
        }
    }
    cancelWithStatus(status, details) {
        var _a;
        this.trace('cancelWithStatus code: ' + status + ' details: "' + details + '"');
        (_a = this.child) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(status, details);
        this.outputStatus({
            code: status,
            details: details,
            metadata: new metadata_1$2.Metadata(),
        });
    }
    getPeer() {
        var _a, _b;
        return (_b = (_a = this.child) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : this.channel.getTarget();
    }
    start(metadata, listener) {
        this.trace('start called');
        this.metadata = metadata.clone();
        this.listener = listener;
        this.getConfig();
    }
    sendMessageWithContext(context, message) {
        this.trace('write() called with message of length ' + message.length);
        if (this.child) {
            this.sendMessageOnChild(context, message);
        }
        else {
            this.pendingMessage = { context, message };
        }
    }
    startRead() {
        this.trace('startRead called');
        if (this.child) {
            this.child.startRead();
        }
        else {
            this.readPending = true;
        }
    }
    halfClose() {
        this.trace('halfClose called');
        if (this.child && !this.writeFilterPending) {
            this.child.halfClose();
        }
        else {
            this.pendingHalfClose = true;
        }
    }
    setCredentials(credentials) {
        this.credentials = credentials;
    }
    addStatusWatcher(watcher) {
        this.statusWatchers.push(watcher);
    }
    getCallNumber() {
        return this.callNumber;
    }
}
resolvingCall.ResolvingCall = ResolvingCall;

var retryingCall = {};

/*
 * Copyright 2022 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(retryingCall, "__esModule", { value: true });
retryingCall.RetryingCall = retryingCall.MessageBufferTracker = retryingCall.RetryThrottler = void 0;
const constants_1$2 = constants;
const deadline_1 = deadline;
const metadata_1$1 = metadata;
const logging$1 = logging$8;
const TRACER_NAME$1 = 'retrying_call';
class RetryThrottler {
    constructor(maxTokens, tokenRatio, previousRetryThrottler) {
        this.maxTokens = maxTokens;
        this.tokenRatio = tokenRatio;
        if (previousRetryThrottler) {
            /* When carrying over tokens from a previous config, rescale them to the
             * new max value */
            this.tokens =
                previousRetryThrottler.tokens *
                    (maxTokens / previousRetryThrottler.maxTokens);
        }
        else {
            this.tokens = maxTokens;
        }
    }
    addCallSucceeded() {
        this.tokens = Math.min(this.tokens + this.tokenRatio, this.maxTokens);
    }
    addCallFailed() {
        this.tokens = Math.max(this.tokens - 1, 0);
    }
    canRetryCall() {
        return this.tokens > (this.maxTokens / 2);
    }
}
retryingCall.RetryThrottler = RetryThrottler;
class MessageBufferTracker {
    constructor(totalLimit, limitPerCall) {
        this.totalLimit = totalLimit;
        this.limitPerCall = limitPerCall;
        this.totalAllocated = 0;
        this.allocatedPerCall = new Map();
    }
    allocate(size, callId) {
        var _a;
        const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;
        if (this.limitPerCall - currentPerCall < size ||
            this.totalLimit - this.totalAllocated < size) {
            return false;
        }
        this.allocatedPerCall.set(callId, currentPerCall + size);
        this.totalAllocated += size;
        return true;
    }
    free(size, callId) {
        var _a;
        if (this.totalAllocated < size) {
            throw new Error(`Invalid buffer allocation state: call ${callId} freed ${size} > total allocated ${this.totalAllocated}`);
        }
        this.totalAllocated -= size;
        const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;
        if (currentPerCall < size) {
            throw new Error(`Invalid buffer allocation state: call ${callId} freed ${size} > allocated for call ${currentPerCall}`);
        }
        this.allocatedPerCall.set(callId, currentPerCall - size);
    }
    freeAll(callId) {
        var _a;
        const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;
        if (this.totalAllocated < currentPerCall) {
            throw new Error(`Invalid buffer allocation state: call ${callId} allocated ${currentPerCall} > total allocated ${this.totalAllocated}`);
        }
        this.totalAllocated -= currentPerCall;
        this.allocatedPerCall.delete(callId);
    }
}
retryingCall.MessageBufferTracker = MessageBufferTracker;
const PREVIONS_RPC_ATTEMPTS_METADATA_KEY = 'grpc-previous-rpc-attempts';
const DEFAULT_MAX_ATTEMPTS_LIMIT = 5;
class RetryingCall {
    constructor(channel, callConfig, methodName, host, credentials, deadline, callNumber, bufferTracker, retryThrottler) {
        var _a;
        this.channel = channel;
        this.callConfig = callConfig;
        this.methodName = methodName;
        this.host = host;
        this.credentials = credentials;
        this.deadline = deadline;
        this.callNumber = callNumber;
        this.bufferTracker = bufferTracker;
        this.retryThrottler = retryThrottler;
        this.listener = null;
        this.initialMetadata = null;
        this.underlyingCalls = [];
        this.writeBuffer = [];
        /**
         * The offset of message indices in the writeBuffer. For example, if
         * writeBufferOffset is 10, message 10 is in writeBuffer[0] and message 15
         * is in writeBuffer[5].
         */
        this.writeBufferOffset = 0;
        /**
         * Tracks whether a read has been started, so that we know whether to start
         * reads on new child calls. This only matters for the first read, because
         * once a message comes in the child call becomes committed and there will
         * be no new child calls.
         */
        this.readStarted = false;
        this.transparentRetryUsed = false;
        /**
         * Number of attempts so far
         */
        this.attempts = 0;
        this.hedgingTimer = null;
        this.committedCallIndex = null;
        this.initialRetryBackoffSec = 0;
        this.nextRetryBackoffSec = 0;
        const maxAttemptsLimit = (_a = channel.getOptions()['grpc-node.retry_max_attempts_limit']) !== null && _a !== void 0 ? _a : DEFAULT_MAX_ATTEMPTS_LIMIT;
        if (channel.getOptions()['grpc.enable_retries'] === 0) {
            this.state = 'NO_RETRY';
            this.maxAttempts = 1;
        }
        else if (callConfig.methodConfig.retryPolicy) {
            this.state = 'RETRY';
            const retryPolicy = callConfig.methodConfig.retryPolicy;
            this.nextRetryBackoffSec = this.initialRetryBackoffSec = Number(retryPolicy.initialBackoff.substring(0, retryPolicy.initialBackoff.length - 1));
            this.maxAttempts = Math.min(retryPolicy.maxAttempts, maxAttemptsLimit);
        }
        else if (callConfig.methodConfig.hedgingPolicy) {
            this.state = 'HEDGING';
            this.maxAttempts = Math.min(callConfig.methodConfig.hedgingPolicy.maxAttempts, maxAttemptsLimit);
        }
        else {
            this.state = 'TRANSPARENT_ONLY';
            this.maxAttempts = 1;
        }
        this.startTime = new Date();
    }
    getDeadlineInfo() {
        if (this.underlyingCalls.length === 0) {
            return [];
        }
        const deadlineInfo = [];
        const latestCall = this.underlyingCalls[this.underlyingCalls.length - 1];
        if (this.underlyingCalls.length > 1) {
            deadlineInfo.push(`previous attempts: ${this.underlyingCalls.length - 1}`);
        }
        if (latestCall.startTime > this.startTime) {
            deadlineInfo.push(`time to current attempt start: ${(0, deadline_1.formatDateDifference)(this.startTime, latestCall.startTime)}`);
        }
        deadlineInfo.push(...latestCall.call.getDeadlineInfo());
        return deadlineInfo;
    }
    getCallNumber() {
        return this.callNumber;
    }
    trace(text) {
        logging$1.trace(constants_1$2.LogVerbosity.DEBUG, TRACER_NAME$1, '[' + this.callNumber + '] ' + text);
    }
    reportStatus(statusObject) {
        this.trace('ended with status: code=' +
            statusObject.code +
            ' details="' +
            statusObject.details +
            '" start time=' +
            this.startTime.toISOString());
        this.bufferTracker.freeAll(this.callNumber);
        this.writeBufferOffset = this.writeBufferOffset + this.writeBuffer.length;
        this.writeBuffer = [];
        process.nextTick(() => {
            var _a;
            // Explicitly construct status object to remove progress field
            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus({
                code: statusObject.code,
                details: statusObject.details,
                metadata: statusObject.metadata,
            });
        });
    }
    cancelWithStatus(status, details) {
        this.trace('cancelWithStatus code: ' + status + ' details: "' + details + '"');
        this.reportStatus({ code: status, details, metadata: new metadata_1$1.Metadata() });
        for (const { call } of this.underlyingCalls) {
            call.cancelWithStatus(status, details);
        }
    }
    getPeer() {
        if (this.committedCallIndex !== null) {
            return this.underlyingCalls[this.committedCallIndex].call.getPeer();
        }
        else {
            return 'unknown';
        }
    }
    getBufferEntry(messageIndex) {
        var _a;
        return ((_a = this.writeBuffer[messageIndex - this.writeBufferOffset]) !== null && _a !== void 0 ? _a : {
            entryType: 'FREED',
            allocated: false,
        });
    }
    getNextBufferIndex() {
        return this.writeBufferOffset + this.writeBuffer.length;
    }
    clearSentMessages() {
        if (this.state !== 'COMMITTED') {
            return;
        }
        let earliestNeededMessageIndex;
        if (this.underlyingCalls[this.committedCallIndex].state === 'COMPLETED') {
            /* If the committed call is completed, clear all messages, even if some
             * have not been sent. */
            earliestNeededMessageIndex = this.getNextBufferIndex();
        }
        else {
            earliestNeededMessageIndex =
                this.underlyingCalls[this.committedCallIndex].nextMessageToSend;
        }
        for (let messageIndex = this.writeBufferOffset; messageIndex < earliestNeededMessageIndex; messageIndex++) {
            const bufferEntry = this.getBufferEntry(messageIndex);
            if (bufferEntry.allocated) {
                this.bufferTracker.free(bufferEntry.message.message.length, this.callNumber);
            }
        }
        this.writeBuffer = this.writeBuffer.slice(earliestNeededMessageIndex - this.writeBufferOffset);
        this.writeBufferOffset = earliestNeededMessageIndex;
    }
    commitCall(index) {
        var _a, _b;
        if (this.state === 'COMMITTED') {
            return;
        }
        this.trace('Committing call [' +
            this.underlyingCalls[index].call.getCallNumber() +
            '] at index ' +
            index);
        this.state = 'COMMITTED';
        (_b = (_a = this.callConfig).onCommitted) === null || _b === void 0 ? void 0 : _b.call(_a);
        this.committedCallIndex = index;
        for (let i = 0; i < this.underlyingCalls.length; i++) {
            if (i === index) {
                continue;
            }
            if (this.underlyingCalls[i].state === 'COMPLETED') {
                continue;
            }
            this.underlyingCalls[i].state = 'COMPLETED';
            this.underlyingCalls[i].call.cancelWithStatus(constants_1$2.Status.CANCELLED, 'Discarded in favor of other hedged attempt');
        }
        this.clearSentMessages();
    }
    commitCallWithMostMessages() {
        if (this.state === 'COMMITTED') {
            return;
        }
        let mostMessages = -1;
        let callWithMostMessages = -1;
        for (const [index, childCall] of this.underlyingCalls.entries()) {
            if (childCall.state === 'ACTIVE' &&
                childCall.nextMessageToSend > mostMessages) {
                mostMessages = childCall.nextMessageToSend;
                callWithMostMessages = index;
            }
        }
        if (callWithMostMessages === -1) {
            /* There are no active calls, disable retries to force the next call that
             * is started to be committed. */
            this.state = 'TRANSPARENT_ONLY';
        }
        else {
            this.commitCall(callWithMostMessages);
        }
    }
    isStatusCodeInList(list, code) {
        return list.some(value => {
            var _a;
            return value === code ||
                value.toString().toLowerCase() === ((_a = constants_1$2.Status[code]) === null || _a === void 0 ? void 0 : _a.toLowerCase());
        });
    }
    getNextRetryBackoffMs() {
        var _a;
        const retryPolicy = (_a = this.callConfig) === null || _a === void 0 ? void 0 : _a.methodConfig.retryPolicy;
        if (!retryPolicy) {
            return 0;
        }
        const nextBackoffMs = Math.random() * this.nextRetryBackoffSec * 1000;
        const maxBackoffSec = Number(retryPolicy.maxBackoff.substring(0, retryPolicy.maxBackoff.length - 1));
        this.nextRetryBackoffSec = Math.min(this.nextRetryBackoffSec * retryPolicy.backoffMultiplier, maxBackoffSec);
        return nextBackoffMs;
    }
    maybeRetryCall(pushback, callback) {
        if (this.state !== 'RETRY') {
            callback(false);
            return;
        }
        if (this.attempts >= this.maxAttempts) {
            callback(false);
            return;
        }
        let retryDelayMs;
        if (pushback === null) {
            retryDelayMs = this.getNextRetryBackoffMs();
        }
        else if (pushback < 0) {
            this.state = 'TRANSPARENT_ONLY';
            callback(false);
            return;
        }
        else {
            retryDelayMs = pushback;
            this.nextRetryBackoffSec = this.initialRetryBackoffSec;
        }
        setTimeout(() => {
            var _a, _b;
            if (this.state !== 'RETRY') {
                callback(false);
                return;
            }
            if ((_b = (_a = this.retryThrottler) === null || _a === void 0 ? void 0 : _a.canRetryCall()) !== null && _b !== void 0 ? _b : true) {
                callback(true);
                this.attempts += 1;
                this.startNewAttempt();
            }
            else {
                this.trace('Retry attempt denied by throttling policy');
                callback(false);
            }
        }, retryDelayMs);
    }
    countActiveCalls() {
        let count = 0;
        for (const call of this.underlyingCalls) {
            if ((call === null || call === void 0 ? void 0 : call.state) === 'ACTIVE') {
                count += 1;
            }
        }
        return count;
    }
    handleProcessedStatus(status, callIndex, pushback) {
        var _a, _b, _c;
        switch (this.state) {
            case 'COMMITTED':
            case 'NO_RETRY':
            case 'TRANSPARENT_ONLY':
                this.commitCall(callIndex);
                this.reportStatus(status);
                break;
            case 'HEDGING':
                if (this.isStatusCodeInList((_a = this.callConfig.methodConfig.hedgingPolicy.nonFatalStatusCodes) !== null && _a !== void 0 ? _a : [], status.code)) {
                    (_b = this.retryThrottler) === null || _b === void 0 ? void 0 : _b.addCallFailed();
                    let delayMs;
                    if (pushback === null) {
                        delayMs = 0;
                    }
                    else if (pushback < 0) {
                        this.state = 'TRANSPARENT_ONLY';
                        this.commitCall(callIndex);
                        this.reportStatus(status);
                        return;
                    }
                    else {
                        delayMs = pushback;
                    }
                    setTimeout(() => {
                        this.maybeStartHedgingAttempt();
                        // If after trying to start a call there are no active calls, this was the last one
                        if (this.countActiveCalls() === 0) {
                            this.commitCall(callIndex);
                            this.reportStatus(status);
                        }
                    }, delayMs);
                }
                else {
                    this.commitCall(callIndex);
                    this.reportStatus(status);
                }
                break;
            case 'RETRY':
                if (this.isStatusCodeInList(this.callConfig.methodConfig.retryPolicy.retryableStatusCodes, status.code)) {
                    (_c = this.retryThrottler) === null || _c === void 0 ? void 0 : _c.addCallFailed();
                    this.maybeRetryCall(pushback, retried => {
                        if (!retried) {
                            this.commitCall(callIndex);
                            this.reportStatus(status);
                        }
                    });
                }
                else {
                    this.commitCall(callIndex);
                    this.reportStatus(status);
                }
                break;
        }
    }
    getPushback(metadata) {
        const mdValue = metadata.get('grpc-retry-pushback-ms');
        if (mdValue.length === 0) {
            return null;
        }
        try {
            return parseInt(mdValue[0]);
        }
        catch (e) {
            return -1;
        }
    }
    handleChildStatus(status, callIndex) {
        var _a;
        if (this.underlyingCalls[callIndex].state === 'COMPLETED') {
            return;
        }
        this.trace('state=' +
            this.state +
            ' handling status with progress ' +
            status.progress +
            ' from child [' +
            this.underlyingCalls[callIndex].call.getCallNumber() +
            '] in state ' +
            this.underlyingCalls[callIndex].state);
        this.underlyingCalls[callIndex].state = 'COMPLETED';
        if (status.code === constants_1$2.Status.OK) {
            (_a = this.retryThrottler) === null || _a === void 0 ? void 0 : _a.addCallSucceeded();
            this.commitCall(callIndex);
            this.reportStatus(status);
            return;
        }
        if (this.state === 'NO_RETRY') {
            this.commitCall(callIndex);
            this.reportStatus(status);
            return;
        }
        if (this.state === 'COMMITTED') {
            this.reportStatus(status);
            return;
        }
        const pushback = this.getPushback(status.metadata);
        switch (status.progress) {
            case 'NOT_STARTED':
                // RPC never leaves the client, always safe to retry
                this.startNewAttempt();
                break;
            case 'REFUSED':
                // RPC reaches the server library, but not the server application logic
                if (this.transparentRetryUsed) {
                    this.handleProcessedStatus(status, callIndex, pushback);
                }
                else {
                    this.transparentRetryUsed = true;
                    this.startNewAttempt();
                }
                break;
            case 'DROP':
                this.commitCall(callIndex);
                this.reportStatus(status);
                break;
            case 'PROCESSED':
                this.handleProcessedStatus(status, callIndex, pushback);
                break;
        }
    }
    maybeStartHedgingAttempt() {
        if (this.state !== 'HEDGING') {
            return;
        }
        if (!this.callConfig.methodConfig.hedgingPolicy) {
            return;
        }
        if (this.attempts >= this.maxAttempts) {
            return;
        }
        this.attempts += 1;
        this.startNewAttempt();
        this.maybeStartHedgingTimer();
    }
    maybeStartHedgingTimer() {
        var _a, _b, _c;
        if (this.hedgingTimer) {
            clearTimeout(this.hedgingTimer);
        }
        if (this.state !== 'HEDGING') {
            return;
        }
        if (!this.callConfig.methodConfig.hedgingPolicy) {
            return;
        }
        const hedgingPolicy = this.callConfig.methodConfig.hedgingPolicy;
        if (this.attempts >= this.maxAttempts) {
            return;
        }
        const hedgingDelayString = (_a = hedgingPolicy.hedgingDelay) !== null && _a !== void 0 ? _a : '0s';
        const hedgingDelaySec = Number(hedgingDelayString.substring(0, hedgingDelayString.length - 1));
        this.hedgingTimer = setTimeout(() => {
            this.maybeStartHedgingAttempt();
        }, hedgingDelaySec * 1000);
        (_c = (_b = this.hedgingTimer).unref) === null || _c === void 0 ? void 0 : _c.call(_b);
    }
    startNewAttempt() {
        const child = this.channel.createLoadBalancingCall(this.callConfig, this.methodName, this.host, this.credentials, this.deadline);
        this.trace('Created child call [' +
            child.getCallNumber() +
            '] for attempt ' +
            this.attempts);
        const index = this.underlyingCalls.length;
        this.underlyingCalls.push({
            state: 'ACTIVE',
            call: child,
            nextMessageToSend: 0,
            startTime: new Date()
        });
        const previousAttempts = this.attempts - 1;
        const initialMetadata = this.initialMetadata.clone();
        if (previousAttempts > 0) {
            initialMetadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);
        }
        let receivedMetadata = false;
        child.start(initialMetadata, {
            onReceiveMetadata: metadata => {
                this.trace('Received metadata from child [' + child.getCallNumber() + ']');
                this.commitCall(index);
                receivedMetadata = true;
                if (previousAttempts > 0) {
                    metadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);
                }
                if (this.underlyingCalls[index].state === 'ACTIVE') {
                    this.listener.onReceiveMetadata(metadata);
                }
            },
            onReceiveMessage: message => {
                this.trace('Received message from child [' + child.getCallNumber() + ']');
                this.commitCall(index);
                if (this.underlyingCalls[index].state === 'ACTIVE') {
                    this.listener.onReceiveMessage(message);
                }
            },
            onReceiveStatus: status => {
                this.trace('Received status from child [' + child.getCallNumber() + ']');
                if (!receivedMetadata && previousAttempts > 0) {
                    status.metadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);
                }
                this.handleChildStatus(status, index);
            },
        });
        this.sendNextChildMessage(index);
        if (this.readStarted) {
            child.startRead();
        }
    }
    start(metadata, listener) {
        this.trace('start called');
        this.listener = listener;
        this.initialMetadata = metadata;
        this.attempts += 1;
        this.startNewAttempt();
        this.maybeStartHedgingTimer();
    }
    handleChildWriteCompleted(childIndex) {
        var _a, _b;
        const childCall = this.underlyingCalls[childIndex];
        const messageIndex = childCall.nextMessageToSend;
        (_b = (_a = this.getBufferEntry(messageIndex)).callback) === null || _b === void 0 ? void 0 : _b.call(_a);
        this.clearSentMessages();
        childCall.nextMessageToSend += 1;
        this.sendNextChildMessage(childIndex);
    }
    sendNextChildMessage(childIndex) {
        const childCall = this.underlyingCalls[childIndex];
        if (childCall.state === 'COMPLETED') {
            return;
        }
        if (this.getBufferEntry(childCall.nextMessageToSend)) {
            const bufferEntry = this.getBufferEntry(childCall.nextMessageToSend);
            switch (bufferEntry.entryType) {
                case 'MESSAGE':
                    childCall.call.sendMessageWithContext({
                        callback: error => {
                            // Ignore error
                            this.handleChildWriteCompleted(childIndex);
                        },
                    }, bufferEntry.message.message);
                    break;
                case 'HALF_CLOSE':
                    childCall.nextMessageToSend += 1;
                    childCall.call.halfClose();
                    break;
            }
        }
    }
    sendMessageWithContext(context, message) {
        var _a;
        this.trace('write() called with message of length ' + message.length);
        const writeObj = {
            message,
            flags: context.flags,
        };
        const messageIndex = this.getNextBufferIndex();
        const bufferEntry = {
            entryType: 'MESSAGE',
            message: writeObj,
            allocated: this.bufferTracker.allocate(message.length, this.callNumber),
        };
        this.writeBuffer.push(bufferEntry);
        if (bufferEntry.allocated) {
            (_a = context.callback) === null || _a === void 0 ? void 0 : _a.call(context);
            for (const [callIndex, call] of this.underlyingCalls.entries()) {
                if (call.state === 'ACTIVE' &&
                    call.nextMessageToSend === messageIndex) {
                    call.call.sendMessageWithContext({
                        callback: error => {
                            // Ignore error
                            this.handleChildWriteCompleted(callIndex);
                        },
                    }, message);
                }
            }
        }
        else {
            this.commitCallWithMostMessages();
            // commitCallWithMostMessages can fail if we are between ping attempts
            if (this.committedCallIndex === null) {
                return;
            }
            const call = this.underlyingCalls[this.committedCallIndex];
            bufferEntry.callback = context.callback;
            if (call.state === 'ACTIVE' && call.nextMessageToSend === messageIndex) {
                call.call.sendMessageWithContext({
                    callback: error => {
                        // Ignore error
                        this.handleChildWriteCompleted(this.committedCallIndex);
                    },
                }, message);
            }
        }
    }
    startRead() {
        this.trace('startRead called');
        this.readStarted = true;
        for (const underlyingCall of this.underlyingCalls) {
            if ((underlyingCall === null || underlyingCall === void 0 ? void 0 : underlyingCall.state) === 'ACTIVE') {
                underlyingCall.call.startRead();
            }
        }
    }
    halfClose() {
        this.trace('halfClose called');
        const halfCloseIndex = this.getNextBufferIndex();
        this.writeBuffer.push({
            entryType: 'HALF_CLOSE',
            allocated: false,
        });
        for (const call of this.underlyingCalls) {
            if ((call === null || call === void 0 ? void 0 : call.state) === 'ACTIVE' &&
                call.nextMessageToSend === halfCloseIndex) {
                call.nextMessageToSend += 1;
                call.call.halfClose();
            }
        }
    }
    setCredentials(newCredentials) {
        throw new Error('Method not implemented.');
    }
    getMethod() {
        return this.methodName;
    }
    getHost() {
        return this.host;
    }
}
retryingCall.RetryingCall = RetryingCall;

var subchannelInterface = {};

var hasRequiredSubchannelInterface;

function requireSubchannelInterface () {
	if (hasRequiredSubchannelInterface) return subchannelInterface;
	hasRequiredSubchannelInterface = 1;
	/*
	 * Copyright 2022 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(subchannelInterface, "__esModule", { value: true });
	subchannelInterface.BaseSubchannelWrapper = void 0;
	class BaseSubchannelWrapper {
	    constructor(child) {
	        this.child = child;
	        this.healthy = true;
	        this.healthListeners = new Set();
	        child.addHealthStateWatcher(childHealthy => {
	            /* A change to the child health state only affects this wrapper's overall
	             * health state if this wrapper is reporting healthy. */
	            if (this.healthy) {
	                this.updateHealthListeners();
	            }
	        });
	    }
	    updateHealthListeners() {
	        for (const listener of this.healthListeners) {
	            listener(this.isHealthy());
	        }
	    }
	    getConnectivityState() {
	        return this.child.getConnectivityState();
	    }
	    addConnectivityStateListener(listener) {
	        this.child.addConnectivityStateListener(listener);
	    }
	    removeConnectivityStateListener(listener) {
	        this.child.removeConnectivityStateListener(listener);
	    }
	    startConnecting() {
	        this.child.startConnecting();
	    }
	    getAddress() {
	        return this.child.getAddress();
	    }
	    throttleKeepalive(newKeepaliveTime) {
	        this.child.throttleKeepalive(newKeepaliveTime);
	    }
	    ref() {
	        this.child.ref();
	    }
	    unref() {
	        this.child.unref();
	    }
	    getChannelzRef() {
	        return this.child.getChannelzRef();
	    }
	    isHealthy() {
	        return this.healthy && this.child.isHealthy();
	    }
	    addHealthStateWatcher(listener) {
	        this.healthListeners.add(listener);
	    }
	    removeHealthStateWatcher(listener) {
	        this.healthListeners.delete(listener);
	    }
	    setHealthy(healthy) {
	        if (healthy !== this.healthy) {
	            this.healthy = healthy;
	            /* A change to this wrapper's health state only affects the overall
	             * reported health state if the child is healthy. */
	            if (this.child.isHealthy()) {
	                this.updateHealthListeners();
	            }
	        }
	    }
	    getRealSubchannel() {
	        return this.child.getRealSubchannel();
	    }
	    realSubchannelEquals(other) {
	        return this.getRealSubchannel() === other.getRealSubchannel();
	    }
	    getCallCredentials() {
	        return this.child.getCallCredentials();
	    }
	}
	subchannelInterface.BaseSubchannelWrapper = BaseSubchannelWrapper;
	
	return subchannelInterface;
}

var hasRequiredInternalChannel;

function requireInternalChannel () {
	if (hasRequiredInternalChannel) return internalChannel;
	hasRequiredInternalChannel = 1;
	(function (exports) {
		/*
		 * Copyright 2019 gRPC authors.
		 *
		 * Licensed under the Apache License, Version 2.0 (the "License");
		 * you may not use this file except in compliance with the License.
		 * You may obtain a copy of the License at
		 *
		 *     http://www.apache.org/licenses/LICENSE-2.0
		 *
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS,
		 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 * See the License for the specific language governing permissions and
		 * limitations under the License.
		 *
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.InternalChannel = exports.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX = void 0;
		const channel_credentials_1 = channelCredentials;
		const resolving_load_balancer_1 = resolvingLoadBalancer;
		const subchannel_pool_1 = requireSubchannelPool();
		const picker_1 = requirePicker();
		const metadata_1 = metadata;
		const constants_1 = constants;
		const filter_stack_1 = requireFilterStack();
		const compression_filter_1 = compressionFilter;
		const resolver_1 = resolver;
		const logging_1 = logging$8;
		const http_proxy_1 = http_proxy;
		const uri_parser_1 = uriParser;
		const connectivity_state_1 = connectivityState;
		const channelz_1 = requireChannelz();
		const load_balancing_call_1 = loadBalancingCall;
		const deadline_1 = deadline;
		const resolving_call_1 = resolvingCall;
		const call_number_1 = callNumber;
		const control_plane_status_1 = controlPlaneStatus;
		const retrying_call_1 = retryingCall;
		const subchannel_interface_1 = requireSubchannelInterface();
		/**
		 * See https://nodejs.org/api/timers.html#timers_setinterval_callback_delay_args
		 */
		const MAX_TIMEOUT_TIME = 2147483647;
		const MIN_IDLE_TIMEOUT_MS = 1000;
		// 30 minutes
		const DEFAULT_IDLE_TIMEOUT_MS = 30 * 60 * 1000;
		const RETRY_THROTTLER_MAP = new Map();
		const DEFAULT_RETRY_BUFFER_SIZE_BYTES = 1 << 24; // 16 MB
		const DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES = 1 << 20; // 1 MB
		class ChannelSubchannelWrapper extends subchannel_interface_1.BaseSubchannelWrapper {
		    constructor(childSubchannel, channel) {
		        super(childSubchannel);
		        this.channel = channel;
		        this.refCount = 0;
		        this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime) => {
		            channel.throttleKeepalive(keepaliveTime);
		        };
		    }
		    ref() {
		        if (this.refCount === 0) {
		            this.child.addConnectivityStateListener(this.subchannelStateListener);
		            this.channel.addWrappedSubchannel(this);
		        }
		        this.child.ref();
		        this.refCount += 1;
		    }
		    unref() {
		        this.child.unref();
		        this.refCount -= 1;
		        if (this.refCount <= 0) {
		            this.child.removeConnectivityStateListener(this.subchannelStateListener);
		            this.channel.removeWrappedSubchannel(this);
		        }
		    }
		}
		class ShutdownPicker {
		    pick(pickArgs) {
		        return {
		            pickResultType: picker_1.PickResultType.DROP,
		            status: {
		                code: constants_1.Status.UNAVAILABLE,
		                details: 'Channel closed before call started',
		                metadata: new metadata_1.Metadata()
		            },
		            subchannel: null,
		            onCallStarted: null,
		            onCallEnded: null
		        };
		    }
		}
		exports.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX = 'grpc.internal.no_subchannel';
		class ChannelzInfoTracker {
		    constructor(target) {
		        this.target = target;
		        this.trace = new channelz_1.ChannelzTrace();
		        this.callTracker = new channelz_1.ChannelzCallTracker();
		        this.childrenTracker = new channelz_1.ChannelzChildrenTracker();
		        this.state = connectivity_state_1.ConnectivityState.IDLE;
		    }
		    getChannelzInfoCallback() {
		        return () => {
		            return {
		                target: this.target,
		                state: this.state,
		                trace: this.trace,
		                callTracker: this.callTracker,
		                children: this.childrenTracker.getChildLists()
		            };
		        };
		    }
		}
		class InternalChannel {
		    constructor(target, credentials, options) {
		        var _a, _b, _c, _d, _e, _f;
		        this.credentials = credentials;
		        this.options = options;
		        this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;
		        this.currentPicker = new picker_1.UnavailablePicker();
		        /**
		         * Calls queued up to get a call config. Should only be populated before the
		         * first time the resolver returns a result, which includes the ConfigSelector.
		         */
		        this.configSelectionQueue = [];
		        this.pickQueue = [];
		        this.connectivityStateWatchers = [];
		        /**
		         * This timer does not do anything on its own. Its purpose is to hold the
		         * event loop open while there are any pending calls for the channel that
		         * have not yet been assigned to specific subchannels. In other words,
		         * the invariant is that callRefTimer is reffed if and only if pickQueue
		         * is non-empty. In addition, the timer is null while the state is IDLE or
		         * SHUTDOWN and there are no pending calls.
		         */
		        this.callRefTimer = null;
		        this.configSelector = null;
		        /**
		         * This is the error from the name resolver if it failed most recently. It
		         * is only used to end calls that start while there is no config selector
		         * and the name resolver is in backoff, so it should be nulled if
		         * configSelector becomes set or the channel state becomes anything other
		         * than TRANSIENT_FAILURE.
		         */
		        this.currentResolutionError = null;
		        this.wrappedSubchannels = new Set();
		        this.callCount = 0;
		        this.idleTimer = null;
		        // Channelz info
		        this.channelzEnabled = true;
		        /**
		         * Randomly generated ID to be passed to the config selector, for use by
		         * ring_hash in xDS. An integer distributed approximately uniformly between
		         * 0 and MAX_SAFE_INTEGER.
		         */
		        this.randomChannelId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);
		        if (typeof target !== 'string') {
		            throw new TypeError('Channel target must be a string');
		        }
		        if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {
		            throw new TypeError('Channel credentials must be a ChannelCredentials object');
		        }
		        if (options) {
		            if (typeof options !== 'object') {
		                throw new TypeError('Channel options must be an object');
		            }
		        }
		        this.channelzInfoTracker = new ChannelzInfoTracker(target);
		        const originalTargetUri = (0, uri_parser_1.parseUri)(target);
		        if (originalTargetUri === null) {
		            throw new Error(`Could not parse target name "${target}"`);
		        }
		        /* This ensures that the target has a scheme that is registered with the
		         * resolver */
		        const defaultSchemeMapResult = (0, resolver_1.mapUriDefaultScheme)(originalTargetUri);
		        if (defaultSchemeMapResult === null) {
		            throw new Error(`Could not find a default scheme for target name "${target}"`);
		        }
		        if (this.options['grpc.enable_channelz'] === 0) {
		            this.channelzEnabled = false;
		        }
		        this.channelzRef = (0, channelz_1.registerChannelzChannel)(target, this.channelzInfoTracker.getChannelzInfoCallback(), this.channelzEnabled);
		        if (this.channelzEnabled) {
		            this.channelzInfoTracker.trace.addTrace('CT_INFO', 'Channel created');
		        }
		        if (this.options['grpc.default_authority']) {
		            this.defaultAuthority = this.options['grpc.default_authority'];
		        }
		        else {
		            this.defaultAuthority = (0, resolver_1.getDefaultAuthority)(defaultSchemeMapResult);
		        }
		        const proxyMapResult = (0, http_proxy_1.mapProxyName)(defaultSchemeMapResult, options);
		        this.target = proxyMapResult.target;
		        this.options = Object.assign({}, this.options, proxyMapResult.extraOptions);
		        /* The global boolean parameter to getSubchannelPool has the inverse meaning to what
		         * the grpc.use_local_subchannel_pool channel option means. */
		        this.subchannelPool = (0, subchannel_pool_1.getSubchannelPool)(((_a = this.options['grpc.use_local_subchannel_pool']) !== null && _a !== void 0 ? _a : 0) === 0);
		        this.retryBufferTracker = new retrying_call_1.MessageBufferTracker((_b = this.options['grpc.retry_buffer_size']) !== null && _b !== void 0 ? _b : DEFAULT_RETRY_BUFFER_SIZE_BYTES, (_c = this.options['grpc.per_rpc_retry_buffer_size']) !== null && _c !== void 0 ? _c : DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES);
		        this.keepaliveTime = (_d = this.options['grpc.keepalive_time_ms']) !== null && _d !== void 0 ? _d : -1;
		        this.idleTimeoutMs = Math.max((_e = this.options['grpc.client_idle_timeout_ms']) !== null && _e !== void 0 ? _e : DEFAULT_IDLE_TIMEOUT_MS, MIN_IDLE_TIMEOUT_MS);
		        const channelControlHelper = {
		            createSubchannel: (subchannelAddress, subchannelArgs) => {
		                const finalSubchannelArgs = {};
		                for (const [key, value] of Object.entries(subchannelArgs)) {
		                    if (!key.startsWith(exports.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX)) {
		                        finalSubchannelArgs[key] = value;
		                    }
		                }
		                const subchannel = this.subchannelPool.getOrCreateSubchannel(this.target, subchannelAddress, finalSubchannelArgs, this.credentials);
		                subchannel.throttleKeepalive(this.keepaliveTime);
		                if (this.channelzEnabled) {
		                    this.channelzInfoTracker.trace.addTrace('CT_INFO', 'Created subchannel or used existing subchannel', subchannel.getChannelzRef());
		                }
		                const wrappedSubchannel = new ChannelSubchannelWrapper(subchannel, this);
		                return wrappedSubchannel;
		            },
		            updateState: (connectivityState, picker) => {
		                this.currentPicker = picker;
		                const queueCopy = this.pickQueue.slice();
		                this.pickQueue = [];
		                if (queueCopy.length > 0) {
		                    this.callRefTimerUnref();
		                }
		                for (const call of queueCopy) {
		                    call.doPick();
		                }
		                this.updateState(connectivityState);
		            },
		            requestReresolution: () => {
		                // This should never be called.
		                throw new Error('Resolving load balancer should never call requestReresolution');
		            },
		            addChannelzChild: (child) => {
		                if (this.channelzEnabled) {
		                    this.channelzInfoTracker.childrenTracker.refChild(child);
		                }
		            },
		            removeChannelzChild: (child) => {
		                if (this.channelzEnabled) {
		                    this.channelzInfoTracker.childrenTracker.unrefChild(child);
		                }
		            },
		        };
		        this.resolvingLoadBalancer = new resolving_load_balancer_1.ResolvingLoadBalancer(this.target, channelControlHelper, this.options, (serviceConfig, configSelector) => {
		            var _a;
		            if (serviceConfig.retryThrottling) {
		                RETRY_THROTTLER_MAP.set(this.getTarget(), new retrying_call_1.RetryThrottler(serviceConfig.retryThrottling.maxTokens, serviceConfig.retryThrottling.tokenRatio, RETRY_THROTTLER_MAP.get(this.getTarget())));
		            }
		            else {
		                RETRY_THROTTLER_MAP.delete(this.getTarget());
		            }
		            if (this.channelzEnabled) {
		                this.channelzInfoTracker.trace.addTrace('CT_INFO', 'Address resolution succeeded');
		            }
		            (_a = this.configSelector) === null || _a === void 0 ? void 0 : _a.unref();
		            this.configSelector = configSelector;
		            this.currentResolutionError = null;
		            /* We process the queue asynchronously to ensure that the corresponding
		             * load balancer update has completed. */
		            process.nextTick(() => {
		                const localQueue = this.configSelectionQueue;
		                this.configSelectionQueue = [];
		                if (localQueue.length > 0) {
		                    this.callRefTimerUnref();
		                }
		                for (const call of localQueue) {
		                    call.getConfig();
		                }
		            });
		        }, status => {
		            if (this.channelzEnabled) {
		                this.channelzInfoTracker.trace.addTrace('CT_WARNING', 'Address resolution failed with code ' +
		                    status.code +
		                    ' and details "' +
		                    status.details +
		                    '"');
		            }
		            if (this.configSelectionQueue.length > 0) {
		                this.trace('Name resolution failed with calls queued for config selection');
		            }
		            if (this.configSelector === null) {
		                this.currentResolutionError = Object.assign(Object.assign({}, (0, control_plane_status_1.restrictControlPlaneStatusCode)(status.code, status.details)), { metadata: status.metadata });
		            }
		            const localQueue = this.configSelectionQueue;
		            this.configSelectionQueue = [];
		            if (localQueue.length > 0) {
		                this.callRefTimerUnref();
		            }
		            for (const call of localQueue) {
		                call.reportResolverError(status);
		            }
		        });
		        this.filterStackFactory = new filter_stack_1.FilterStackFactory([
		            new compression_filter_1.CompressionFilterFactory(this, this.options),
		        ]);
		        this.trace('Channel constructed with options ' +
		            JSON.stringify(options, undefined, 2));
		        const error = new Error();
		        if ((0, logging_1.isTracerEnabled)('channel_stacktrace')) {
		            (0, logging_1.trace)(constants_1.LogVerbosity.DEBUG, 'channel_stacktrace', '(' +
		                this.channelzRef.id +
		                ') ' +
		                'Channel constructed \n' +
		                ((_f = error.stack) === null || _f === void 0 ? void 0 : _f.substring(error.stack.indexOf('\n') + 1)));
		        }
		        this.lastActivityTimestamp = new Date();
		    }
		    trace(text, verbosityOverride) {
		        (0, logging_1.trace)(verbosityOverride !== null && verbosityOverride !== void 0 ? verbosityOverride : constants_1.LogVerbosity.DEBUG, 'channel', '(' + this.channelzRef.id + ') ' + (0, uri_parser_1.uriToString)(this.target) + ' ' + text);
		    }
		    callRefTimerRef() {
		        var _a, _b, _c, _d;
		        if (!this.callRefTimer) {
		            this.callRefTimer = setInterval(() => { }, MAX_TIMEOUT_TIME);
		        }
		        // If the hasRef function does not exist, always run the code
		        if (!((_b = (_a = this.callRefTimer).hasRef) === null || _b === void 0 ? void 0 : _b.call(_a))) {
		            this.trace('callRefTimer.ref | configSelectionQueue.length=' +
		                this.configSelectionQueue.length +
		                ' pickQueue.length=' +
		                this.pickQueue.length);
		            (_d = (_c = this.callRefTimer).ref) === null || _d === void 0 ? void 0 : _d.call(_c);
		        }
		    }
		    callRefTimerUnref() {
		        var _a, _b, _c;
		        // If the timer or the hasRef function does not exist, always run the code
		        if (!((_a = this.callRefTimer) === null || _a === void 0 ? void 0 : _a.hasRef) || this.callRefTimer.hasRef()) {
		            this.trace('callRefTimer.unref | configSelectionQueue.length=' +
		                this.configSelectionQueue.length +
		                ' pickQueue.length=' +
		                this.pickQueue.length);
		            (_c = (_b = this.callRefTimer) === null || _b === void 0 ? void 0 : _b.unref) === null || _c === void 0 ? void 0 : _c.call(_b);
		        }
		    }
		    removeConnectivityStateWatcher(watcherObject) {
		        const watcherIndex = this.connectivityStateWatchers.findIndex(value => value === watcherObject);
		        if (watcherIndex >= 0) {
		            this.connectivityStateWatchers.splice(watcherIndex, 1);
		        }
		    }
		    updateState(newState) {
		        (0, logging_1.trace)(constants_1.LogVerbosity.DEBUG, 'connectivity_state', '(' +
		            this.channelzRef.id +
		            ') ' +
		            (0, uri_parser_1.uriToString)(this.target) +
		            ' ' +
		            connectivity_state_1.ConnectivityState[this.connectivityState] +
		            ' -> ' +
		            connectivity_state_1.ConnectivityState[newState]);
		        if (this.channelzEnabled) {
		            this.channelzInfoTracker.trace.addTrace('CT_INFO', 'Connectivity state change to ' + connectivity_state_1.ConnectivityState[newState]);
		        }
		        this.connectivityState = newState;
		        this.channelzInfoTracker.state = newState;
		        const watchersCopy = this.connectivityStateWatchers.slice();
		        for (const watcherObject of watchersCopy) {
		            if (newState !== watcherObject.currentState) {
		                if (watcherObject.timer) {
		                    clearTimeout(watcherObject.timer);
		                }
		                this.removeConnectivityStateWatcher(watcherObject);
		                watcherObject.callback();
		            }
		        }
		        if (newState !== connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {
		            this.currentResolutionError = null;
		        }
		    }
		    throttleKeepalive(newKeepaliveTime) {
		        if (newKeepaliveTime > this.keepaliveTime) {
		            this.keepaliveTime = newKeepaliveTime;
		            for (const wrappedSubchannel of this.wrappedSubchannels) {
		                wrappedSubchannel.throttleKeepalive(newKeepaliveTime);
		            }
		        }
		    }
		    addWrappedSubchannel(wrappedSubchannel) {
		        this.wrappedSubchannels.add(wrappedSubchannel);
		    }
		    removeWrappedSubchannel(wrappedSubchannel) {
		        this.wrappedSubchannels.delete(wrappedSubchannel);
		    }
		    doPick(metadata, extraPickInfo) {
		        return this.currentPicker.pick({
		            metadata: metadata,
		            extraPickInfo: extraPickInfo,
		        });
		    }
		    queueCallForPick(call) {
		        this.pickQueue.push(call);
		        this.callRefTimerRef();
		    }
		    getConfig(method, metadata) {
		        if (this.connectivityState !== connectivity_state_1.ConnectivityState.SHUTDOWN) {
		            this.resolvingLoadBalancer.exitIdle();
		        }
		        if (this.configSelector) {
		            return {
		                type: 'SUCCESS',
		                config: this.configSelector.invoke(method, metadata, this.randomChannelId),
		            };
		        }
		        else {
		            if (this.currentResolutionError) {
		                return {
		                    type: 'ERROR',
		                    error: this.currentResolutionError,
		                };
		            }
		            else {
		                return {
		                    type: 'NONE',
		                };
		            }
		        }
		    }
		    queueCallForConfig(call) {
		        this.configSelectionQueue.push(call);
		        this.callRefTimerRef();
		    }
		    enterIdle() {
		        this.resolvingLoadBalancer.destroy();
		        this.updateState(connectivity_state_1.ConnectivityState.IDLE);
		        this.currentPicker = new picker_1.QueuePicker(this.resolvingLoadBalancer);
		        if (this.idleTimer) {
		            clearTimeout(this.idleTimer);
		            this.idleTimer = null;
		        }
		        if (this.callRefTimer) {
		            clearInterval(this.callRefTimer);
		            this.callRefTimer = null;
		        }
		    }
		    startIdleTimeout(timeoutMs) {
		        var _a, _b;
		        this.idleTimer = setTimeout(() => {
		            if (this.callCount > 0) {
		                /* If there is currently a call, the channel will not go idle for a
		                 * period of at least idleTimeoutMs, so check again after that time.
		                 */
		                this.startIdleTimeout(this.idleTimeoutMs);
		                return;
		            }
		            const now = new Date();
		            const timeSinceLastActivity = now.valueOf() - this.lastActivityTimestamp.valueOf();
		            if (timeSinceLastActivity >= this.idleTimeoutMs) {
		                this.trace('Idle timer triggered after ' +
		                    this.idleTimeoutMs +
		                    'ms of inactivity');
		                this.enterIdle();
		            }
		            else {
		                /* Whenever the timer fires with the latest activity being too recent,
		                 * set the timer again for the time when the time since the last
		                 * activity is equal to the timeout. This should result in the timer
		                 * firing no more than once every idleTimeoutMs/2 on average. */
		                this.startIdleTimeout(this.idleTimeoutMs - timeSinceLastActivity);
		            }
		        }, timeoutMs);
		        (_b = (_a = this.idleTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
		    }
		    maybeStartIdleTimer() {
		        if (this.connectivityState !== connectivity_state_1.ConnectivityState.SHUTDOWN &&
		            !this.idleTimer) {
		            this.startIdleTimeout(this.idleTimeoutMs);
		        }
		    }
		    onCallStart() {
		        if (this.channelzEnabled) {
		            this.channelzInfoTracker.callTracker.addCallStarted();
		        }
		        this.callCount += 1;
		    }
		    onCallEnd(status) {
		        if (this.channelzEnabled) {
		            if (status.code === constants_1.Status.OK) {
		                this.channelzInfoTracker.callTracker.addCallSucceeded();
		            }
		            else {
		                this.channelzInfoTracker.callTracker.addCallFailed();
		            }
		        }
		        this.callCount -= 1;
		        this.lastActivityTimestamp = new Date();
		        this.maybeStartIdleTimer();
		    }
		    createLoadBalancingCall(callConfig, method, host, credentials, deadline) {
		        const callNumber = (0, call_number_1.getNextCallNumber)();
		        this.trace('createLoadBalancingCall [' + callNumber + '] method="' + method + '"');
		        return new load_balancing_call_1.LoadBalancingCall(this, callConfig, method, host, credentials, deadline, callNumber);
		    }
		    createRetryingCall(callConfig, method, host, credentials, deadline) {
		        const callNumber = (0, call_number_1.getNextCallNumber)();
		        this.trace('createRetryingCall [' + callNumber + '] method="' + method + '"');
		        return new retrying_call_1.RetryingCall(this, callConfig, method, host, credentials, deadline, callNumber, this.retryBufferTracker, RETRY_THROTTLER_MAP.get(this.getTarget()));
		    }
		    createResolvingCall(method, deadline, host, parentCall, propagateFlags) {
		        const callNumber = (0, call_number_1.getNextCallNumber)();
		        this.trace('createResolvingCall [' +
		            callNumber +
		            '] method="' +
		            method +
		            '", deadline=' +
		            (0, deadline_1.deadlineToString)(deadline));
		        const finalOptions = {
		            deadline: deadline,
		            flags: propagateFlags !== null && propagateFlags !== void 0 ? propagateFlags : constants_1.Propagate.DEFAULTS,
		            host: host !== null && host !== void 0 ? host : this.defaultAuthority,
		            parentCall: parentCall,
		        };
		        const call = new resolving_call_1.ResolvingCall(this, method, finalOptions, this.filterStackFactory.clone(), callNumber);
		        this.onCallStart();
		        call.addStatusWatcher(status => {
		            this.onCallEnd(status);
		        });
		        return call;
		    }
		    close() {
		        var _a;
		        this.resolvingLoadBalancer.destroy();
		        this.updateState(connectivity_state_1.ConnectivityState.SHUTDOWN);
		        this.currentPicker = new ShutdownPicker();
		        for (const call of this.configSelectionQueue) {
		            call.cancelWithStatus(constants_1.Status.UNAVAILABLE, 'Channel closed before call started');
		        }
		        this.configSelectionQueue = [];
		        for (const call of this.pickQueue) {
		            call.cancelWithStatus(constants_1.Status.UNAVAILABLE, 'Channel closed before call started');
		        }
		        this.pickQueue = [];
		        if (this.callRefTimer) {
		            clearInterval(this.callRefTimer);
		        }
		        if (this.idleTimer) {
		            clearTimeout(this.idleTimer);
		        }
		        if (this.channelzEnabled) {
		            (0, channelz_1.unregisterChannelzRef)(this.channelzRef);
		        }
		        this.subchannelPool.unrefUnusedSubchannels();
		        (_a = this.configSelector) === null || _a === void 0 ? void 0 : _a.unref();
		        this.configSelector = null;
		    }
		    getTarget() {
		        return (0, uri_parser_1.uriToString)(this.target);
		    }
		    getConnectivityState(tryToConnect) {
		        const connectivityState = this.connectivityState;
		        if (tryToConnect) {
		            this.resolvingLoadBalancer.exitIdle();
		            this.lastActivityTimestamp = new Date();
		            this.maybeStartIdleTimer();
		        }
		        return connectivityState;
		    }
		    watchConnectivityState(currentState, deadline, callback) {
		        if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {
		            throw new Error('Channel has been shut down');
		        }
		        let timer = null;
		        if (deadline !== Infinity) {
		            const deadlineDate = deadline instanceof Date ? deadline : new Date(deadline);
		            const now = new Date();
		            if (deadline === -Infinity || deadlineDate <= now) {
		                process.nextTick(callback, new Error('Deadline passed without connectivity state change'));
		                return;
		            }
		            timer = setTimeout(() => {
		                this.removeConnectivityStateWatcher(watcherObject);
		                callback(new Error('Deadline passed without connectivity state change'));
		            }, deadlineDate.getTime() - now.getTime());
		        }
		        const watcherObject = {
		            currentState,
		            callback,
		            timer,
		        };
		        this.connectivityStateWatchers.push(watcherObject);
		    }
		    /**
		     * Get the channelz reference object for this channel. The returned value is
		     * garbage if channelz is disabled for this channel.
		     * @returns
		     */
		    getChannelzRef() {
		        return this.channelzRef;
		    }
		    createCall(method, deadline, host, parentCall, propagateFlags) {
		        if (typeof method !== 'string') {
		            throw new TypeError('Channel#createCall: method must be a string');
		        }
		        if (!(typeof deadline === 'number' || deadline instanceof Date)) {
		            throw new TypeError('Channel#createCall: deadline must be a number or Date');
		        }
		        if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {
		            throw new Error('Channel has been shut down');
		        }
		        return this.createResolvingCall(method, deadline, host, parentCall, propagateFlags);
		    }
		    getOptions() {
		        return this.options;
		    }
		}
		exports.InternalChannel = InternalChannel;
		
	} (internalChannel));
	return internalChannel;
}

var hasRequiredChannel;

function requireChannel () {
	if (hasRequiredChannel) return channel;
	hasRequiredChannel = 1;
	/*
	 * Copyright 2019 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(channel, "__esModule", { value: true });
	channel.ChannelImplementation = void 0;
	const channel_credentials_1 = channelCredentials;
	const internal_channel_1 = requireInternalChannel();
	class ChannelImplementation {
	    constructor(target, credentials, options) {
	        if (typeof target !== 'string') {
	            throw new TypeError('Channel target must be a string');
	        }
	        if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {
	            throw new TypeError('Channel credentials must be a ChannelCredentials object');
	        }
	        if (options) {
	            if (typeof options !== 'object') {
	                throw new TypeError('Channel options must be an object');
	            }
	        }
	        this.internalChannel = new internal_channel_1.InternalChannel(target, credentials, options);
	    }
	    close() {
	        this.internalChannel.close();
	    }
	    getTarget() {
	        return this.internalChannel.getTarget();
	    }
	    getConnectivityState(tryToConnect) {
	        return this.internalChannel.getConnectivityState(tryToConnect);
	    }
	    watchConnectivityState(currentState, deadline, callback) {
	        this.internalChannel.watchConnectivityState(currentState, deadline, callback);
	    }
	    /**
	     * Get the channelz reference object for this channel. The returned value is
	     * garbage if channelz is disabled for this channel.
	     * @returns
	     */
	    getChannelzRef() {
	        return this.internalChannel.getChannelzRef();
	    }
	    createCall(method, deadline, host, parentCall, propagateFlags) {
	        if (typeof method !== 'string') {
	            throw new TypeError('Channel#createCall: method must be a string');
	        }
	        if (!(typeof deadline === 'number' || deadline instanceof Date)) {
	            throw new TypeError('Channel#createCall: deadline must be a number or Date');
	        }
	        return this.internalChannel.createCall(method, deadline, host, parentCall, propagateFlags);
	    }
	}
	channel.ChannelImplementation = ChannelImplementation;
	
	return channel;
}

var server = {};

var serverCall = {};

/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(serverCall, "__esModule", { value: true });
serverCall.ServerDuplexStreamImpl = serverCall.ServerWritableStreamImpl = serverCall.ServerReadableStreamImpl = serverCall.ServerUnaryCallImpl = void 0;
serverCall.serverErrorToStatus = serverErrorToStatus;
const events_1 = require$$0$4;
const stream_1 = require$$1$2;
const constants_1$1 = constants;
const metadata_1 = metadata;
function serverErrorToStatus(error, overrideTrailers) {
    var _a;
    const status = {
        code: constants_1$1.Status.UNKNOWN,
        details: 'message' in error ? error.message : 'Unknown Error',
        metadata: (_a = overrideTrailers !== null && overrideTrailers !== void 0 ? overrideTrailers : error.metadata) !== null && _a !== void 0 ? _a : null,
    };
    if ('code' in error &&
        typeof error.code === 'number' &&
        Number.isInteger(error.code)) {
        status.code = error.code;
        if ('details' in error && typeof error.details === 'string') {
            status.details = error.details;
        }
    }
    return status;
}
class ServerUnaryCallImpl extends events_1.EventEmitter {
    constructor(path, call, metadata, request) {
        super();
        this.path = path;
        this.call = call;
        this.metadata = metadata;
        this.request = request;
        this.cancelled = false;
    }
    getPeer() {
        return this.call.getPeer();
    }
    sendMetadata(responseMetadata) {
        this.call.sendMetadata(responseMetadata);
    }
    getDeadline() {
        return this.call.getDeadline();
    }
    getPath() {
        return this.path;
    }
    getHost() {
        return this.call.getHost();
    }
}
serverCall.ServerUnaryCallImpl = ServerUnaryCallImpl;
class ServerReadableStreamImpl extends stream_1.Readable {
    constructor(path, call, metadata) {
        super({ objectMode: true });
        this.path = path;
        this.call = call;
        this.metadata = metadata;
        this.cancelled = false;
    }
    _read(size) {
        this.call.startRead();
    }
    getPeer() {
        return this.call.getPeer();
    }
    sendMetadata(responseMetadata) {
        this.call.sendMetadata(responseMetadata);
    }
    getDeadline() {
        return this.call.getDeadline();
    }
    getPath() {
        return this.path;
    }
    getHost() {
        return this.call.getHost();
    }
}
serverCall.ServerReadableStreamImpl = ServerReadableStreamImpl;
class ServerWritableStreamImpl extends stream_1.Writable {
    constructor(path, call, metadata, request) {
        super({ objectMode: true });
        this.path = path;
        this.call = call;
        this.metadata = metadata;
        this.request = request;
        this.pendingStatus = {
            code: constants_1$1.Status.OK,
            details: 'OK',
        };
        this.cancelled = false;
        this.trailingMetadata = new metadata_1.Metadata();
        this.on('error', err => {
            this.pendingStatus = serverErrorToStatus(err);
            this.end();
        });
    }
    getPeer() {
        return this.call.getPeer();
    }
    sendMetadata(responseMetadata) {
        this.call.sendMetadata(responseMetadata);
    }
    getDeadline() {
        return this.call.getDeadline();
    }
    getPath() {
        return this.path;
    }
    getHost() {
        return this.call.getHost();
    }
    _write(chunk, encoding, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    callback) {
        this.call.sendMessage(chunk, callback);
    }
    _final(callback) {
        var _a;
        callback(null);
        this.call.sendStatus(Object.assign(Object.assign({}, this.pendingStatus), { metadata: (_a = this.pendingStatus.metadata) !== null && _a !== void 0 ? _a : this.trailingMetadata }));
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    end(metadata) {
        if (metadata) {
            this.trailingMetadata = metadata;
        }
        return super.end();
    }
}
serverCall.ServerWritableStreamImpl = ServerWritableStreamImpl;
class ServerDuplexStreamImpl extends stream_1.Duplex {
    constructor(path, call, metadata) {
        super({ objectMode: true });
        this.path = path;
        this.call = call;
        this.metadata = metadata;
        this.pendingStatus = {
            code: constants_1$1.Status.OK,
            details: 'OK',
        };
        this.cancelled = false;
        this.trailingMetadata = new metadata_1.Metadata();
        this.on('error', err => {
            this.pendingStatus = serverErrorToStatus(err);
            this.end();
        });
    }
    getPeer() {
        return this.call.getPeer();
    }
    sendMetadata(responseMetadata) {
        this.call.sendMetadata(responseMetadata);
    }
    getDeadline() {
        return this.call.getDeadline();
    }
    getPath() {
        return this.path;
    }
    getHost() {
        return this.call.getHost();
    }
    _read(size) {
        this.call.startRead();
    }
    _write(chunk, encoding, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    callback) {
        this.call.sendMessage(chunk, callback);
    }
    _final(callback) {
        var _a;
        callback(null);
        this.call.sendStatus(Object.assign(Object.assign({}, this.pendingStatus), { metadata: (_a = this.pendingStatus.metadata) !== null && _a !== void 0 ? _a : this.trailingMetadata }));
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    end(metadata) {
        if (metadata) {
            this.trailingMetadata = metadata;
        }
        return super.end();
    }
}
serverCall.ServerDuplexStreamImpl = ServerDuplexStreamImpl;

var serverCredentials = {};

/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(serverCredentials, "__esModule", { value: true });
serverCredentials.ServerCredentials = void 0;
serverCredentials.createCertificateProviderServerCredentials = createCertificateProviderServerCredentials;
serverCredentials.createServerCredentialsWithInterceptors = createServerCredentialsWithInterceptors;
const tls_helpers_1 = tlsHelpers;
class ServerCredentials {
    constructor(serverConstructorOptions, contextOptions) {
        this.serverConstructorOptions = serverConstructorOptions;
        this.watchers = new Set();
        this.latestContextOptions = null;
        this.latestContextOptions = contextOptions !== null && contextOptions !== void 0 ? contextOptions : null;
    }
    _addWatcher(watcher) {
        this.watchers.add(watcher);
    }
    _removeWatcher(watcher) {
        this.watchers.delete(watcher);
    }
    getWatcherCount() {
        return this.watchers.size;
    }
    updateSecureContextOptions(options) {
        this.latestContextOptions = options;
        for (const watcher of this.watchers) {
            watcher(this.latestContextOptions);
        }
    }
    _isSecure() {
        return this.serverConstructorOptions !== null;
    }
    _getSecureContextOptions() {
        return this.latestContextOptions;
    }
    _getConstructorOptions() {
        return this.serverConstructorOptions;
    }
    _getInterceptors() {
        return [];
    }
    static createInsecure() {
        return new InsecureServerCredentials();
    }
    static createSsl(rootCerts, keyCertPairs, checkClientCertificate = false) {
        var _a;
        if (rootCerts !== null && !Buffer.isBuffer(rootCerts)) {
            throw new TypeError('rootCerts must be null or a Buffer');
        }
        if (!Array.isArray(keyCertPairs)) {
            throw new TypeError('keyCertPairs must be an array');
        }
        if (typeof checkClientCertificate !== 'boolean') {
            throw new TypeError('checkClientCertificate must be a boolean');
        }
        const cert = [];
        const key = [];
        for (let i = 0; i < keyCertPairs.length; i++) {
            const pair = keyCertPairs[i];
            if (pair === null || typeof pair !== 'object') {
                throw new TypeError(`keyCertPair[${i}] must be an object`);
            }
            if (!Buffer.isBuffer(pair.private_key)) {
                throw new TypeError(`keyCertPair[${i}].private_key must be a Buffer`);
            }
            if (!Buffer.isBuffer(pair.cert_chain)) {
                throw new TypeError(`keyCertPair[${i}].cert_chain must be a Buffer`);
            }
            cert.push(pair.cert_chain);
            key.push(pair.private_key);
        }
        return new SecureServerCredentials({
            requestCert: checkClientCertificate,
            ciphers: tls_helpers_1.CIPHER_SUITES,
        }, {
            ca: (_a = rootCerts !== null && rootCerts !== void 0 ? rootCerts : (0, tls_helpers_1.getDefaultRootsData)()) !== null && _a !== void 0 ? _a : undefined,
            cert,
            key,
        });
    }
}
serverCredentials.ServerCredentials = ServerCredentials;
class InsecureServerCredentials extends ServerCredentials {
    constructor() {
        super(null);
    }
    _getSettings() {
        return null;
    }
    _equals(other) {
        return other instanceof InsecureServerCredentials;
    }
}
class SecureServerCredentials extends ServerCredentials {
    constructor(constructorOptions, contextOptions) {
        super(constructorOptions, contextOptions);
        this.options = Object.assign(Object.assign({}, constructorOptions), contextOptions);
    }
    /**
     * Checks equality by checking the options that are actually set by
     * createSsl.
     * @param other
     * @returns
     */
    _equals(other) {
        if (this === other) {
            return true;
        }
        if (!(other instanceof SecureServerCredentials)) {
            return false;
        }
        // options.ca equality check
        if (Buffer.isBuffer(this.options.ca) && Buffer.isBuffer(other.options.ca)) {
            if (!this.options.ca.equals(other.options.ca)) {
                return false;
            }
        }
        else {
            if (this.options.ca !== other.options.ca) {
                return false;
            }
        }
        // options.cert equality check
        if (Array.isArray(this.options.cert) && Array.isArray(other.options.cert)) {
            if (this.options.cert.length !== other.options.cert.length) {
                return false;
            }
            for (let i = 0; i < this.options.cert.length; i++) {
                const thisCert = this.options.cert[i];
                const otherCert = other.options.cert[i];
                if (Buffer.isBuffer(thisCert) && Buffer.isBuffer(otherCert)) {
                    if (!thisCert.equals(otherCert)) {
                        return false;
                    }
                }
                else {
                    if (thisCert !== otherCert) {
                        return false;
                    }
                }
            }
        }
        else {
            if (this.options.cert !== other.options.cert) {
                return false;
            }
        }
        // options.key equality check
        if (Array.isArray(this.options.key) && Array.isArray(other.options.key)) {
            if (this.options.key.length !== other.options.key.length) {
                return false;
            }
            for (let i = 0; i < this.options.key.length; i++) {
                const thisKey = this.options.key[i];
                const otherKey = other.options.key[i];
                if (Buffer.isBuffer(thisKey) && Buffer.isBuffer(otherKey)) {
                    if (!thisKey.equals(otherKey)) {
                        return false;
                    }
                }
                else {
                    if (thisKey !== otherKey) {
                        return false;
                    }
                }
            }
        }
        else {
            if (this.options.key !== other.options.key) {
                return false;
            }
        }
        // options.requestCert equality check
        if (this.options.requestCert !== other.options.requestCert) {
            return false;
        }
        /* ciphers is derived from a value that is constant for the process, so no
         * equality check is needed. */
        return true;
    }
}
class CertificateProviderServerCredentials extends ServerCredentials {
    constructor(identityCertificateProvider, caCertificateProvider, requireClientCertificate) {
        super({
            requestCert: caCertificateProvider !== null,
            rejectUnauthorized: requireClientCertificate,
            ciphers: tls_helpers_1.CIPHER_SUITES
        });
        this.identityCertificateProvider = identityCertificateProvider;
        this.caCertificateProvider = caCertificateProvider;
        this.requireClientCertificate = requireClientCertificate;
        this.latestCaUpdate = null;
        this.latestIdentityUpdate = null;
        this.caCertificateUpdateListener = this.handleCaCertificateUpdate.bind(this);
        this.identityCertificateUpdateListener = this.handleIdentityCertitificateUpdate.bind(this);
    }
    _addWatcher(watcher) {
        var _a;
        if (this.getWatcherCount() === 0) {
            (_a = this.caCertificateProvider) === null || _a === void 0 ? void 0 : _a.addCaCertificateListener(this.caCertificateUpdateListener);
            this.identityCertificateProvider.addIdentityCertificateListener(this.identityCertificateUpdateListener);
        }
        super._addWatcher(watcher);
    }
    _removeWatcher(watcher) {
        var _a;
        super._removeWatcher(watcher);
        if (this.getWatcherCount() === 0) {
            (_a = this.caCertificateProvider) === null || _a === void 0 ? void 0 : _a.removeCaCertificateListener(this.caCertificateUpdateListener);
            this.identityCertificateProvider.removeIdentityCertificateListener(this.identityCertificateUpdateListener);
        }
    }
    _equals(other) {
        if (this === other) {
            return true;
        }
        if (!(other instanceof CertificateProviderServerCredentials)) {
            return false;
        }
        return (this.caCertificateProvider === other.caCertificateProvider &&
            this.identityCertificateProvider === other.identityCertificateProvider &&
            this.requireClientCertificate === other.requireClientCertificate);
    }
    calculateSecureContextOptions() {
        var _a;
        if (this.latestIdentityUpdate === null) {
            return null;
        }
        if (this.caCertificateProvider !== null && this.latestCaUpdate === null) {
            return null;
        }
        return {
            ca: (_a = this.latestCaUpdate) === null || _a === void 0 ? void 0 : _a.caCertificate,
            cert: [this.latestIdentityUpdate.certificate],
            key: [this.latestIdentityUpdate.privateKey],
        };
    }
    finalizeUpdate() {
        const secureContextOptions = this.calculateSecureContextOptions();
        this.updateSecureContextOptions(secureContextOptions);
    }
    handleCaCertificateUpdate(update) {
        this.latestCaUpdate = update;
        this.finalizeUpdate();
    }
    handleIdentityCertitificateUpdate(update) {
        this.latestIdentityUpdate = update;
        this.finalizeUpdate();
    }
}
function createCertificateProviderServerCredentials(caCertificateProvider, identityCertificateProvider, requireClientCertificate) {
    return new CertificateProviderServerCredentials(caCertificateProvider, identityCertificateProvider, requireClientCertificate);
}
class InterceptorServerCredentials extends ServerCredentials {
    constructor(childCredentials, interceptors) {
        super({});
        this.childCredentials = childCredentials;
        this.interceptors = interceptors;
    }
    _isSecure() {
        return this.childCredentials._isSecure();
    }
    _equals(other) {
        if (!(other instanceof InterceptorServerCredentials)) {
            return false;
        }
        if (!(this.childCredentials._equals(other.childCredentials))) {
            return false;
        }
        if (this.interceptors.length !== other.interceptors.length) {
            return false;
        }
        for (let i = 0; i < this.interceptors.length; i++) {
            if (this.interceptors[i] !== other.interceptors[i]) {
                return false;
            }
        }
        return true;
    }
    _getInterceptors() {
        return this.interceptors;
    }
    _addWatcher(watcher) {
        this.childCredentials._addWatcher(watcher);
    }
    _removeWatcher(watcher) {
        this.childCredentials._removeWatcher(watcher);
    }
    _getConstructorOptions() {
        return this.childCredentials._getConstructorOptions();
    }
    _getSecureContextOptions() {
        return this.childCredentials._getSecureContextOptions();
    }
}
function createServerCredentialsWithInterceptors(credentials, interceptors) {
    return new InterceptorServerCredentials(credentials, interceptors);
}

var serverInterceptors = {};

var hasRequiredServerInterceptors;

function requireServerInterceptors () {
	if (hasRequiredServerInterceptors) return serverInterceptors;
	hasRequiredServerInterceptors = 1;
	/*
	 * Copyright 2024 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(serverInterceptors, "__esModule", { value: true });
	serverInterceptors.BaseServerInterceptingCall = serverInterceptors.ServerInterceptingCall = serverInterceptors.ResponderBuilder = serverInterceptors.ServerListenerBuilder = void 0;
	serverInterceptors.isInterceptingServerListener = isInterceptingServerListener;
	serverInterceptors.getServerInterceptingCall = getServerInterceptingCall;
	const metadata_1 = metadata;
	const constants_1 = constants;
	const http2 = require$$0$5;
	const error_1 = error;
	const zlib = require$$0$6;
	const stream_decoder_1 = requireStreamDecoder();
	const logging = logging$8;
	const TRACER_NAME = 'server_call';
	function trace(text) {
	    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
	}
	class ServerListenerBuilder {
	    constructor() {
	        this.metadata = undefined;
	        this.message = undefined;
	        this.halfClose = undefined;
	        this.cancel = undefined;
	    }
	    withOnReceiveMetadata(onReceiveMetadata) {
	        this.metadata = onReceiveMetadata;
	        return this;
	    }
	    withOnReceiveMessage(onReceiveMessage) {
	        this.message = onReceiveMessage;
	        return this;
	    }
	    withOnReceiveHalfClose(onReceiveHalfClose) {
	        this.halfClose = onReceiveHalfClose;
	        return this;
	    }
	    withOnCancel(onCancel) {
	        this.cancel = onCancel;
	        return this;
	    }
	    build() {
	        return {
	            onReceiveMetadata: this.metadata,
	            onReceiveMessage: this.message,
	            onReceiveHalfClose: this.halfClose,
	            onCancel: this.cancel,
	        };
	    }
	}
	serverInterceptors.ServerListenerBuilder = ServerListenerBuilder;
	function isInterceptingServerListener(listener) {
	    return (listener.onReceiveMetadata !== undefined &&
	        listener.onReceiveMetadata.length === 1);
	}
	class InterceptingServerListenerImpl {
	    constructor(listener, nextListener) {
	        this.listener = listener;
	        this.nextListener = nextListener;
	        /**
	         * Once the call is cancelled, ignore all other events.
	         */
	        this.cancelled = false;
	        this.processingMetadata = false;
	        this.hasPendingMessage = false;
	        this.pendingMessage = null;
	        this.processingMessage = false;
	        this.hasPendingHalfClose = false;
	    }
	    processPendingMessage() {
	        if (this.hasPendingMessage) {
	            this.nextListener.onReceiveMessage(this.pendingMessage);
	            this.pendingMessage = null;
	            this.hasPendingMessage = false;
	        }
	    }
	    processPendingHalfClose() {
	        if (this.hasPendingHalfClose) {
	            this.nextListener.onReceiveHalfClose();
	            this.hasPendingHalfClose = false;
	        }
	    }
	    onReceiveMetadata(metadata) {
	        if (this.cancelled) {
	            return;
	        }
	        this.processingMetadata = true;
	        this.listener.onReceiveMetadata(metadata, interceptedMetadata => {
	            this.processingMetadata = false;
	            if (this.cancelled) {
	                return;
	            }
	            this.nextListener.onReceiveMetadata(interceptedMetadata);
	            this.processPendingMessage();
	            this.processPendingHalfClose();
	        });
	    }
	    onReceiveMessage(message) {
	        if (this.cancelled) {
	            return;
	        }
	        this.processingMessage = true;
	        this.listener.onReceiveMessage(message, msg => {
	            this.processingMessage = false;
	            if (this.cancelled) {
	                return;
	            }
	            if (this.processingMetadata) {
	                this.pendingMessage = msg;
	                this.hasPendingMessage = true;
	            }
	            else {
	                this.nextListener.onReceiveMessage(msg);
	                this.processPendingHalfClose();
	            }
	        });
	    }
	    onReceiveHalfClose() {
	        if (this.cancelled) {
	            return;
	        }
	        this.listener.onReceiveHalfClose(() => {
	            if (this.cancelled) {
	                return;
	            }
	            if (this.processingMetadata || this.processingMessage) {
	                this.hasPendingHalfClose = true;
	            }
	            else {
	                this.nextListener.onReceiveHalfClose();
	            }
	        });
	    }
	    onCancel() {
	        this.cancelled = true;
	        this.listener.onCancel();
	        this.nextListener.onCancel();
	    }
	}
	class ResponderBuilder {
	    constructor() {
	        this.start = undefined;
	        this.metadata = undefined;
	        this.message = undefined;
	        this.status = undefined;
	    }
	    withStart(start) {
	        this.start = start;
	        return this;
	    }
	    withSendMetadata(sendMetadata) {
	        this.metadata = sendMetadata;
	        return this;
	    }
	    withSendMessage(sendMessage) {
	        this.message = sendMessage;
	        return this;
	    }
	    withSendStatus(sendStatus) {
	        this.status = sendStatus;
	        return this;
	    }
	    build() {
	        return {
	            start: this.start,
	            sendMetadata: this.metadata,
	            sendMessage: this.message,
	            sendStatus: this.status,
	        };
	    }
	}
	serverInterceptors.ResponderBuilder = ResponderBuilder;
	const defaultServerListener = {
	    onReceiveMetadata: (metadata, next) => {
	        next(metadata);
	    },
	    onReceiveMessage: (message, next) => {
	        next(message);
	    },
	    onReceiveHalfClose: next => {
	        next();
	    },
	    onCancel: () => { },
	};
	const defaultResponder = {
	    start: next => {
	        next();
	    },
	    sendMetadata: (metadata, next) => {
	        next(metadata);
	    },
	    sendMessage: (message, next) => {
	        next(message);
	    },
	    sendStatus: (status, next) => {
	        next(status);
	    },
	};
	class ServerInterceptingCall {
	    constructor(nextCall, responder) {
	        var _a, _b, _c, _d;
	        this.nextCall = nextCall;
	        this.processingMetadata = false;
	        this.sentMetadata = false;
	        this.processingMessage = false;
	        this.pendingMessage = null;
	        this.pendingMessageCallback = null;
	        this.pendingStatus = null;
	        this.responder = {
	            start: (_a = responder === null || responder === void 0 ? void 0 : responder.start) !== null && _a !== void 0 ? _a : defaultResponder.start,
	            sendMetadata: (_b = responder === null || responder === void 0 ? void 0 : responder.sendMetadata) !== null && _b !== void 0 ? _b : defaultResponder.sendMetadata,
	            sendMessage: (_c = responder === null || responder === void 0 ? void 0 : responder.sendMessage) !== null && _c !== void 0 ? _c : defaultResponder.sendMessage,
	            sendStatus: (_d = responder === null || responder === void 0 ? void 0 : responder.sendStatus) !== null && _d !== void 0 ? _d : defaultResponder.sendStatus,
	        };
	    }
	    processPendingMessage() {
	        if (this.pendingMessageCallback) {
	            this.nextCall.sendMessage(this.pendingMessage, this.pendingMessageCallback);
	            this.pendingMessage = null;
	            this.pendingMessageCallback = null;
	        }
	    }
	    processPendingStatus() {
	        if (this.pendingStatus) {
	            this.nextCall.sendStatus(this.pendingStatus);
	            this.pendingStatus = null;
	        }
	    }
	    start(listener) {
	        this.responder.start(interceptedListener => {
	            var _a, _b, _c, _d;
	            const fullInterceptedListener = {
	                onReceiveMetadata: (_a = interceptedListener === null || interceptedListener === void 0 ? void 0 : interceptedListener.onReceiveMetadata) !== null && _a !== void 0 ? _a : defaultServerListener.onReceiveMetadata,
	                onReceiveMessage: (_b = interceptedListener === null || interceptedListener === void 0 ? void 0 : interceptedListener.onReceiveMessage) !== null && _b !== void 0 ? _b : defaultServerListener.onReceiveMessage,
	                onReceiveHalfClose: (_c = interceptedListener === null || interceptedListener === void 0 ? void 0 : interceptedListener.onReceiveHalfClose) !== null && _c !== void 0 ? _c : defaultServerListener.onReceiveHalfClose,
	                onCancel: (_d = interceptedListener === null || interceptedListener === void 0 ? void 0 : interceptedListener.onCancel) !== null && _d !== void 0 ? _d : defaultServerListener.onCancel,
	            };
	            const finalInterceptingListener = new InterceptingServerListenerImpl(fullInterceptedListener, listener);
	            this.nextCall.start(finalInterceptingListener);
	        });
	    }
	    sendMetadata(metadata) {
	        this.processingMetadata = true;
	        this.sentMetadata = true;
	        this.responder.sendMetadata(metadata, interceptedMetadata => {
	            this.processingMetadata = false;
	            this.nextCall.sendMetadata(interceptedMetadata);
	            this.processPendingMessage();
	            this.processPendingStatus();
	        });
	    }
	    sendMessage(message, callback) {
	        this.processingMessage = true;
	        if (!this.sentMetadata) {
	            this.sendMetadata(new metadata_1.Metadata());
	        }
	        this.responder.sendMessage(message, interceptedMessage => {
	            this.processingMessage = false;
	            if (this.processingMetadata) {
	                this.pendingMessage = interceptedMessage;
	                this.pendingMessageCallback = callback;
	            }
	            else {
	                this.nextCall.sendMessage(interceptedMessage, callback);
	            }
	        });
	    }
	    sendStatus(status) {
	        this.responder.sendStatus(status, interceptedStatus => {
	            if (this.processingMetadata || this.processingMessage) {
	                this.pendingStatus = interceptedStatus;
	            }
	            else {
	                this.nextCall.sendStatus(interceptedStatus);
	            }
	        });
	    }
	    startRead() {
	        this.nextCall.startRead();
	    }
	    getPeer() {
	        return this.nextCall.getPeer();
	    }
	    getDeadline() {
	        return this.nextCall.getDeadline();
	    }
	    getHost() {
	        return this.nextCall.getHost();
	    }
	}
	serverInterceptors.ServerInterceptingCall = ServerInterceptingCall;
	const GRPC_ACCEPT_ENCODING_HEADER = 'grpc-accept-encoding';
	const GRPC_ENCODING_HEADER = 'grpc-encoding';
	const GRPC_MESSAGE_HEADER = 'grpc-message';
	const GRPC_STATUS_HEADER = 'grpc-status';
	const GRPC_TIMEOUT_HEADER = 'grpc-timeout';
	const DEADLINE_REGEX = /(\d{1,8})\s*([HMSmun])/;
	const deadlineUnitsToMs = {
	    H: 3600000,
	    M: 60000,
	    S: 1000,
	    m: 1,
	    u: 0.001,
	    n: 0.000001,
	};
	const defaultCompressionHeaders = {
	    // TODO(cjihrig): Remove these encoding headers from the default response
	    // once compression is integrated.
	    [GRPC_ACCEPT_ENCODING_HEADER]: 'identity,deflate,gzip',
	    [GRPC_ENCODING_HEADER]: 'identity',
	};
	const defaultResponseHeaders = {
	    [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_OK,
	    [http2.constants.HTTP2_HEADER_CONTENT_TYPE]: 'application/grpc+proto',
	};
	const defaultResponseOptions = {
	    waitForTrailers: true,
	};
	class BaseServerInterceptingCall {
	    constructor(stream, headers, callEventTracker, handler, options) {
	        var _a;
	        this.stream = stream;
	        this.callEventTracker = callEventTracker;
	        this.handler = handler;
	        this.listener = null;
	        this.deadlineTimer = null;
	        this.deadline = Infinity;
	        this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;
	        this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;
	        this.cancelled = false;
	        this.metadataSent = false;
	        this.wantTrailers = false;
	        this.cancelNotified = false;
	        this.incomingEncoding = 'identity';
	        this.readQueue = [];
	        this.isReadPending = false;
	        this.receivedHalfClose = false;
	        this.streamEnded = false;
	        this.stream.once('error', (err) => {
	            /* We need an error handler to avoid uncaught error event exceptions, but
	             * there is nothing we can reasonably do here. Any error event should
	             * have a corresponding close event, which handles emitting the cancelled
	             * event. And the stream is now in a bad state, so we can't reasonably
	             * expect to be able to send an error over it. */
	        });
	        this.stream.once('close', () => {
	            var _a;
	            trace('Request to method ' +
	                ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) +
	                ' stream closed with rstCode ' +
	                this.stream.rstCode);
	            if (this.callEventTracker && !this.streamEnded) {
	                this.streamEnded = true;
	                this.callEventTracker.onStreamEnd(false);
	                this.callEventTracker.onCallEnd({
	                    code: constants_1.Status.CANCELLED,
	                    details: 'Stream closed before sending status',
	                    metadata: null,
	                });
	            }
	            this.notifyOnCancel();
	        });
	        this.stream.on('data', (data) => {
	            this.handleDataFrame(data);
	        });
	        this.stream.pause();
	        this.stream.on('end', () => {
	            this.handleEndEvent();
	        });
	        if ('grpc.max_send_message_length' in options) {
	            this.maxSendMessageSize = options['grpc.max_send_message_length'];
	        }
	        if ('grpc.max_receive_message_length' in options) {
	            this.maxReceiveMessageSize = options['grpc.max_receive_message_length'];
	        }
	        this.host = (_a = headers[':authority']) !== null && _a !== void 0 ? _a : headers.host;
	        this.decoder = new stream_decoder_1.StreamDecoder(this.maxReceiveMessageSize);
	        const metadata = metadata_1.Metadata.fromHttp2Headers(headers);
	        if (logging.isTracerEnabled(TRACER_NAME)) {
	            trace('Request to ' +
	                this.handler.path +
	                ' received headers ' +
	                JSON.stringify(metadata.toJSON()));
	        }
	        const timeoutHeader = metadata.get(GRPC_TIMEOUT_HEADER);
	        if (timeoutHeader.length > 0) {
	            this.handleTimeoutHeader(timeoutHeader[0]);
	        }
	        const encodingHeader = metadata.get(GRPC_ENCODING_HEADER);
	        if (encodingHeader.length > 0) {
	            this.incomingEncoding = encodingHeader[0];
	        }
	        // Remove several headers that should not be propagated to the application
	        metadata.remove(GRPC_TIMEOUT_HEADER);
	        metadata.remove(GRPC_ENCODING_HEADER);
	        metadata.remove(GRPC_ACCEPT_ENCODING_HEADER);
	        metadata.remove(http2.constants.HTTP2_HEADER_ACCEPT_ENCODING);
	        metadata.remove(http2.constants.HTTP2_HEADER_TE);
	        metadata.remove(http2.constants.HTTP2_HEADER_CONTENT_TYPE);
	        this.metadata = metadata;
	    }
	    handleTimeoutHeader(timeoutHeader) {
	        const match = timeoutHeader.toString().match(DEADLINE_REGEX);
	        if (match === null) {
	            const status = {
	                code: constants_1.Status.INTERNAL,
	                details: `Invalid ${GRPC_TIMEOUT_HEADER} value "${timeoutHeader}"`,
	                metadata: null,
	            };
	            // Wait for the constructor to complete before sending the error.
	            process.nextTick(() => {
	                this.sendStatus(status);
	            });
	            return;
	        }
	        const timeout = (+match[1] * deadlineUnitsToMs[match[2]]) | 0;
	        const now = new Date();
	        this.deadline = now.setMilliseconds(now.getMilliseconds() + timeout);
	        this.deadlineTimer = setTimeout(() => {
	            const status = {
	                code: constants_1.Status.DEADLINE_EXCEEDED,
	                details: 'Deadline exceeded',
	                metadata: null,
	            };
	            this.sendStatus(status);
	        }, timeout);
	    }
	    checkCancelled() {
	        /* In some cases the stream can become destroyed before the close event
	         * fires. That creates a race condition that this check works around */
	        if (!this.cancelled && (this.stream.destroyed || this.stream.closed)) {
	            this.notifyOnCancel();
	            this.cancelled = true;
	        }
	        return this.cancelled;
	    }
	    notifyOnCancel() {
	        if (this.cancelNotified) {
	            return;
	        }
	        this.cancelNotified = true;
	        this.cancelled = true;
	        process.nextTick(() => {
	            var _a;
	            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onCancel();
	        });
	        if (this.deadlineTimer) {
	            clearTimeout(this.deadlineTimer);
	        }
	        // Flush incoming data frames
	        this.stream.resume();
	    }
	    /**
	     * A server handler can start sending messages without explicitly sending
	     * metadata. In that case, we need to send headers before sending any
	     * messages. This function does that if necessary.
	     */
	    maybeSendMetadata() {
	        if (!this.metadataSent) {
	            this.sendMetadata(new metadata_1.Metadata());
	        }
	    }
	    /**
	     * Serialize a message to a length-delimited byte string.
	     * @param value
	     * @returns
	     */
	    serializeMessage(value) {
	        const messageBuffer = this.handler.serialize(value);
	        const byteLength = messageBuffer.byteLength;
	        const output = Buffer.allocUnsafe(byteLength + 5);
	        /* Note: response compression is currently not supported, so this
	         * compressed bit is always 0. */
	        output.writeUInt8(0, 0);
	        output.writeUInt32BE(byteLength, 1);
	        messageBuffer.copy(output, 5);
	        return output;
	    }
	    decompressMessage(message, encoding) {
	        const messageContents = message.subarray(5);
	        if (encoding === 'identity') {
	            return messageContents;
	        }
	        else if (encoding === 'deflate' || encoding === 'gzip') {
	            let decompresser;
	            if (encoding === 'deflate') {
	                decompresser = zlib.createInflate();
	            }
	            else {
	                decompresser = zlib.createGunzip();
	            }
	            return new Promise((resolve, reject) => {
	                let totalLength = 0;
	                const messageParts = [];
	                decompresser.on('data', (chunk) => {
	                    messageParts.push(chunk);
	                    totalLength += chunk.byteLength;
	                    if (this.maxReceiveMessageSize !== -1 && totalLength > this.maxReceiveMessageSize) {
	                        decompresser.destroy();
	                        reject({
	                            code: constants_1.Status.RESOURCE_EXHAUSTED,
	                            details: `Received message that decompresses to a size larger than ${this.maxReceiveMessageSize}`
	                        });
	                    }
	                });
	                decompresser.on('end', () => {
	                    resolve(Buffer.concat(messageParts));
	                });
	                decompresser.write(messageContents);
	                decompresser.end();
	            });
	        }
	        else {
	            return Promise.reject({
	                code: constants_1.Status.UNIMPLEMENTED,
	                details: `Received message compressed with unsupported encoding "${encoding}"`,
	            });
	        }
	    }
	    async decompressAndMaybePush(queueEntry) {
	        if (queueEntry.type !== 'COMPRESSED') {
	            throw new Error(`Invalid queue entry type: ${queueEntry.type}`);
	        }
	        const compressed = queueEntry.compressedMessage.readUInt8(0) === 1;
	        const compressedMessageEncoding = compressed
	            ? this.incomingEncoding
	            : 'identity';
	        let decompressedMessage;
	        try {
	            decompressedMessage = await this.decompressMessage(queueEntry.compressedMessage, compressedMessageEncoding);
	        }
	        catch (err) {
	            this.sendStatus(err);
	            return;
	        }
	        try {
	            queueEntry.parsedMessage = this.handler.deserialize(decompressedMessage);
	        }
	        catch (err) {
	            this.sendStatus({
	                code: constants_1.Status.INTERNAL,
	                details: `Error deserializing request: ${err.message}`,
	            });
	            return;
	        }
	        queueEntry.type = 'READABLE';
	        this.maybePushNextMessage();
	    }
	    maybePushNextMessage() {
	        if (this.listener &&
	            this.isReadPending &&
	            this.readQueue.length > 0 &&
	            this.readQueue[0].type !== 'COMPRESSED') {
	            this.isReadPending = false;
	            const nextQueueEntry = this.readQueue.shift();
	            if (nextQueueEntry.type === 'READABLE') {
	                this.listener.onReceiveMessage(nextQueueEntry.parsedMessage);
	            }
	            else {
	                // nextQueueEntry.type === 'HALF_CLOSE'
	                this.listener.onReceiveHalfClose();
	            }
	        }
	    }
	    handleDataFrame(data) {
	        var _a;
	        if (this.checkCancelled()) {
	            return;
	        }
	        trace('Request to ' +
	            this.handler.path +
	            ' received data frame of size ' +
	            data.length);
	        let rawMessages;
	        try {
	            rawMessages = this.decoder.write(data);
	        }
	        catch (e) {
	            this.sendStatus({ code: constants_1.Status.RESOURCE_EXHAUSTED, details: e.message });
	            return;
	        }
	        for (const messageBytes of rawMessages) {
	            this.stream.pause();
	            const queueEntry = {
	                type: 'COMPRESSED',
	                compressedMessage: messageBytes,
	                parsedMessage: null,
	            };
	            this.readQueue.push(queueEntry);
	            this.decompressAndMaybePush(queueEntry);
	            (_a = this.callEventTracker) === null || _a === void 0 ? void 0 : _a.addMessageReceived();
	        }
	    }
	    handleEndEvent() {
	        this.readQueue.push({
	            type: 'HALF_CLOSE',
	            compressedMessage: null,
	            parsedMessage: null,
	        });
	        this.receivedHalfClose = true;
	        this.maybePushNextMessage();
	    }
	    start(listener) {
	        trace('Request to ' + this.handler.path + ' start called');
	        if (this.checkCancelled()) {
	            return;
	        }
	        this.listener = listener;
	        listener.onReceiveMetadata(this.metadata);
	    }
	    sendMetadata(metadata) {
	        if (this.checkCancelled()) {
	            return;
	        }
	        if (this.metadataSent) {
	            return;
	        }
	        this.metadataSent = true;
	        const custom = metadata ? metadata.toHttp2Headers() : null;
	        const headers = Object.assign(Object.assign(Object.assign({}, defaultResponseHeaders), defaultCompressionHeaders), custom);
	        this.stream.respond(headers, defaultResponseOptions);
	    }
	    sendMessage(message, callback) {
	        if (this.checkCancelled()) {
	            return;
	        }
	        let response;
	        try {
	            response = this.serializeMessage(message);
	        }
	        catch (e) {
	            this.sendStatus({
	                code: constants_1.Status.INTERNAL,
	                details: `Error serializing response: ${(0, error_1.getErrorMessage)(e)}`,
	                metadata: null,
	            });
	            return;
	        }
	        if (this.maxSendMessageSize !== -1 &&
	            response.length - 5 > this.maxSendMessageSize) {
	            this.sendStatus({
	                code: constants_1.Status.RESOURCE_EXHAUSTED,
	                details: `Sent message larger than max (${response.length} vs. ${this.maxSendMessageSize})`,
	                metadata: null,
	            });
	            return;
	        }
	        this.maybeSendMetadata();
	        trace('Request to ' +
	            this.handler.path +
	            ' sent data frame of size ' +
	            response.length);
	        this.stream.write(response, error => {
	            var _a;
	            if (error) {
	                this.sendStatus({
	                    code: constants_1.Status.INTERNAL,
	                    details: `Error writing message: ${(0, error_1.getErrorMessage)(error)}`,
	                    metadata: null,
	                });
	                return;
	            }
	            (_a = this.callEventTracker) === null || _a === void 0 ? void 0 : _a.addMessageSent();
	            callback();
	        });
	    }
	    sendStatus(status) {
	        var _a, _b;
	        if (this.checkCancelled()) {
	            return;
	        }
	        trace('Request to method ' +
	            ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) +
	            ' ended with status code: ' +
	            constants_1.Status[status.code] +
	            ' details: ' +
	            status.details);
	        if (this.metadataSent) {
	            if (!this.wantTrailers) {
	                this.wantTrailers = true;
	                this.stream.once('wantTrailers', () => {
	                    var _a;
	                    if (this.callEventTracker && !this.streamEnded) {
	                        this.streamEnded = true;
	                        this.callEventTracker.onStreamEnd(true);
	                        this.callEventTracker.onCallEnd(status);
	                    }
	                    const trailersToSend = Object.assign({ [GRPC_STATUS_HEADER]: status.code, [GRPC_MESSAGE_HEADER]: encodeURI(status.details) }, (_a = status.metadata) === null || _a === void 0 ? void 0 : _a.toHttp2Headers());
	                    this.stream.sendTrailers(trailersToSend);
	                    this.notifyOnCancel();
	                });
	                this.stream.end();
	            }
	            else {
	                this.notifyOnCancel();
	            }
	        }
	        else {
	            if (this.callEventTracker && !this.streamEnded) {
	                this.streamEnded = true;
	                this.callEventTracker.onStreamEnd(true);
	                this.callEventTracker.onCallEnd(status);
	            }
	            // Trailers-only response
	            const trailersToSend = Object.assign(Object.assign({ [GRPC_STATUS_HEADER]: status.code, [GRPC_MESSAGE_HEADER]: encodeURI(status.details) }, defaultResponseHeaders), (_b = status.metadata) === null || _b === void 0 ? void 0 : _b.toHttp2Headers());
	            this.stream.respond(trailersToSend, { endStream: true });
	            this.notifyOnCancel();
	        }
	    }
	    startRead() {
	        trace('Request to ' + this.handler.path + ' startRead called');
	        if (this.checkCancelled()) {
	            return;
	        }
	        this.isReadPending = true;
	        if (this.readQueue.length === 0) {
	            if (!this.receivedHalfClose) {
	                this.stream.resume();
	            }
	        }
	        else {
	            this.maybePushNextMessage();
	        }
	    }
	    getPeer() {
	        var _a;
	        const socket = (_a = this.stream.session) === null || _a === void 0 ? void 0 : _a.socket;
	        if (socket === null || socket === void 0 ? void 0 : socket.remoteAddress) {
	            if (socket.remotePort) {
	                return `${socket.remoteAddress}:${socket.remotePort}`;
	            }
	            else {
	                return socket.remoteAddress;
	            }
	        }
	        else {
	            return 'unknown';
	        }
	    }
	    getDeadline() {
	        return this.deadline;
	    }
	    getHost() {
	        return this.host;
	    }
	}
	serverInterceptors.BaseServerInterceptingCall = BaseServerInterceptingCall;
	function getServerInterceptingCall(interceptors, stream, headers, callEventTracker, handler, options) {
	    const methodDefinition = {
	        path: handler.path,
	        requestStream: handler.type === 'clientStream' || handler.type === 'bidi',
	        responseStream: handler.type === 'serverStream' || handler.type === 'bidi',
	        requestDeserialize: handler.deserialize,
	        responseSerialize: handler.serialize,
	    };
	    const baseCall = new BaseServerInterceptingCall(stream, headers, callEventTracker, handler, options);
	    return interceptors.reduce((call, interceptor) => {
	        return interceptor(methodDefinition, call);
	    }, baseCall);
	}
	
	return serverInterceptors;
}

/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
var __runInitializers = (commonjsGlobal && commonjsGlobal.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (commonjsGlobal && commonjsGlobal.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
Object.defineProperty(server, "__esModule", { value: true });
server.Server = void 0;
const http2 = require$$0$5;
const util = require$$1$5;
const constants_1 = constants;
const server_call_1 = serverCall;
const server_credentials_1 = serverCredentials;
const resolver_1 = resolver;
const logging = logging$8;
const subchannel_address_1 = subchannelAddress;
const uri_parser_1 = uriParser;
const channelz_1 = requireChannelz();
const server_interceptors_1 = requireServerInterceptors();
const UNLIMITED_CONNECTION_AGE_MS = ~(1 << 31);
const KEEPALIVE_MAX_TIME_MS = ~(1 << 31);
const KEEPALIVE_TIMEOUT_MS = 20000;
const MAX_CONNECTION_IDLE_MS = ~(1 << 31);
const { HTTP2_HEADER_PATH } = http2.constants;
const TRACER_NAME = 'server';
const kMaxAge = Buffer.from('max_age');
function serverCallTrace(text) {
    logging.trace(constants_1.LogVerbosity.DEBUG, 'server_call', text);
}
function noop() { }
/**
 * Decorator to wrap a class method with util.deprecate
 * @param message The message to output if the deprecated method is called
 * @returns
 */
function deprecate(message) {
    return function (target, context) {
        return util.deprecate(target, message);
    };
}
function getUnimplementedStatusResponse(methodName) {
    return {
        code: constants_1.Status.UNIMPLEMENTED,
        details: `The server does not implement the method ${methodName}`,
    };
}
function getDefaultHandler(handlerType, methodName) {
    const unimplementedStatusResponse = getUnimplementedStatusResponse(methodName);
    switch (handlerType) {
        case 'unary':
            return (call, callback) => {
                callback(unimplementedStatusResponse, null);
            };
        case 'clientStream':
            return (call, callback) => {
                callback(unimplementedStatusResponse, null);
            };
        case 'serverStream':
            return (call) => {
                call.emit('error', unimplementedStatusResponse);
            };
        case 'bidi':
            return (call) => {
                call.emit('error', unimplementedStatusResponse);
            };
        default:
            throw new Error(`Invalid handlerType ${handlerType}`);
    }
}
let Server = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _start_decorators;
    return _a = class Server {
            constructor(options) {
                var _b, _c, _d, _e, _f, _g;
                this.boundPorts = (__runInitializers(this, _instanceExtraInitializers), new Map());
                this.http2Servers = new Map();
                this.sessionIdleTimeouts = new Map();
                this.handlers = new Map();
                this.sessions = new Map();
                /**
                 * This field only exists to ensure that the start method throws an error if
                 * it is called twice, as it did previously.
                 */
                this.started = false;
                this.shutdown = false;
                this.serverAddressString = 'null';
                // Channelz Info
                this.channelzEnabled = true;
                this.options = options !== null && options !== void 0 ? options : {};
                if (this.options['grpc.enable_channelz'] === 0) {
                    this.channelzEnabled = false;
                    this.channelzTrace = new channelz_1.ChannelzTraceStub();
                    this.callTracker = new channelz_1.ChannelzCallTrackerStub();
                    this.listenerChildrenTracker = new channelz_1.ChannelzChildrenTrackerStub();
                    this.sessionChildrenTracker = new channelz_1.ChannelzChildrenTrackerStub();
                }
                else {
                    this.channelzTrace = new channelz_1.ChannelzTrace();
                    this.callTracker = new channelz_1.ChannelzCallTracker();
                    this.listenerChildrenTracker = new channelz_1.ChannelzChildrenTracker();
                    this.sessionChildrenTracker = new channelz_1.ChannelzChildrenTracker();
                }
                this.channelzRef = (0, channelz_1.registerChannelzServer)('server', () => this.getChannelzInfo(), this.channelzEnabled);
                this.channelzTrace.addTrace('CT_INFO', 'Server created');
                this.maxConnectionAgeMs =
                    (_b = this.options['grpc.max_connection_age_ms']) !== null && _b !== void 0 ? _b : UNLIMITED_CONNECTION_AGE_MS;
                this.maxConnectionAgeGraceMs =
                    (_c = this.options['grpc.max_connection_age_grace_ms']) !== null && _c !== void 0 ? _c : UNLIMITED_CONNECTION_AGE_MS;
                this.keepaliveTimeMs =
                    (_d = this.options['grpc.keepalive_time_ms']) !== null && _d !== void 0 ? _d : KEEPALIVE_MAX_TIME_MS;
                this.keepaliveTimeoutMs =
                    (_e = this.options['grpc.keepalive_timeout_ms']) !== null && _e !== void 0 ? _e : KEEPALIVE_TIMEOUT_MS;
                this.sessionIdleTimeout =
                    (_f = this.options['grpc.max_connection_idle_ms']) !== null && _f !== void 0 ? _f : MAX_CONNECTION_IDLE_MS;
                this.commonServerOptions = {
                    maxSendHeaderBlockLength: Number.MAX_SAFE_INTEGER,
                };
                if ('grpc-node.max_session_memory' in this.options) {
                    this.commonServerOptions.maxSessionMemory =
                        this.options['grpc-node.max_session_memory'];
                }
                else {
                    /* By default, set a very large max session memory limit, to effectively
                     * disable enforcement of the limit. Some testing indicates that Node's
                     * behavior degrades badly when this limit is reached, so we solve that
                     * by disabling the check entirely. */
                    this.commonServerOptions.maxSessionMemory = Number.MAX_SAFE_INTEGER;
                }
                if ('grpc.max_concurrent_streams' in this.options) {
                    this.commonServerOptions.settings = {
                        maxConcurrentStreams: this.options['grpc.max_concurrent_streams'],
                    };
                }
                this.interceptors = (_g = this.options.interceptors) !== null && _g !== void 0 ? _g : [];
                this.trace('Server constructed');
            }
            getChannelzInfo() {
                return {
                    trace: this.channelzTrace,
                    callTracker: this.callTracker,
                    listenerChildren: this.listenerChildrenTracker.getChildLists(),
                    sessionChildren: this.sessionChildrenTracker.getChildLists(),
                };
            }
            getChannelzSessionInfo(session) {
                var _b, _c, _d;
                const sessionInfo = this.sessions.get(session);
                const sessionSocket = session.socket;
                const remoteAddress = sessionSocket.remoteAddress
                    ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.remoteAddress, sessionSocket.remotePort)
                    : null;
                const localAddress = sessionSocket.localAddress
                    ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.localAddress, sessionSocket.localPort)
                    : null;
                let tlsInfo;
                if (session.encrypted) {
                    const tlsSocket = sessionSocket;
                    const cipherInfo = tlsSocket.getCipher();
                    const certificate = tlsSocket.getCertificate();
                    const peerCertificate = tlsSocket.getPeerCertificate();
                    tlsInfo = {
                        cipherSuiteStandardName: (_b = cipherInfo.standardName) !== null && _b !== void 0 ? _b : null,
                        cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,
                        localCertificate: certificate && 'raw' in certificate ? certificate.raw : null,
                        remoteCertificate: peerCertificate && 'raw' in peerCertificate
                            ? peerCertificate.raw
                            : null,
                    };
                }
                else {
                    tlsInfo = null;
                }
                const socketInfo = {
                    remoteAddress: remoteAddress,
                    localAddress: localAddress,
                    security: tlsInfo,
                    remoteName: null,
                    streamsStarted: sessionInfo.streamTracker.callsStarted,
                    streamsSucceeded: sessionInfo.streamTracker.callsSucceeded,
                    streamsFailed: sessionInfo.streamTracker.callsFailed,
                    messagesSent: sessionInfo.messagesSent,
                    messagesReceived: sessionInfo.messagesReceived,
                    keepAlivesSent: sessionInfo.keepAlivesSent,
                    lastLocalStreamCreatedTimestamp: null,
                    lastRemoteStreamCreatedTimestamp: sessionInfo.streamTracker.lastCallStartedTimestamp,
                    lastMessageSentTimestamp: sessionInfo.lastMessageSentTimestamp,
                    lastMessageReceivedTimestamp: sessionInfo.lastMessageReceivedTimestamp,
                    localFlowControlWindow: (_c = session.state.localWindowSize) !== null && _c !== void 0 ? _c : null,
                    remoteFlowControlWindow: (_d = session.state.remoteWindowSize) !== null && _d !== void 0 ? _d : null,
                };
                return socketInfo;
            }
            trace(text) {
                logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '(' + this.channelzRef.id + ') ' + text);
            }
            keepaliveTrace(text) {
                logging.trace(constants_1.LogVerbosity.DEBUG, 'keepalive', '(' + this.channelzRef.id + ') ' + text);
            }
            addProtoService() {
                throw new Error('Not implemented. Use addService() instead');
            }
            addService(service, implementation) {
                if (service === null ||
                    typeof service !== 'object' ||
                    implementation === null ||
                    typeof implementation !== 'object') {
                    throw new Error('addService() requires two objects as arguments');
                }
                const serviceKeys = Object.keys(service);
                if (serviceKeys.length === 0) {
                    throw new Error('Cannot add an empty service to a server');
                }
                serviceKeys.forEach(name => {
                    const attrs = service[name];
                    let methodType;
                    if (attrs.requestStream) {
                        if (attrs.responseStream) {
                            methodType = 'bidi';
                        }
                        else {
                            methodType = 'clientStream';
                        }
                    }
                    else {
                        if (attrs.responseStream) {
                            methodType = 'serverStream';
                        }
                        else {
                            methodType = 'unary';
                        }
                    }
                    let implFn = implementation[name];
                    let impl;
                    if (implFn === undefined && typeof attrs.originalName === 'string') {
                        implFn = implementation[attrs.originalName];
                    }
                    if (implFn !== undefined) {
                        impl = implFn.bind(implementation);
                    }
                    else {
                        impl = getDefaultHandler(methodType, name);
                    }
                    const success = this.register(attrs.path, impl, attrs.responseSerialize, attrs.requestDeserialize, methodType);
                    if (success === false) {
                        throw new Error(`Method handler for ${attrs.path} already provided.`);
                    }
                });
            }
            removeService(service) {
                if (service === null || typeof service !== 'object') {
                    throw new Error('removeService() requires object as argument');
                }
                const serviceKeys = Object.keys(service);
                serviceKeys.forEach(name => {
                    const attrs = service[name];
                    this.unregister(attrs.path);
                });
            }
            bind(port, creds) {
                throw new Error('Not implemented. Use bindAsync() instead');
            }
            /**
             * This API is experimental, so API stability is not guaranteed across minor versions.
             * @param boundAddress
             * @returns
             */
            experimentalRegisterListenerToChannelz(boundAddress) {
                return (0, channelz_1.registerChannelzSocket)((0, subchannel_address_1.subchannelAddressToString)(boundAddress), () => {
                    return {
                        localAddress: boundAddress,
                        remoteAddress: null,
                        security: null,
                        remoteName: null,
                        streamsStarted: 0,
                        streamsSucceeded: 0,
                        streamsFailed: 0,
                        messagesSent: 0,
                        messagesReceived: 0,
                        keepAlivesSent: 0,
                        lastLocalStreamCreatedTimestamp: null,
                        lastRemoteStreamCreatedTimestamp: null,
                        lastMessageSentTimestamp: null,
                        lastMessageReceivedTimestamp: null,
                        localFlowControlWindow: null,
                        remoteFlowControlWindow: null,
                    };
                }, this.channelzEnabled);
            }
            experimentalUnregisterListenerFromChannelz(channelzRef) {
                (0, channelz_1.unregisterChannelzRef)(channelzRef);
            }
            createHttp2Server(credentials) {
                let http2Server;
                if (credentials._isSecure()) {
                    const constructorOptions = credentials._getConstructorOptions();
                    const contextOptions = credentials._getSecureContextOptions();
                    const secureServerOptions = Object.assign(Object.assign(Object.assign(Object.assign({}, this.commonServerOptions), constructorOptions), contextOptions), { enableTrace: this.options['grpc-node.tls_enable_trace'] === 1 });
                    let areCredentialsValid = contextOptions !== null;
                    this.trace('Initial credentials valid: ' + areCredentialsValid);
                    http2Server = http2.createSecureServer(secureServerOptions);
                    http2Server.prependListener('connection', (socket) => {
                        if (!areCredentialsValid) {
                            this.trace('Dropped connection from ' + JSON.stringify(socket.address()) + ' due to unloaded credentials');
                            socket.destroy();
                        }
                    });
                    http2Server.on('secureConnection', (socket) => {
                        /* These errors need to be handled by the user of Http2SecureServer,
                         * according to https://github.com/nodejs/node/issues/35824 */
                        socket.on('error', (e) => {
                            this.trace('An incoming TLS connection closed with error: ' + e.message);
                        });
                    });
                    const credsWatcher = options => {
                        if (options) {
                            const secureServer = http2Server;
                            try {
                                secureServer.setSecureContext(options);
                            }
                            catch (e) {
                                logging.log(constants_1.LogVerbosity.ERROR, 'Failed to set secure context with error ' + e.message);
                                options = null;
                            }
                        }
                        areCredentialsValid = options !== null;
                        this.trace('Post-update credentials valid: ' + areCredentialsValid);
                    };
                    credentials._addWatcher(credsWatcher);
                    http2Server.on('close', () => {
                        credentials._removeWatcher(credsWatcher);
                    });
                }
                else {
                    http2Server = http2.createServer(this.commonServerOptions);
                }
                http2Server.setTimeout(0, noop);
                this._setupHandlers(http2Server, credentials._getInterceptors());
                return http2Server;
            }
            bindOneAddress(address, boundPortObject) {
                this.trace('Attempting to bind ' + (0, subchannel_address_1.subchannelAddressToString)(address));
                const http2Server = this.createHttp2Server(boundPortObject.credentials);
                return new Promise((resolve, reject) => {
                    const onError = (err) => {
                        this.trace('Failed to bind ' +
                            (0, subchannel_address_1.subchannelAddressToString)(address) +
                            ' with error ' +
                            err.message);
                        resolve({
                            port: 'port' in address ? address.port : 1,
                            error: err.message,
                        });
                    };
                    http2Server.once('error', onError);
                    http2Server.listen(address, () => {
                        const boundAddress = http2Server.address();
                        let boundSubchannelAddress;
                        if (typeof boundAddress === 'string') {
                            boundSubchannelAddress = {
                                path: boundAddress,
                            };
                        }
                        else {
                            boundSubchannelAddress = {
                                host: boundAddress.address,
                                port: boundAddress.port,
                            };
                        }
                        const channelzRef = this.experimentalRegisterListenerToChannelz(boundSubchannelAddress);
                        this.listenerChildrenTracker.refChild(channelzRef);
                        this.http2Servers.set(http2Server, {
                            channelzRef: channelzRef,
                            sessions: new Set(),
                            ownsChannelzRef: true
                        });
                        boundPortObject.listeningServers.add(http2Server);
                        this.trace('Successfully bound ' +
                            (0, subchannel_address_1.subchannelAddressToString)(boundSubchannelAddress));
                        resolve({
                            port: 'port' in boundSubchannelAddress ? boundSubchannelAddress.port : 1,
                        });
                        http2Server.removeListener('error', onError);
                    });
                });
            }
            async bindManyPorts(addressList, boundPortObject) {
                if (addressList.length === 0) {
                    return {
                        count: 0,
                        port: 0,
                        errors: [],
                    };
                }
                if ((0, subchannel_address_1.isTcpSubchannelAddress)(addressList[0]) && addressList[0].port === 0) {
                    /* If binding to port 0, first try to bind the first address, then bind
                     * the rest of the address list to the specific port that it binds. */
                    const firstAddressResult = await this.bindOneAddress(addressList[0], boundPortObject);
                    if (firstAddressResult.error) {
                        /* If the first address fails to bind, try the same operation starting
                         * from the second item in the list. */
                        const restAddressResult = await this.bindManyPorts(addressList.slice(1), boundPortObject);
                        return Object.assign(Object.assign({}, restAddressResult), { errors: [firstAddressResult.error, ...restAddressResult.errors] });
                    }
                    else {
                        const restAddresses = addressList
                            .slice(1)
                            .map(address => (0, subchannel_address_1.isTcpSubchannelAddress)(address)
                            ? { host: address.host, port: firstAddressResult.port }
                            : address);
                        const restAddressResult = await Promise.all(restAddresses.map(address => this.bindOneAddress(address, boundPortObject)));
                        const allResults = [firstAddressResult, ...restAddressResult];
                        return {
                            count: allResults.filter(result => result.error === undefined).length,
                            port: firstAddressResult.port,
                            errors: allResults
                                .filter(result => result.error)
                                .map(result => result.error),
                        };
                    }
                }
                else {
                    const allResults = await Promise.all(addressList.map(address => this.bindOneAddress(address, boundPortObject)));
                    return {
                        count: allResults.filter(result => result.error === undefined).length,
                        port: allResults[0].port,
                        errors: allResults
                            .filter(result => result.error)
                            .map(result => result.error),
                    };
                }
            }
            async bindAddressList(addressList, boundPortObject) {
                const bindResult = await this.bindManyPorts(addressList, boundPortObject);
                if (bindResult.count > 0) {
                    if (bindResult.count < addressList.length) {
                        logging.log(constants_1.LogVerbosity.INFO, `WARNING Only ${bindResult.count} addresses added out of total ${addressList.length} resolved`);
                    }
                    return bindResult.port;
                }
                else {
                    const errorString = `No address added out of total ${addressList.length} resolved`;
                    logging.log(constants_1.LogVerbosity.ERROR, errorString);
                    throw new Error(`${errorString} errors: [${bindResult.errors.join(',')}]`);
                }
            }
            resolvePort(port) {
                return new Promise((resolve, reject) => {
                    const resolverListener = {
                        onSuccessfulResolution: (endpointList, serviceConfig, serviceConfigError) => {
                            // We only want one resolution result. Discard all future results
                            resolverListener.onSuccessfulResolution = () => { };
                            const addressList = [].concat(...endpointList.map(endpoint => endpoint.addresses));
                            if (addressList.length === 0) {
                                reject(new Error(`No addresses resolved for port ${port}`));
                                return;
                            }
                            resolve(addressList);
                        },
                        onError: error => {
                            reject(new Error(error.details));
                        },
                    };
                    const resolver = (0, resolver_1.createResolver)(port, resolverListener, this.options);
                    resolver.updateResolution();
                });
            }
            async bindPort(port, boundPortObject) {
                const addressList = await this.resolvePort(port);
                if (boundPortObject.cancelled) {
                    this.completeUnbind(boundPortObject);
                    throw new Error('bindAsync operation cancelled by unbind call');
                }
                const portNumber = await this.bindAddressList(addressList, boundPortObject);
                if (boundPortObject.cancelled) {
                    this.completeUnbind(boundPortObject);
                    throw new Error('bindAsync operation cancelled by unbind call');
                }
                return portNumber;
            }
            normalizePort(port) {
                const initialPortUri = (0, uri_parser_1.parseUri)(port);
                if (initialPortUri === null) {
                    throw new Error(`Could not parse port "${port}"`);
                }
                const portUri = (0, resolver_1.mapUriDefaultScheme)(initialPortUri);
                if (portUri === null) {
                    throw new Error(`Could not get a default scheme for port "${port}"`);
                }
                return portUri;
            }
            bindAsync(port, creds, callback) {
                if (this.shutdown) {
                    throw new Error('bindAsync called after shutdown');
                }
                if (typeof port !== 'string') {
                    throw new TypeError('port must be a string');
                }
                if (creds === null || !(creds instanceof server_credentials_1.ServerCredentials)) {
                    throw new TypeError('creds must be a ServerCredentials object');
                }
                if (typeof callback !== 'function') {
                    throw new TypeError('callback must be a function');
                }
                this.trace('bindAsync port=' + port);
                const portUri = this.normalizePort(port);
                const deferredCallback = (error, port) => {
                    process.nextTick(() => callback(error, port));
                };
                /* First, if this port is already bound or that bind operation is in
                 * progress, use that result. */
                let boundPortObject = this.boundPorts.get((0, uri_parser_1.uriToString)(portUri));
                if (boundPortObject) {
                    if (!creds._equals(boundPortObject.credentials)) {
                        deferredCallback(new Error(`${port} already bound with incompatible credentials`), 0);
                        return;
                    }
                    /* If that operation has previously been cancelled by an unbind call,
                     * uncancel it. */
                    boundPortObject.cancelled = false;
                    if (boundPortObject.completionPromise) {
                        boundPortObject.completionPromise.then(portNum => callback(null, portNum), error => callback(error, 0));
                    }
                    else {
                        deferredCallback(null, boundPortObject.portNumber);
                    }
                    return;
                }
                boundPortObject = {
                    mapKey: (0, uri_parser_1.uriToString)(portUri),
                    originalUri: portUri,
                    completionPromise: null,
                    cancelled: false,
                    portNumber: 0,
                    credentials: creds,
                    listeningServers: new Set(),
                };
                const splitPort = (0, uri_parser_1.splitHostPort)(portUri.path);
                const completionPromise = this.bindPort(portUri, boundPortObject);
                boundPortObject.completionPromise = completionPromise;
                /* If the port number is 0, defer populating the map entry until after the
                 * bind operation completes and we have a specific port number. Otherwise,
                 * populate it immediately. */
                if ((splitPort === null || splitPort === void 0 ? void 0 : splitPort.port) === 0) {
                    completionPromise.then(portNum => {
                        const finalUri = {
                            scheme: portUri.scheme,
                            authority: portUri.authority,
                            path: (0, uri_parser_1.combineHostPort)({ host: splitPort.host, port: portNum }),
                        };
                        boundPortObject.mapKey = (0, uri_parser_1.uriToString)(finalUri);
                        boundPortObject.completionPromise = null;
                        boundPortObject.portNumber = portNum;
                        this.boundPorts.set(boundPortObject.mapKey, boundPortObject);
                        callback(null, portNum);
                    }, error => {
                        callback(error, 0);
                    });
                }
                else {
                    this.boundPorts.set(boundPortObject.mapKey, boundPortObject);
                    completionPromise.then(portNum => {
                        boundPortObject.completionPromise = null;
                        boundPortObject.portNumber = portNum;
                        callback(null, portNum);
                    }, error => {
                        callback(error, 0);
                    });
                }
            }
            registerInjectorToChannelz() {
                return (0, channelz_1.registerChannelzSocket)('injector', () => {
                    return {
                        localAddress: null,
                        remoteAddress: null,
                        security: null,
                        remoteName: null,
                        streamsStarted: 0,
                        streamsSucceeded: 0,
                        streamsFailed: 0,
                        messagesSent: 0,
                        messagesReceived: 0,
                        keepAlivesSent: 0,
                        lastLocalStreamCreatedTimestamp: null,
                        lastRemoteStreamCreatedTimestamp: null,
                        lastMessageSentTimestamp: null,
                        lastMessageReceivedTimestamp: null,
                        localFlowControlWindow: null,
                        remoteFlowControlWindow: null,
                    };
                }, this.channelzEnabled);
            }
            /**
             * This API is experimental, so API stability is not guaranteed across minor versions.
             * @param credentials
             * @param channelzRef
             * @returns
             */
            experimentalCreateConnectionInjectorWithChannelzRef(credentials, channelzRef, ownsChannelzRef = false) {
                if (credentials === null || !(credentials instanceof server_credentials_1.ServerCredentials)) {
                    throw new TypeError('creds must be a ServerCredentials object');
                }
                if (this.channelzEnabled) {
                    this.listenerChildrenTracker.refChild(channelzRef);
                }
                const server = this.createHttp2Server(credentials);
                const sessionsSet = new Set();
                this.http2Servers.set(server, {
                    channelzRef: channelzRef,
                    sessions: sessionsSet,
                    ownsChannelzRef
                });
                return {
                    injectConnection: (connection) => {
                        server.emit('connection', connection);
                    },
                    drain: (graceTimeMs) => {
                        var _b, _c;
                        for (const session of sessionsSet) {
                            this.closeSession(session);
                        }
                        (_c = (_b = setTimeout(() => {
                            for (const session of sessionsSet) {
                                session.destroy(http2.constants.NGHTTP2_CANCEL);
                            }
                        }, graceTimeMs)).unref) === null || _c === void 0 ? void 0 : _c.call(_b);
                    },
                    destroy: () => {
                        this.closeServer(server);
                        for (const session of sessionsSet) {
                            this.closeSession(session);
                        }
                    }
                };
            }
            createConnectionInjector(credentials) {
                if (credentials === null || !(credentials instanceof server_credentials_1.ServerCredentials)) {
                    throw new TypeError('creds must be a ServerCredentials object');
                }
                const channelzRef = this.registerInjectorToChannelz();
                return this.experimentalCreateConnectionInjectorWithChannelzRef(credentials, channelzRef, true);
            }
            closeServer(server, callback) {
                this.trace('Closing server with address ' + JSON.stringify(server.address()));
                const serverInfo = this.http2Servers.get(server);
                server.close(() => {
                    if (serverInfo && serverInfo.ownsChannelzRef) {
                        this.listenerChildrenTracker.unrefChild(serverInfo.channelzRef);
                        (0, channelz_1.unregisterChannelzRef)(serverInfo.channelzRef);
                    }
                    this.http2Servers.delete(server);
                    callback === null || callback === void 0 ? void 0 : callback();
                });
            }
            closeSession(session, callback) {
                var _b;
                this.trace('Closing session initiated by ' + ((_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress));
                const sessionInfo = this.sessions.get(session);
                const closeCallback = () => {
                    if (sessionInfo) {
                        this.sessionChildrenTracker.unrefChild(sessionInfo.ref);
                        (0, channelz_1.unregisterChannelzRef)(sessionInfo.ref);
                    }
                    callback === null || callback === void 0 ? void 0 : callback();
                };
                if (session.closed) {
                    queueMicrotask(closeCallback);
                }
                else {
                    session.close(closeCallback);
                }
            }
            completeUnbind(boundPortObject) {
                for (const server of boundPortObject.listeningServers) {
                    const serverInfo = this.http2Servers.get(server);
                    this.closeServer(server, () => {
                        boundPortObject.listeningServers.delete(server);
                    });
                    if (serverInfo) {
                        for (const session of serverInfo.sessions) {
                            this.closeSession(session);
                        }
                    }
                }
                this.boundPorts.delete(boundPortObject.mapKey);
            }
            /**
             * Unbind a previously bound port, or cancel an in-progress bindAsync
             * operation. If port 0 was bound, only the actual bound port can be
             * unbound. For example, if bindAsync was called with "localhost:0" and the
             * bound port result was 54321, it can be unbound as "localhost:54321".
             * @param port
             */
            unbind(port) {
                this.trace('unbind port=' + port);
                const portUri = this.normalizePort(port);
                const splitPort = (0, uri_parser_1.splitHostPort)(portUri.path);
                if ((splitPort === null || splitPort === void 0 ? void 0 : splitPort.port) === 0) {
                    throw new Error('Cannot unbind port 0');
                }
                const boundPortObject = this.boundPorts.get((0, uri_parser_1.uriToString)(portUri));
                if (boundPortObject) {
                    this.trace('unbinding ' +
                        boundPortObject.mapKey +
                        ' originally bound as ' +
                        (0, uri_parser_1.uriToString)(boundPortObject.originalUri));
                    /* If the bind operation is pending, the cancelled flag will trigger
                     * the unbind operation later. */
                    if (boundPortObject.completionPromise) {
                        boundPortObject.cancelled = true;
                    }
                    else {
                        this.completeUnbind(boundPortObject);
                    }
                }
            }
            /**
             * Gracefully close all connections associated with a previously bound port.
             * After the grace time, forcefully close all remaining open connections.
             *
             * If port 0 was bound, only the actual bound port can be
             * drained. For example, if bindAsync was called with "localhost:0" and the
             * bound port result was 54321, it can be drained as "localhost:54321".
             * @param port
             * @param graceTimeMs
             * @returns
             */
            drain(port, graceTimeMs) {
                var _b, _c;
                this.trace('drain port=' + port + ' graceTimeMs=' + graceTimeMs);
                const portUri = this.normalizePort(port);
                const splitPort = (0, uri_parser_1.splitHostPort)(portUri.path);
                if ((splitPort === null || splitPort === void 0 ? void 0 : splitPort.port) === 0) {
                    throw new Error('Cannot drain port 0');
                }
                const boundPortObject = this.boundPorts.get((0, uri_parser_1.uriToString)(portUri));
                if (!boundPortObject) {
                    return;
                }
                const allSessions = new Set();
                for (const http2Server of boundPortObject.listeningServers) {
                    const serverEntry = this.http2Servers.get(http2Server);
                    if (serverEntry) {
                        for (const session of serverEntry.sessions) {
                            allSessions.add(session);
                            this.closeSession(session, () => {
                                allSessions.delete(session);
                            });
                        }
                    }
                }
                /* After the grace time ends, send another goaway to all remaining sessions
                 * with the CANCEL code. */
                (_c = (_b = setTimeout(() => {
                    for (const session of allSessions) {
                        session.destroy(http2.constants.NGHTTP2_CANCEL);
                    }
                }, graceTimeMs)).unref) === null || _c === void 0 ? void 0 : _c.call(_b);
            }
            forceShutdown() {
                for (const boundPortObject of this.boundPorts.values()) {
                    boundPortObject.cancelled = true;
                }
                this.boundPorts.clear();
                // Close the server if it is still running.
                for (const server of this.http2Servers.keys()) {
                    this.closeServer(server);
                }
                // Always destroy any available sessions. It's possible that one or more
                // tryShutdown() calls are in progress. Don't wait on them to finish.
                this.sessions.forEach((channelzInfo, session) => {
                    this.closeSession(session);
                    // Cast NGHTTP2_CANCEL to any because TypeScript doesn't seem to
                    // recognize destroy(code) as a valid signature.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    session.destroy(http2.constants.NGHTTP2_CANCEL);
                });
                this.sessions.clear();
                (0, channelz_1.unregisterChannelzRef)(this.channelzRef);
                this.shutdown = true;
            }
            register(name, handler, serialize, deserialize, type) {
                if (this.handlers.has(name)) {
                    return false;
                }
                this.handlers.set(name, {
                    func: handler,
                    serialize,
                    deserialize,
                    type,
                    path: name,
                });
                return true;
            }
            unregister(name) {
                return this.handlers.delete(name);
            }
            /**
             * @deprecated No longer needed as of version 1.10.x
             */
            start() {
                if (this.http2Servers.size === 0 ||
                    [...this.http2Servers.keys()].every(server => !server.listening)) {
                    throw new Error('server must be bound in order to start');
                }
                if (this.started === true) {
                    throw new Error('server is already started');
                }
                this.started = true;
            }
            tryShutdown(callback) {
                var _b;
                const wrappedCallback = (error) => {
                    (0, channelz_1.unregisterChannelzRef)(this.channelzRef);
                    callback(error);
                };
                let pendingChecks = 0;
                function maybeCallback() {
                    pendingChecks--;
                    if (pendingChecks === 0) {
                        wrappedCallback();
                    }
                }
                this.shutdown = true;
                for (const [serverKey, server] of this.http2Servers.entries()) {
                    pendingChecks++;
                    const serverString = server.channelzRef.name;
                    this.trace('Waiting for server ' + serverString + ' to close');
                    this.closeServer(serverKey, () => {
                        this.trace('Server ' + serverString + ' finished closing');
                        maybeCallback();
                    });
                    for (const session of server.sessions.keys()) {
                        pendingChecks++;
                        const sessionString = (_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress;
                        this.trace('Waiting for session ' + sessionString + ' to close');
                        this.closeSession(session, () => {
                            this.trace('Session ' + sessionString + ' finished closing');
                            maybeCallback();
                        });
                    }
                }
                if (pendingChecks === 0) {
                    wrappedCallback();
                }
            }
            addHttp2Port() {
                throw new Error('Not yet implemented');
            }
            /**
             * Get the channelz reference object for this server. The returned value is
             * garbage if channelz is disabled for this server.
             * @returns
             */
            getChannelzRef() {
                return this.channelzRef;
            }
            _verifyContentType(stream, headers) {
                const contentType = headers[http2.constants.HTTP2_HEADER_CONTENT_TYPE];
                if (typeof contentType !== 'string' ||
                    !contentType.startsWith('application/grpc')) {
                    stream.respond({
                        [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE,
                    }, { endStream: true });
                    return false;
                }
                return true;
            }
            _retrieveHandler(path) {
                serverCallTrace('Received call to method ' +
                    path +
                    ' at address ' +
                    this.serverAddressString);
                const handler = this.handlers.get(path);
                if (handler === undefined) {
                    serverCallTrace('No handler registered for method ' +
                        path +
                        '. Sending UNIMPLEMENTED status.');
                    return null;
                }
                return handler;
            }
            _respondWithError(err, stream, channelzSessionInfo = null) {
                var _b, _c;
                const trailersToSend = Object.assign({ 'grpc-status': (_b = err.code) !== null && _b !== void 0 ? _b : constants_1.Status.INTERNAL, 'grpc-message': err.details, [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_OK, [http2.constants.HTTP2_HEADER_CONTENT_TYPE]: 'application/grpc+proto' }, (_c = err.metadata) === null || _c === void 0 ? void 0 : _c.toHttp2Headers());
                stream.respond(trailersToSend, { endStream: true });
                this.callTracker.addCallFailed();
                channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();
            }
            _channelzHandler(extraInterceptors, stream, headers) {
                // for handling idle timeout
                this.onStreamOpened(stream);
                const channelzSessionInfo = this.sessions.get(stream.session);
                this.callTracker.addCallStarted();
                channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallStarted();
                if (!this._verifyContentType(stream, headers)) {
                    this.callTracker.addCallFailed();
                    channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();
                    return;
                }
                const path = headers[HTTP2_HEADER_PATH];
                const handler = this._retrieveHandler(path);
                if (!handler) {
                    this._respondWithError(getUnimplementedStatusResponse(path), stream, channelzSessionInfo);
                    return;
                }
                const callEventTracker = {
                    addMessageSent: () => {
                        if (channelzSessionInfo) {
                            channelzSessionInfo.messagesSent += 1;
                            channelzSessionInfo.lastMessageSentTimestamp = new Date();
                        }
                    },
                    addMessageReceived: () => {
                        if (channelzSessionInfo) {
                            channelzSessionInfo.messagesReceived += 1;
                            channelzSessionInfo.lastMessageReceivedTimestamp = new Date();
                        }
                    },
                    onCallEnd: status => {
                        if (status.code === constants_1.Status.OK) {
                            this.callTracker.addCallSucceeded();
                        }
                        else {
                            this.callTracker.addCallFailed();
                        }
                    },
                    onStreamEnd: success => {
                        if (channelzSessionInfo) {
                            if (success) {
                                channelzSessionInfo.streamTracker.addCallSucceeded();
                            }
                            else {
                                channelzSessionInfo.streamTracker.addCallFailed();
                            }
                        }
                    },
                };
                const call = (0, server_interceptors_1.getServerInterceptingCall)([...extraInterceptors, ...this.interceptors], stream, headers, callEventTracker, handler, this.options);
                if (!this._runHandlerForCall(call, handler)) {
                    this.callTracker.addCallFailed();
                    channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();
                    call.sendStatus({
                        code: constants_1.Status.INTERNAL,
                        details: `Unknown handler type: ${handler.type}`,
                    });
                }
            }
            _streamHandler(extraInterceptors, stream, headers) {
                // for handling idle timeout
                this.onStreamOpened(stream);
                if (this._verifyContentType(stream, headers) !== true) {
                    return;
                }
                const path = headers[HTTP2_HEADER_PATH];
                const handler = this._retrieveHandler(path);
                if (!handler) {
                    this._respondWithError(getUnimplementedStatusResponse(path), stream, null);
                    return;
                }
                const call = (0, server_interceptors_1.getServerInterceptingCall)([...extraInterceptors, ...this.interceptors], stream, headers, null, handler, this.options);
                if (!this._runHandlerForCall(call, handler)) {
                    call.sendStatus({
                        code: constants_1.Status.INTERNAL,
                        details: `Unknown handler type: ${handler.type}`,
                    });
                }
            }
            _runHandlerForCall(call, handler) {
                const { type } = handler;
                if (type === 'unary') {
                    handleUnary(call, handler);
                }
                else if (type === 'clientStream') {
                    handleClientStreaming(call, handler);
                }
                else if (type === 'serverStream') {
                    handleServerStreaming(call, handler);
                }
                else if (type === 'bidi') {
                    handleBidiStreaming(call, handler);
                }
                else {
                    return false;
                }
                return true;
            }
            _setupHandlers(http2Server, extraInterceptors) {
                if (http2Server === null) {
                    return;
                }
                const serverAddress = http2Server.address();
                let serverAddressString = 'null';
                if (serverAddress) {
                    if (typeof serverAddress === 'string') {
                        serverAddressString = serverAddress;
                    }
                    else {
                        serverAddressString = serverAddress.address + ':' + serverAddress.port;
                    }
                }
                this.serverAddressString = serverAddressString;
                const handler = this.channelzEnabled
                    ? this._channelzHandler
                    : this._streamHandler;
                const sessionHandler = this.channelzEnabled
                    ? this._channelzSessionHandler(http2Server)
                    : this._sessionHandler(http2Server);
                http2Server.on('stream', handler.bind(this, extraInterceptors));
                http2Server.on('session', sessionHandler);
            }
            _sessionHandler(http2Server) {
                return (session) => {
                    var _b, _c;
                    (_b = this.http2Servers.get(http2Server)) === null || _b === void 0 ? void 0 : _b.sessions.add(session);
                    let connectionAgeTimer = null;
                    let connectionAgeGraceTimer = null;
                    let keepaliveTimer = null;
                    let sessionClosedByServer = false;
                    const idleTimeoutObj = this.enableIdleTimeout(session);
                    if (this.maxConnectionAgeMs !== UNLIMITED_CONNECTION_AGE_MS) {
                        // Apply a random jitter within a +/-10% range
                        const jitterMagnitude = this.maxConnectionAgeMs / 10;
                        const jitter = Math.random() * jitterMagnitude * 2 - jitterMagnitude;
                        connectionAgeTimer = setTimeout(() => {
                            var _b, _c;
                            sessionClosedByServer = true;
                            this.trace('Connection dropped by max connection age: ' +
                                ((_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress));
                            try {
                                session.goaway(http2.constants.NGHTTP2_NO_ERROR, ~(1 << 31), kMaxAge);
                            }
                            catch (e) {
                                // The goaway can't be sent because the session is already closed
                                session.destroy();
                                return;
                            }
                            session.close();
                            /* Allow a grace period after sending the GOAWAY before forcibly
                             * closing the connection. */
                            if (this.maxConnectionAgeGraceMs !== UNLIMITED_CONNECTION_AGE_MS) {
                                connectionAgeGraceTimer = setTimeout(() => {
                                    session.destroy();
                                }, this.maxConnectionAgeGraceMs);
                                (_c = connectionAgeGraceTimer.unref) === null || _c === void 0 ? void 0 : _c.call(connectionAgeGraceTimer);
                            }
                        }, this.maxConnectionAgeMs + jitter);
                        (_c = connectionAgeTimer.unref) === null || _c === void 0 ? void 0 : _c.call(connectionAgeTimer);
                    }
                    const clearKeepaliveTimeout = () => {
                        if (keepaliveTimer) {
                            clearTimeout(keepaliveTimer);
                            keepaliveTimer = null;
                        }
                    };
                    const canSendPing = () => {
                        return (!session.destroyed &&
                            this.keepaliveTimeMs < KEEPALIVE_MAX_TIME_MS &&
                            this.keepaliveTimeMs > 0);
                    };
                    /* eslint-disable-next-line prefer-const */
                    let sendPing; // hoisted for use in maybeStartKeepalivePingTimer
                    const maybeStartKeepalivePingTimer = () => {
                        var _b;
                        if (!canSendPing()) {
                            return;
                        }
                        this.keepaliveTrace('Starting keepalive timer for ' + this.keepaliveTimeMs + 'ms');
                        keepaliveTimer = setTimeout(() => {
                            clearKeepaliveTimeout();
                            sendPing();
                        }, this.keepaliveTimeMs);
                        (_b = keepaliveTimer.unref) === null || _b === void 0 ? void 0 : _b.call(keepaliveTimer);
                    };
                    sendPing = () => {
                        var _b;
                        if (!canSendPing()) {
                            return;
                        }
                        this.keepaliveTrace('Sending ping with timeout ' + this.keepaliveTimeoutMs + 'ms');
                        let pingSendError = '';
                        try {
                            const pingSentSuccessfully = session.ping((err, duration, payload) => {
                                clearKeepaliveTimeout();
                                if (err) {
                                    this.keepaliveTrace('Ping failed with error: ' + err.message);
                                    sessionClosedByServer = true;
                                    session.close();
                                }
                                else {
                                    this.keepaliveTrace('Received ping response');
                                    maybeStartKeepalivePingTimer();
                                }
                            });
                            if (!pingSentSuccessfully) {
                                pingSendError = 'Ping returned false';
                            }
                        }
                        catch (e) {
                            // grpc/grpc-node#2139
                            pingSendError =
                                (e instanceof Error ? e.message : '') || 'Unknown error';
                        }
                        if (pingSendError) {
                            this.keepaliveTrace('Ping send failed: ' + pingSendError);
                            this.trace('Connection dropped due to ping send error: ' + pingSendError);
                            sessionClosedByServer = true;
                            session.close();
                            return;
                        }
                        keepaliveTimer = setTimeout(() => {
                            clearKeepaliveTimeout();
                            this.keepaliveTrace('Ping timeout passed without response');
                            this.trace('Connection dropped by keepalive timeout');
                            sessionClosedByServer = true;
                            session.close();
                        }, this.keepaliveTimeoutMs);
                        (_b = keepaliveTimer.unref) === null || _b === void 0 ? void 0 : _b.call(keepaliveTimer);
                    };
                    maybeStartKeepalivePingTimer();
                    session.on('close', () => {
                        var _b, _c;
                        if (!sessionClosedByServer) {
                            this.trace(`Connection dropped by client ${(_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress}`);
                        }
                        if (connectionAgeTimer) {
                            clearTimeout(connectionAgeTimer);
                        }
                        if (connectionAgeGraceTimer) {
                            clearTimeout(connectionAgeGraceTimer);
                        }
                        clearKeepaliveTimeout();
                        if (idleTimeoutObj !== null) {
                            clearTimeout(idleTimeoutObj.timeout);
                            this.sessionIdleTimeouts.delete(session);
                        }
                        (_c = this.http2Servers.get(http2Server)) === null || _c === void 0 ? void 0 : _c.sessions.delete(session);
                    });
                };
            }
            _channelzSessionHandler(http2Server) {
                return (session) => {
                    var _b, _c, _d, _e;
                    const channelzRef = (0, channelz_1.registerChannelzSocket)((_c = (_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress) !== null && _c !== void 0 ? _c : 'unknown', this.getChannelzSessionInfo.bind(this, session), this.channelzEnabled);
                    const channelzSessionInfo = {
                        ref: channelzRef,
                        streamTracker: new channelz_1.ChannelzCallTracker(),
                        messagesSent: 0,
                        messagesReceived: 0,
                        keepAlivesSent: 0,
                        lastMessageSentTimestamp: null,
                        lastMessageReceivedTimestamp: null,
                    };
                    (_d = this.http2Servers.get(http2Server)) === null || _d === void 0 ? void 0 : _d.sessions.add(session);
                    this.sessions.set(session, channelzSessionInfo);
                    const clientAddress = `${session.socket.remoteAddress}:${session.socket.remotePort}`;
                    this.channelzTrace.addTrace('CT_INFO', 'Connection established by client ' + clientAddress);
                    this.trace('Connection established by client ' + clientAddress);
                    this.sessionChildrenTracker.refChild(channelzRef);
                    let connectionAgeTimer = null;
                    let connectionAgeGraceTimer = null;
                    let keepaliveTimeout = null;
                    let sessionClosedByServer = false;
                    const idleTimeoutObj = this.enableIdleTimeout(session);
                    if (this.maxConnectionAgeMs !== UNLIMITED_CONNECTION_AGE_MS) {
                        // Apply a random jitter within a +/-10% range
                        const jitterMagnitude = this.maxConnectionAgeMs / 10;
                        const jitter = Math.random() * jitterMagnitude * 2 - jitterMagnitude;
                        connectionAgeTimer = setTimeout(() => {
                            var _b;
                            sessionClosedByServer = true;
                            this.channelzTrace.addTrace('CT_INFO', 'Connection dropped by max connection age from ' + clientAddress);
                            try {
                                session.goaway(http2.constants.NGHTTP2_NO_ERROR, ~(1 << 31), kMaxAge);
                            }
                            catch (e) {
                                // The goaway can't be sent because the session is already closed
                                session.destroy();
                                return;
                            }
                            session.close();
                            /* Allow a grace period after sending the GOAWAY before forcibly
                             * closing the connection. */
                            if (this.maxConnectionAgeGraceMs !== UNLIMITED_CONNECTION_AGE_MS) {
                                connectionAgeGraceTimer = setTimeout(() => {
                                    session.destroy();
                                }, this.maxConnectionAgeGraceMs);
                                (_b = connectionAgeGraceTimer.unref) === null || _b === void 0 ? void 0 : _b.call(connectionAgeGraceTimer);
                            }
                        }, this.maxConnectionAgeMs + jitter);
                        (_e = connectionAgeTimer.unref) === null || _e === void 0 ? void 0 : _e.call(connectionAgeTimer);
                    }
                    const clearKeepaliveTimeout = () => {
                        if (keepaliveTimeout) {
                            clearTimeout(keepaliveTimeout);
                            keepaliveTimeout = null;
                        }
                    };
                    const canSendPing = () => {
                        return (!session.destroyed &&
                            this.keepaliveTimeMs < KEEPALIVE_MAX_TIME_MS &&
                            this.keepaliveTimeMs > 0);
                    };
                    /* eslint-disable-next-line prefer-const */
                    let sendPing; // hoisted for use in maybeStartKeepalivePingTimer
                    const maybeStartKeepalivePingTimer = () => {
                        var _b;
                        if (!canSendPing()) {
                            return;
                        }
                        this.keepaliveTrace('Starting keepalive timer for ' + this.keepaliveTimeMs + 'ms');
                        keepaliveTimeout = setTimeout(() => {
                            clearKeepaliveTimeout();
                            sendPing();
                        }, this.keepaliveTimeMs);
                        (_b = keepaliveTimeout.unref) === null || _b === void 0 ? void 0 : _b.call(keepaliveTimeout);
                    };
                    sendPing = () => {
                        var _b;
                        if (!canSendPing()) {
                            return;
                        }
                        this.keepaliveTrace('Sending ping with timeout ' + this.keepaliveTimeoutMs + 'ms');
                        let pingSendError = '';
                        try {
                            const pingSentSuccessfully = session.ping((err, duration, payload) => {
                                clearKeepaliveTimeout();
                                if (err) {
                                    this.keepaliveTrace('Ping failed with error: ' + err.message);
                                    this.channelzTrace.addTrace('CT_INFO', 'Connection dropped due to error of a ping frame ' +
                                        err.message +
                                        ' return in ' +
                                        duration);
                                    sessionClosedByServer = true;
                                    session.close();
                                }
                                else {
                                    this.keepaliveTrace('Received ping response');
                                    maybeStartKeepalivePingTimer();
                                }
                            });
                            if (!pingSentSuccessfully) {
                                pingSendError = 'Ping returned false';
                            }
                        }
                        catch (e) {
                            // grpc/grpc-node#2139
                            pingSendError =
                                (e instanceof Error ? e.message : '') || 'Unknown error';
                        }
                        if (pingSendError) {
                            this.keepaliveTrace('Ping send failed: ' + pingSendError);
                            this.channelzTrace.addTrace('CT_INFO', 'Connection dropped due to ping send error: ' + pingSendError);
                            sessionClosedByServer = true;
                            session.close();
                            return;
                        }
                        channelzSessionInfo.keepAlivesSent += 1;
                        keepaliveTimeout = setTimeout(() => {
                            clearKeepaliveTimeout();
                            this.keepaliveTrace('Ping timeout passed without response');
                            this.channelzTrace.addTrace('CT_INFO', 'Connection dropped by keepalive timeout from ' + clientAddress);
                            sessionClosedByServer = true;
                            session.close();
                        }, this.keepaliveTimeoutMs);
                        (_b = keepaliveTimeout.unref) === null || _b === void 0 ? void 0 : _b.call(keepaliveTimeout);
                    };
                    maybeStartKeepalivePingTimer();
                    session.on('close', () => {
                        var _b;
                        if (!sessionClosedByServer) {
                            this.channelzTrace.addTrace('CT_INFO', 'Connection dropped by client ' + clientAddress);
                        }
                        this.sessionChildrenTracker.unrefChild(channelzRef);
                        (0, channelz_1.unregisterChannelzRef)(channelzRef);
                        if (connectionAgeTimer) {
                            clearTimeout(connectionAgeTimer);
                        }
                        if (connectionAgeGraceTimer) {
                            clearTimeout(connectionAgeGraceTimer);
                        }
                        clearKeepaliveTimeout();
                        if (idleTimeoutObj !== null) {
                            clearTimeout(idleTimeoutObj.timeout);
                            this.sessionIdleTimeouts.delete(session);
                        }
                        (_b = this.http2Servers.get(http2Server)) === null || _b === void 0 ? void 0 : _b.sessions.delete(session);
                        this.sessions.delete(session);
                    });
                };
            }
            enableIdleTimeout(session) {
                var _b, _c;
                if (this.sessionIdleTimeout >= MAX_CONNECTION_IDLE_MS) {
                    return null;
                }
                const idleTimeoutObj = {
                    activeStreams: 0,
                    lastIdle: Date.now(),
                    onClose: this.onStreamClose.bind(this, session),
                    timeout: setTimeout(this.onIdleTimeout, this.sessionIdleTimeout, this, session),
                };
                (_c = (_b = idleTimeoutObj.timeout).unref) === null || _c === void 0 ? void 0 : _c.call(_b);
                this.sessionIdleTimeouts.set(session, idleTimeoutObj);
                const { socket } = session;
                this.trace('Enable idle timeout for ' +
                    socket.remoteAddress +
                    ':' +
                    socket.remotePort);
                return idleTimeoutObj;
            }
            onIdleTimeout(ctx, session) {
                const { socket } = session;
                const sessionInfo = ctx.sessionIdleTimeouts.get(session);
                // if it is called while we have activeStreams - timer will not be rescheduled
                // until last active stream is closed, then it will call .refresh() on the timer
                // important part is to not clearTimeout(timer) or it becomes unusable
                // for future refreshes
                if (sessionInfo !== undefined &&
                    sessionInfo.activeStreams === 0) {
                    if (Date.now() - sessionInfo.lastIdle >= ctx.sessionIdleTimeout) {
                        ctx.trace('Session idle timeout triggered for ' +
                            (socket === null || socket === void 0 ? void 0 : socket.remoteAddress) +
                            ':' +
                            (socket === null || socket === void 0 ? void 0 : socket.remotePort) +
                            ' last idle at ' +
                            sessionInfo.lastIdle);
                        ctx.closeSession(session);
                    }
                    else {
                        sessionInfo.timeout.refresh();
                    }
                }
            }
            onStreamOpened(stream) {
                const session = stream.session;
                const idleTimeoutObj = this.sessionIdleTimeouts.get(session);
                if (idleTimeoutObj) {
                    idleTimeoutObj.activeStreams += 1;
                    stream.once('close', idleTimeoutObj.onClose);
                }
            }
            onStreamClose(session) {
                var _b, _c;
                const idleTimeoutObj = this.sessionIdleTimeouts.get(session);
                if (idleTimeoutObj) {
                    idleTimeoutObj.activeStreams -= 1;
                    if (idleTimeoutObj.activeStreams === 0) {
                        idleTimeoutObj.lastIdle = Date.now();
                        idleTimeoutObj.timeout.refresh();
                        this.trace('Session onStreamClose' +
                            ((_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress) +
                            ':' +
                            ((_c = session.socket) === null || _c === void 0 ? void 0 : _c.remotePort) +
                            ' at ' +
                            idleTimeoutObj.lastIdle);
                    }
                }
            }
        },
        (() => {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _start_decorators = [deprecate('Calling start() is no longer necessary. It can be safely omitted.')];
            __esDecorate(_a, null, _start_decorators, { kind: "method", name: "start", static: false, private: false, access: { has: obj => "start" in obj, get: obj => obj.start }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(_a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        })(),
        _a;
})();
server.Server = Server;
async function handleUnary(call, handler) {
    let stream;
    function respond(err, value, trailer, flags) {
        if (err) {
            call.sendStatus((0, server_call_1.serverErrorToStatus)(err, trailer));
            return;
        }
        call.sendMessage(value, () => {
            call.sendStatus({
                code: constants_1.Status.OK,
                details: 'OK',
                metadata: trailer !== null && trailer !== void 0 ? trailer : null,
            });
        });
    }
    let requestMetadata;
    let requestMessage = null;
    call.start({
        onReceiveMetadata(metadata) {
            requestMetadata = metadata;
            call.startRead();
        },
        onReceiveMessage(message) {
            if (requestMessage) {
                call.sendStatus({
                    code: constants_1.Status.UNIMPLEMENTED,
                    details: `Received a second request message for server streaming method ${handler.path}`,
                    metadata: null,
                });
                return;
            }
            requestMessage = message;
            call.startRead();
        },
        onReceiveHalfClose() {
            if (!requestMessage) {
                call.sendStatus({
                    code: constants_1.Status.UNIMPLEMENTED,
                    details: `Received no request message for server streaming method ${handler.path}`,
                    metadata: null,
                });
                return;
            }
            stream = new server_call_1.ServerWritableStreamImpl(handler.path, call, requestMetadata, requestMessage);
            try {
                handler.func(stream, respond);
            }
            catch (err) {
                call.sendStatus({
                    code: constants_1.Status.UNKNOWN,
                    details: `Server method handler threw error ${err.message}`,
                    metadata: null,
                });
            }
        },
        onCancel() {
            if (stream) {
                stream.cancelled = true;
                stream.emit('cancelled', 'cancelled');
            }
        },
    });
}
function handleClientStreaming(call, handler) {
    let stream;
    function respond(err, value, trailer, flags) {
        if (err) {
            call.sendStatus((0, server_call_1.serverErrorToStatus)(err, trailer));
            return;
        }
        call.sendMessage(value, () => {
            call.sendStatus({
                code: constants_1.Status.OK,
                details: 'OK',
                metadata: trailer !== null && trailer !== void 0 ? trailer : null,
            });
        });
    }
    call.start({
        onReceiveMetadata(metadata) {
            stream = new server_call_1.ServerDuplexStreamImpl(handler.path, call, metadata);
            try {
                handler.func(stream, respond);
            }
            catch (err) {
                call.sendStatus({
                    code: constants_1.Status.UNKNOWN,
                    details: `Server method handler threw error ${err.message}`,
                    metadata: null,
                });
            }
        },
        onReceiveMessage(message) {
            stream.push(message);
        },
        onReceiveHalfClose() {
            stream.push(null);
        },
        onCancel() {
            if (stream) {
                stream.cancelled = true;
                stream.emit('cancelled', 'cancelled');
                stream.destroy();
            }
        },
    });
}
function handleServerStreaming(call, handler) {
    let stream;
    let requestMetadata;
    let requestMessage = null;
    call.start({
        onReceiveMetadata(metadata) {
            requestMetadata = metadata;
            call.startRead();
        },
        onReceiveMessage(message) {
            if (requestMessage) {
                call.sendStatus({
                    code: constants_1.Status.UNIMPLEMENTED,
                    details: `Received a second request message for server streaming method ${handler.path}`,
                    metadata: null,
                });
                return;
            }
            requestMessage = message;
            call.startRead();
        },
        onReceiveHalfClose() {
            if (!requestMessage) {
                call.sendStatus({
                    code: constants_1.Status.UNIMPLEMENTED,
                    details: `Received no request message for server streaming method ${handler.path}`,
                    metadata: null,
                });
                return;
            }
            stream = new server_call_1.ServerWritableStreamImpl(handler.path, call, requestMetadata, requestMessage);
            try {
                handler.func(stream);
            }
            catch (err) {
                call.sendStatus({
                    code: constants_1.Status.UNKNOWN,
                    details: `Server method handler threw error ${err.message}`,
                    metadata: null,
                });
            }
        },
        onCancel() {
            if (stream) {
                stream.cancelled = true;
                stream.emit('cancelled', 'cancelled');
                stream.destroy();
            }
        },
    });
}
function handleBidiStreaming(call, handler) {
    let stream;
    call.start({
        onReceiveMetadata(metadata) {
            stream = new server_call_1.ServerDuplexStreamImpl(handler.path, call, metadata);
            try {
                handler.func(stream);
            }
            catch (err) {
                call.sendStatus({
                    code: constants_1.Status.UNKNOWN,
                    details: `Server method handler threw error ${err.message}`,
                    metadata: null,
                });
            }
        },
        onReceiveMessage(message) {
            stream.push(message);
        },
        onReceiveHalfClose() {
            stream.push(null);
        },
        onCancel() {
            if (stream) {
                stream.cancelled = true;
                stream.emit('cancelled', 'cancelled');
                stream.destroy();
            }
        },
    });
}

var statusBuilder = {};

/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(statusBuilder, "__esModule", { value: true });
statusBuilder.StatusBuilder = void 0;
/**
 * A builder for gRPC status objects.
 */
class StatusBuilder {
    constructor() {
        this.code = null;
        this.details = null;
        this.metadata = null;
    }
    /**
     * Adds a status code to the builder.
     */
    withCode(code) {
        this.code = code;
        return this;
    }
    /**
     * Adds details to the builder.
     */
    withDetails(details) {
        this.details = details;
        return this;
    }
    /**
     * Adds metadata to the builder.
     */
    withMetadata(metadata) {
        this.metadata = metadata;
        return this;
    }
    /**
     * Builds the status object.
     */
    build() {
        const status = {};
        if (this.code !== null) {
            status.code = this.code;
        }
        if (this.details !== null) {
            status.details = this.details;
        }
        if (this.metadata !== null) {
            status.metadata = this.metadata;
        }
        return status;
    }
}
statusBuilder.StatusBuilder = StatusBuilder;

var experimental = {};

var duration = {};

var hasRequiredDuration;

function requireDuration () {
	if (hasRequiredDuration) return duration;
	hasRequiredDuration = 1;
	/*
	 * Copyright 2022 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(duration, "__esModule", { value: true });
	duration.msToDuration = msToDuration;
	duration.durationToMs = durationToMs;
	duration.isDuration = isDuration;
	duration.parseDuration = parseDuration;
	function msToDuration(millis) {
	    return {
	        seconds: (millis / 1000) | 0,
	        nanos: ((millis % 1000) * 1000000) | 0,
	    };
	}
	function durationToMs(duration) {
	    return (duration.seconds * 1000 + duration.nanos / 1000000) | 0;
	}
	function isDuration(value) {
	    return typeof value.seconds === 'number' && typeof value.nanos === 'number';
	}
	const durationRegex = /^(\d+)(?:\.(\d+))?s$/;
	function parseDuration(value) {
	    const match = value.match(durationRegex);
	    if (!match) {
	        return null;
	    }
	    return {
	        seconds: Number.parseInt(match[1], 10),
	        nanos: match[2] ? Number.parseInt(match[2].padEnd(9, '0'), 10) : 0
	    };
	}
	
	return duration;
}

var loadBalancerPickFirst = {};

var hasRequiredLoadBalancerPickFirst;

function requireLoadBalancerPickFirst () {
	if (hasRequiredLoadBalancerPickFirst) return loadBalancerPickFirst;
	hasRequiredLoadBalancerPickFirst = 1;
	/*
	 * Copyright 2019 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(loadBalancerPickFirst, "__esModule", { value: true });
	loadBalancerPickFirst.LeafLoadBalancer = loadBalancerPickFirst.PickFirstLoadBalancer = loadBalancerPickFirst.PickFirstLoadBalancingConfig = void 0;
	loadBalancerPickFirst.shuffled = shuffled;
	loadBalancerPickFirst.setup = setup;
	const load_balancer_1 = requireLoadBalancer();
	const connectivity_state_1 = connectivityState;
	const picker_1 = requirePicker();
	const subchannel_address_1 = subchannelAddress;
	const logging = logging$8;
	const constants_1 = constants;
	const subchannel_address_2 = subchannelAddress;
	const net_1 = require$$0$3;
	const TRACER_NAME = 'pick_first';
	function trace(text) {
	    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
	}
	const TYPE_NAME = 'pick_first';
	/**
	 * Delay after starting a connection on a subchannel before starting a
	 * connection on the next subchannel in the list, for Happy Eyeballs algorithm.
	 */
	const CONNECTION_DELAY_INTERVAL_MS = 250;
	class PickFirstLoadBalancingConfig {
	    constructor(shuffleAddressList) {
	        this.shuffleAddressList = shuffleAddressList;
	    }
	    getLoadBalancerName() {
	        return TYPE_NAME;
	    }
	    toJsonObject() {
	        return {
	            [TYPE_NAME]: {
	                shuffleAddressList: this.shuffleAddressList,
	            },
	        };
	    }
	    getShuffleAddressList() {
	        return this.shuffleAddressList;
	    }
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    static createFromJson(obj) {
	        if ('shuffleAddressList' in obj &&
	            !(typeof obj.shuffleAddressList === 'boolean')) {
	            throw new Error('pick_first config field shuffleAddressList must be a boolean if provided');
	        }
	        return new PickFirstLoadBalancingConfig(obj.shuffleAddressList === true);
	    }
	}
	loadBalancerPickFirst.PickFirstLoadBalancingConfig = PickFirstLoadBalancingConfig;
	/**
	 * Picker for a `PickFirstLoadBalancer` in the READY state. Always returns the
	 * picked subchannel.
	 */
	class PickFirstPicker {
	    constructor(subchannel) {
	        this.subchannel = subchannel;
	    }
	    pick(pickArgs) {
	        return {
	            pickResultType: picker_1.PickResultType.COMPLETE,
	            subchannel: this.subchannel,
	            status: null,
	            onCallStarted: null,
	            onCallEnded: null,
	        };
	    }
	}
	/**
	 * Return a new array with the elements of the input array in a random order
	 * @param list The input array
	 * @returns A shuffled array of the elements of list
	 */
	function shuffled(list) {
	    const result = list.slice();
	    for (let i = result.length - 1; i > 1; i--) {
	        const j = Math.floor(Math.random() * (i + 1));
	        const temp = result[i];
	        result[i] = result[j];
	        result[j] = temp;
	    }
	    return result;
	}
	/**
	 * Interleave addresses in addressList by family in accordance with RFC-8304 section 4
	 * @param addressList
	 * @returns
	 */
	function interleaveAddressFamilies(addressList) {
	    if (addressList.length === 0) {
	        return [];
	    }
	    const result = [];
	    const ipv6Addresses = [];
	    const ipv4Addresses = [];
	    const ipv6First = (0, subchannel_address_2.isTcpSubchannelAddress)(addressList[0]) && (0, net_1.isIPv6)(addressList[0].host);
	    for (const address of addressList) {
	        if ((0, subchannel_address_2.isTcpSubchannelAddress)(address) && (0, net_1.isIPv6)(address.host)) {
	            ipv6Addresses.push(address);
	        }
	        else {
	            ipv4Addresses.push(address);
	        }
	    }
	    const firstList = ipv6First ? ipv6Addresses : ipv4Addresses;
	    const secondList = ipv6First ? ipv4Addresses : ipv6Addresses;
	    for (let i = 0; i < Math.max(firstList.length, secondList.length); i++) {
	        if (i < firstList.length) {
	            result.push(firstList[i]);
	        }
	        if (i < secondList.length) {
	            result.push(secondList[i]);
	        }
	    }
	    return result;
	}
	const REPORT_HEALTH_STATUS_OPTION_NAME = 'grpc-node.internal.pick-first.report_health_status';
	class PickFirstLoadBalancer {
	    /**
	     * Load balancer that attempts to connect to each backend in the address list
	     * in order, and picks the first one that connects, using it for every
	     * request.
	     * @param channelControlHelper `ChannelControlHelper` instance provided by
	     *     this load balancer's owner.
	     */
	    constructor(channelControlHelper) {
	        this.channelControlHelper = channelControlHelper;
	        /**
	         * The list of subchannels this load balancer is currently attempting to
	         * connect to.
	         */
	        this.children = [];
	        /**
	         * The current connectivity state of the load balancer.
	         */
	        this.currentState = connectivity_state_1.ConnectivityState.IDLE;
	        /**
	         * The index within the `subchannels` array of the subchannel with the most
	         * recently started connection attempt.
	         */
	        this.currentSubchannelIndex = 0;
	        /**
	         * The currently picked subchannel used for making calls. Populated if
	         * and only if the load balancer's current state is READY. In that case,
	         * the subchannel's current state is also READY.
	         */
	        this.currentPick = null;
	        /**
	         * Listener callback attached to each subchannel in the `subchannels` list
	         * while establishing a connection.
	         */
	        this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime, errorMessage) => {
	            this.onSubchannelStateUpdate(subchannel, previousState, newState, errorMessage);
	        };
	        this.pickedSubchannelHealthListener = () => this.calculateAndReportNewState();
	        /**
	         * The LB policy enters sticky TRANSIENT_FAILURE mode when all
	         * subchannels have failed to connect at least once, and it stays in that
	         * mode until a connection attempt is successful. While in sticky TF mode,
	         * the LB policy continuously attempts to connect to all of its subchannels.
	         */
	        this.stickyTransientFailureMode = false;
	        this.reportHealthStatus = false;
	        /**
	         * The most recent error reported by any subchannel as it transitioned to
	         * TRANSIENT_FAILURE.
	         */
	        this.lastError = null;
	        this.latestAddressList = null;
	        this.latestOptions = {};
	        this.connectionDelayTimeout = setTimeout(() => { }, 0);
	        clearTimeout(this.connectionDelayTimeout);
	    }
	    allChildrenHaveReportedTF() {
	        return this.children.every(child => child.hasReportedTransientFailure);
	    }
	    resetChildrenReportedTF() {
	        this.children.every(child => child.hasReportedTransientFailure = false);
	    }
	    calculateAndReportNewState() {
	        var _a;
	        if (this.currentPick) {
	            if (this.reportHealthStatus && !this.currentPick.isHealthy()) {
	                const errorMessage = `Picked subchannel ${this.currentPick.getAddress()} is unhealthy`;
	                this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({
	                    details: errorMessage,
	                }), errorMessage);
	            }
	            else {
	                this.updateState(connectivity_state_1.ConnectivityState.READY, new PickFirstPicker(this.currentPick), null);
	            }
	        }
	        else if (((_a = this.latestAddressList) === null || _a === void 0 ? void 0 : _a.length) === 0) {
	            const errorMessage = `No connection established. Last error: ${this.lastError}`;
	            this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({
	                details: errorMessage,
	            }), errorMessage);
	        }
	        else if (this.children.length === 0) {
	            this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this), null);
	        }
	        else {
	            if (this.stickyTransientFailureMode) {
	                const errorMessage = `No connection established. Last error: ${this.lastError}`;
	                this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({
	                    details: errorMessage,
	                }), errorMessage);
	            }
	            else {
	                this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this), null);
	            }
	        }
	    }
	    requestReresolution() {
	        this.channelControlHelper.requestReresolution();
	    }
	    maybeEnterStickyTransientFailureMode() {
	        if (!this.allChildrenHaveReportedTF()) {
	            return;
	        }
	        this.requestReresolution();
	        this.resetChildrenReportedTF();
	        if (this.stickyTransientFailureMode) {
	            this.calculateAndReportNewState();
	            return;
	        }
	        this.stickyTransientFailureMode = true;
	        for (const { subchannel } of this.children) {
	            subchannel.startConnecting();
	        }
	        this.calculateAndReportNewState();
	    }
	    removeCurrentPick() {
	        if (this.currentPick !== null) {
	            this.currentPick.removeConnectivityStateListener(this.subchannelStateListener);
	            this.channelControlHelper.removeChannelzChild(this.currentPick.getChannelzRef());
	            this.currentPick.removeHealthStateWatcher(this.pickedSubchannelHealthListener);
	            // Unref last, to avoid triggering listeners
	            this.currentPick.unref();
	            this.currentPick = null;
	        }
	    }
	    onSubchannelStateUpdate(subchannel, previousState, newState, errorMessage) {
	        var _a;
	        if ((_a = this.currentPick) === null || _a === void 0 ? void 0 : _a.realSubchannelEquals(subchannel)) {
	            if (newState !== connectivity_state_1.ConnectivityState.READY) {
	                this.removeCurrentPick();
	                this.calculateAndReportNewState();
	            }
	            return;
	        }
	        for (const [index, child] of this.children.entries()) {
	            if (subchannel.realSubchannelEquals(child.subchannel)) {
	                if (newState === connectivity_state_1.ConnectivityState.READY) {
	                    this.pickSubchannel(child.subchannel);
	                }
	                if (newState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {
	                    child.hasReportedTransientFailure = true;
	                    if (errorMessage) {
	                        this.lastError = errorMessage;
	                    }
	                    this.maybeEnterStickyTransientFailureMode();
	                    if (index === this.currentSubchannelIndex) {
	                        this.startNextSubchannelConnecting(index + 1);
	                    }
	                }
	                child.subchannel.startConnecting();
	                return;
	            }
	        }
	    }
	    startNextSubchannelConnecting(startIndex) {
	        clearTimeout(this.connectionDelayTimeout);
	        for (const [index, child] of this.children.entries()) {
	            if (index >= startIndex) {
	                const subchannelState = child.subchannel.getConnectivityState();
	                if (subchannelState === connectivity_state_1.ConnectivityState.IDLE ||
	                    subchannelState === connectivity_state_1.ConnectivityState.CONNECTING) {
	                    this.startConnecting(index);
	                    return;
	                }
	            }
	        }
	        this.maybeEnterStickyTransientFailureMode();
	    }
	    /**
	     * Have a single subchannel in the `subchannels` list start connecting.
	     * @param subchannelIndex The index into the `subchannels` list.
	     */
	    startConnecting(subchannelIndex) {
	        var _a, _b;
	        clearTimeout(this.connectionDelayTimeout);
	        this.currentSubchannelIndex = subchannelIndex;
	        if (this.children[subchannelIndex].subchannel.getConnectivityState() ===
	            connectivity_state_1.ConnectivityState.IDLE) {
	            trace('Start connecting to subchannel with address ' +
	                this.children[subchannelIndex].subchannel.getAddress());
	            process.nextTick(() => {
	                var _a;
	                (_a = this.children[subchannelIndex]) === null || _a === void 0 ? void 0 : _a.subchannel.startConnecting();
	            });
	        }
	        this.connectionDelayTimeout = setTimeout(() => {
	            this.startNextSubchannelConnecting(subchannelIndex + 1);
	        }, CONNECTION_DELAY_INTERVAL_MS);
	        (_b = (_a = this.connectionDelayTimeout).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
	    }
	    /**
	     * Declare that the specified subchannel should be used to make requests.
	     * This functions the same independent of whether subchannel is a member of
	     * this.children and whether it is equal to this.currentPick.
	     * Prerequisite: subchannel.getConnectivityState() === READY.
	     * @param subchannel
	     */
	    pickSubchannel(subchannel) {
	        trace('Pick subchannel with address ' + subchannel.getAddress());
	        this.stickyTransientFailureMode = false;
	        /* Ref before removeCurrentPick and resetSubchannelList to avoid the
	         * refcount dropping to 0 during this process. */
	        subchannel.ref();
	        this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());
	        this.removeCurrentPick();
	        this.resetSubchannelList();
	        subchannel.addConnectivityStateListener(this.subchannelStateListener);
	        subchannel.addHealthStateWatcher(this.pickedSubchannelHealthListener);
	        this.currentPick = subchannel;
	        clearTimeout(this.connectionDelayTimeout);
	        this.calculateAndReportNewState();
	    }
	    updateState(newState, picker, errorMessage) {
	        trace(connectivity_state_1.ConnectivityState[this.currentState] +
	            ' -> ' +
	            connectivity_state_1.ConnectivityState[newState]);
	        this.currentState = newState;
	        this.channelControlHelper.updateState(newState, picker, errorMessage);
	    }
	    resetSubchannelList() {
	        for (const child of this.children) {
	            /* Always remoev the connectivity state listener. If the subchannel is
	               getting picked, it will be re-added then. */
	            child.subchannel.removeConnectivityStateListener(this.subchannelStateListener);
	            /* Refs are counted independently for the children list and the
	             * currentPick, so we call unref whether or not the child is the
	             * currentPick. Channelz child references are also refcounted, so
	             * removeChannelzChild can be handled the same way. */
	            child.subchannel.unref();
	            this.channelControlHelper.removeChannelzChild(child.subchannel.getChannelzRef());
	        }
	        this.currentSubchannelIndex = 0;
	        this.children = [];
	    }
	    connectToAddressList(addressList, options) {
	        trace('connectToAddressList([' + addressList.map(address => (0, subchannel_address_1.subchannelAddressToString)(address)) + '])');
	        const newChildrenList = addressList.map(address => ({
	            subchannel: this.channelControlHelper.createSubchannel(address, options),
	            hasReportedTransientFailure: false,
	        }));
	        for (const { subchannel } of newChildrenList) {
	            if (subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.READY) {
	                this.pickSubchannel(subchannel);
	                return;
	            }
	        }
	        /* Ref each subchannel before resetting the list, to ensure that
	         * subchannels shared between the list don't drop to 0 refs during the
	         * transition. */
	        for (const { subchannel } of newChildrenList) {
	            subchannel.ref();
	            this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());
	        }
	        this.resetSubchannelList();
	        this.children = newChildrenList;
	        for (const { subchannel } of this.children) {
	            subchannel.addConnectivityStateListener(this.subchannelStateListener);
	        }
	        for (const child of this.children) {
	            if (child.subchannel.getConnectivityState() ===
	                connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {
	                child.hasReportedTransientFailure = true;
	            }
	        }
	        this.startNextSubchannelConnecting(0);
	        this.calculateAndReportNewState();
	    }
	    updateAddressList(endpointList, lbConfig, options) {
	        if (!(lbConfig instanceof PickFirstLoadBalancingConfig)) {
	            return;
	        }
	        this.reportHealthStatus = options[REPORT_HEALTH_STATUS_OPTION_NAME];
	        /* Previously, an update would be discarded if it was identical to the
	         * previous update, to minimize churn. Now the DNS resolver is
	         * rate-limited, so that is less of a concern. */
	        if (lbConfig.getShuffleAddressList()) {
	            endpointList = shuffled(endpointList);
	        }
	        const rawAddressList = [].concat(...endpointList.map(endpoint => endpoint.addresses));
	        trace('updateAddressList([' + rawAddressList.map(address => (0, subchannel_address_1.subchannelAddressToString)(address)) + '])');
	        if (rawAddressList.length === 0) {
	            this.lastError = 'No addresses resolved';
	        }
	        const addressList = interleaveAddressFamilies(rawAddressList);
	        this.latestAddressList = addressList;
	        this.latestOptions = options;
	        this.connectToAddressList(addressList, options);
	    }
	    exitIdle() {
	        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE &&
	            this.latestAddressList) {
	            this.connectToAddressList(this.latestAddressList, this.latestOptions);
	        }
	    }
	    resetBackoff() {
	        /* The pick first load balancer does not have a connection backoff, so this
	         * does nothing */
	    }
	    destroy() {
	        this.resetSubchannelList();
	        this.removeCurrentPick();
	    }
	    getTypeName() {
	        return TYPE_NAME;
	    }
	}
	loadBalancerPickFirst.PickFirstLoadBalancer = PickFirstLoadBalancer;
	const LEAF_CONFIG = new PickFirstLoadBalancingConfig(false);
	/**
	 * This class handles the leaf load balancing operations for a single endpoint.
	 * It is a thin wrapper around a PickFirstLoadBalancer with a different API
	 * that more closely reflects how it will be used as a leaf balancer.
	 */
	class LeafLoadBalancer {
	    constructor(endpoint, channelControlHelper, options) {
	        this.endpoint = endpoint;
	        this.options = options;
	        this.latestState = connectivity_state_1.ConnectivityState.IDLE;
	        const childChannelControlHelper = (0, load_balancer_1.createChildChannelControlHelper)(channelControlHelper, {
	            updateState: (connectivityState, picker, errorMessage) => {
	                this.latestState = connectivityState;
	                this.latestPicker = picker;
	                channelControlHelper.updateState(connectivityState, picker, errorMessage);
	            },
	        });
	        this.pickFirstBalancer = new PickFirstLoadBalancer(childChannelControlHelper);
	        this.latestPicker = new picker_1.QueuePicker(this.pickFirstBalancer);
	    }
	    startConnecting() {
	        this.pickFirstBalancer.updateAddressList([this.endpoint], LEAF_CONFIG, Object.assign(Object.assign({}, this.options), { [REPORT_HEALTH_STATUS_OPTION_NAME]: true }));
	    }
	    /**
	     * Update the endpoint associated with this LeafLoadBalancer to a new
	     * endpoint. Does not trigger connection establishment if a connection
	     * attempt is not already in progress.
	     * @param newEndpoint
	     */
	    updateEndpoint(newEndpoint, newOptions) {
	        this.options = newOptions;
	        this.endpoint = newEndpoint;
	        if (this.latestState !== connectivity_state_1.ConnectivityState.IDLE) {
	            this.startConnecting();
	        }
	    }
	    getConnectivityState() {
	        return this.latestState;
	    }
	    getPicker() {
	        return this.latestPicker;
	    }
	    getEndpoint() {
	        return this.endpoint;
	    }
	    exitIdle() {
	        this.pickFirstBalancer.exitIdle();
	    }
	    destroy() {
	        this.pickFirstBalancer.destroy();
	    }
	}
	loadBalancerPickFirst.LeafLoadBalancer = LeafLoadBalancer;
	function setup() {
	    (0, load_balancer_1.registerLoadBalancerType)(TYPE_NAME, PickFirstLoadBalancer, PickFirstLoadBalancingConfig);
	    (0, load_balancer_1.registerDefaultLoadBalancerType)(TYPE_NAME);
	}
	
	return loadBalancerPickFirst;
}

var certificateProvider = {};

var hasRequiredCertificateProvider;

function requireCertificateProvider () {
	if (hasRequiredCertificateProvider) return certificateProvider;
	hasRequiredCertificateProvider = 1;
	/*
	 * Copyright 2024 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(certificateProvider, "__esModule", { value: true });
	certificateProvider.FileWatcherCertificateProvider = void 0;
	const fs = require$$0;
	const logging = logging$8;
	const constants_1 = constants;
	const util_1 = require$$1$5;
	const TRACER_NAME = 'certificate_provider';
	function trace(text) {
	    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
	}
	const readFilePromise = (0, util_1.promisify)(fs.readFile);
	class FileWatcherCertificateProvider {
	    constructor(config) {
	        this.config = config;
	        this.refreshTimer = null;
	        this.fileResultPromise = null;
	        this.latestCaUpdate = undefined;
	        this.caListeners = new Set();
	        this.latestIdentityUpdate = undefined;
	        this.identityListeners = new Set();
	        this.lastUpdateTime = null;
	        if ((config.certificateFile === undefined) !== (config.privateKeyFile === undefined)) {
	            throw new Error('certificateFile and privateKeyFile must be set or unset together');
	        }
	        if (config.certificateFile === undefined && config.caCertificateFile === undefined) {
	            throw new Error('At least one of certificateFile and caCertificateFile must be set');
	        }
	        trace('File watcher constructed with config ' + JSON.stringify(config));
	    }
	    updateCertificates() {
	        if (this.fileResultPromise) {
	            return;
	        }
	        this.fileResultPromise = Promise.allSettled([
	            this.config.certificateFile ? readFilePromise(this.config.certificateFile) : Promise.reject(),
	            this.config.privateKeyFile ? readFilePromise(this.config.privateKeyFile) : Promise.reject(),
	            this.config.caCertificateFile ? readFilePromise(this.config.caCertificateFile) : Promise.reject()
	        ]);
	        this.fileResultPromise.then(([certificateResult, privateKeyResult, caCertificateResult]) => {
	            if (!this.refreshTimer) {
	                return;
	            }
	            trace('File watcher read certificates certificate ' + certificateResult.status + ', privateKey ' + privateKeyResult.status + ', CA certificate ' + caCertificateResult.status);
	            this.lastUpdateTime = new Date();
	            this.fileResultPromise = null;
	            if (certificateResult.status === 'fulfilled' && privateKeyResult.status === 'fulfilled') {
	                this.latestIdentityUpdate = {
	                    certificate: certificateResult.value,
	                    privateKey: privateKeyResult.value
	                };
	            }
	            else {
	                this.latestIdentityUpdate = null;
	            }
	            if (caCertificateResult.status === 'fulfilled') {
	                this.latestCaUpdate = {
	                    caCertificate: caCertificateResult.value
	                };
	            }
	            else {
	                this.latestCaUpdate = null;
	            }
	            for (const listener of this.identityListeners) {
	                listener(this.latestIdentityUpdate);
	            }
	            for (const listener of this.caListeners) {
	                listener(this.latestCaUpdate);
	            }
	        });
	        trace('File watcher initiated certificate update');
	    }
	    maybeStartWatchingFiles() {
	        if (!this.refreshTimer) {
	            /* Perform the first read immediately, but only if there was not already
	             * a recent read, to avoid reading from the filesystem significantly more
	             * frequently than configured if the provider quickly switches between
	             * used and unused. */
	            const timeSinceLastUpdate = this.lastUpdateTime ? (new Date()).getTime() - this.lastUpdateTime.getTime() : Infinity;
	            if (timeSinceLastUpdate > this.config.refreshIntervalMs) {
	                this.updateCertificates();
	            }
	            if (timeSinceLastUpdate > this.config.refreshIntervalMs * 2) {
	                // Clear out old updates if they are definitely stale
	                this.latestCaUpdate = undefined;
	                this.latestIdentityUpdate = undefined;
	            }
	            this.refreshTimer = setInterval(() => this.updateCertificates(), this.config.refreshIntervalMs);
	            trace('File watcher started watching');
	        }
	    }
	    maybeStopWatchingFiles() {
	        if (this.caListeners.size === 0 && this.identityListeners.size === 0) {
	            this.fileResultPromise = null;
	            if (this.refreshTimer) {
	                clearInterval(this.refreshTimer);
	                this.refreshTimer = null;
	            }
	        }
	    }
	    addCaCertificateListener(listener) {
	        this.caListeners.add(listener);
	        this.maybeStartWatchingFiles();
	        if (this.latestCaUpdate !== undefined) {
	            process.nextTick(listener, this.latestCaUpdate);
	        }
	    }
	    removeCaCertificateListener(listener) {
	        this.caListeners.delete(listener);
	        this.maybeStopWatchingFiles();
	    }
	    addIdentityCertificateListener(listener) {
	        this.identityListeners.add(listener);
	        this.maybeStartWatchingFiles();
	        if (this.latestIdentityUpdate !== undefined) {
	            process.nextTick(listener, this.latestIdentityUpdate);
	        }
	    }
	    removeIdentityCertificateListener(listener) {
	        this.identityListeners.delete(listener);
	        this.maybeStopWatchingFiles();
	    }
	}
	certificateProvider.FileWatcherCertificateProvider = FileWatcherCertificateProvider;
	
	return certificateProvider;
}

var hasRequiredExperimental;

function requireExperimental () {
	if (hasRequiredExperimental) return experimental;
	hasRequiredExperimental = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX = exports.createCertificateProviderChannelCredentials = exports.FileWatcherCertificateProvider = exports.createCertificateProviderServerCredentials = exports.createServerCredentialsWithInterceptors = exports.BaseSubchannelWrapper = exports.registerAdminService = exports.FilterStackFactory = exports.BaseFilter = exports.PickResultType = exports.QueuePicker = exports.UnavailablePicker = exports.ChildLoadBalancerHandler = exports.EndpointMap = exports.endpointHasAddress = exports.endpointToString = exports.subchannelAddressToString = exports.LeafLoadBalancer = exports.isLoadBalancerNameRegistered = exports.parseLoadBalancingConfig = exports.selectLbConfigFromList = exports.registerLoadBalancerType = exports.createChildChannelControlHelper = exports.BackoffTimeout = exports.parseDuration = exports.durationToMs = exports.splitHostPort = exports.uriToString = exports.createResolver = exports.registerResolver = exports.log = exports.trace = void 0;
		var logging_1 = logging$8;
		Object.defineProperty(exports, "trace", { enumerable: true, get: function () { return logging_1.trace; } });
		Object.defineProperty(exports, "log", { enumerable: true, get: function () { return logging_1.log; } });
		var resolver_1 = resolver;
		Object.defineProperty(exports, "registerResolver", { enumerable: true, get: function () { return resolver_1.registerResolver; } });
		Object.defineProperty(exports, "createResolver", { enumerable: true, get: function () { return resolver_1.createResolver; } });
		var uri_parser_1 = uriParser;
		Object.defineProperty(exports, "uriToString", { enumerable: true, get: function () { return uri_parser_1.uriToString; } });
		Object.defineProperty(exports, "splitHostPort", { enumerable: true, get: function () { return uri_parser_1.splitHostPort; } });
		var duration_1 = requireDuration();
		Object.defineProperty(exports, "durationToMs", { enumerable: true, get: function () { return duration_1.durationToMs; } });
		Object.defineProperty(exports, "parseDuration", { enumerable: true, get: function () { return duration_1.parseDuration; } });
		var backoff_timeout_1 = requireBackoffTimeout();
		Object.defineProperty(exports, "BackoffTimeout", { enumerable: true, get: function () { return backoff_timeout_1.BackoffTimeout; } });
		var load_balancer_1 = requireLoadBalancer();
		Object.defineProperty(exports, "createChildChannelControlHelper", { enumerable: true, get: function () { return load_balancer_1.createChildChannelControlHelper; } });
		Object.defineProperty(exports, "registerLoadBalancerType", { enumerable: true, get: function () { return load_balancer_1.registerLoadBalancerType; } });
		Object.defineProperty(exports, "selectLbConfigFromList", { enumerable: true, get: function () { return load_balancer_1.selectLbConfigFromList; } });
		Object.defineProperty(exports, "parseLoadBalancingConfig", { enumerable: true, get: function () { return load_balancer_1.parseLoadBalancingConfig; } });
		Object.defineProperty(exports, "isLoadBalancerNameRegistered", { enumerable: true, get: function () { return load_balancer_1.isLoadBalancerNameRegistered; } });
		var load_balancer_pick_first_1 = requireLoadBalancerPickFirst();
		Object.defineProperty(exports, "LeafLoadBalancer", { enumerable: true, get: function () { return load_balancer_pick_first_1.LeafLoadBalancer; } });
		var subchannel_address_1 = subchannelAddress;
		Object.defineProperty(exports, "subchannelAddressToString", { enumerable: true, get: function () { return subchannel_address_1.subchannelAddressToString; } });
		Object.defineProperty(exports, "endpointToString", { enumerable: true, get: function () { return subchannel_address_1.endpointToString; } });
		Object.defineProperty(exports, "endpointHasAddress", { enumerable: true, get: function () { return subchannel_address_1.endpointHasAddress; } });
		Object.defineProperty(exports, "EndpointMap", { enumerable: true, get: function () { return subchannel_address_1.EndpointMap; } });
		var load_balancer_child_handler_1 = requireLoadBalancerChildHandler();
		Object.defineProperty(exports, "ChildLoadBalancerHandler", { enumerable: true, get: function () { return load_balancer_child_handler_1.ChildLoadBalancerHandler; } });
		var picker_1 = requirePicker();
		Object.defineProperty(exports, "UnavailablePicker", { enumerable: true, get: function () { return picker_1.UnavailablePicker; } });
		Object.defineProperty(exports, "QueuePicker", { enumerable: true, get: function () { return picker_1.QueuePicker; } });
		Object.defineProperty(exports, "PickResultType", { enumerable: true, get: function () { return picker_1.PickResultType; } });
		var filter_1 = requireFilter();
		Object.defineProperty(exports, "BaseFilter", { enumerable: true, get: function () { return filter_1.BaseFilter; } });
		var filter_stack_1 = requireFilterStack();
		Object.defineProperty(exports, "FilterStackFactory", { enumerable: true, get: function () { return filter_stack_1.FilterStackFactory; } });
		var admin_1 = requireAdmin();
		Object.defineProperty(exports, "registerAdminService", { enumerable: true, get: function () { return admin_1.registerAdminService; } });
		var subchannel_interface_1 = requireSubchannelInterface();
		Object.defineProperty(exports, "BaseSubchannelWrapper", { enumerable: true, get: function () { return subchannel_interface_1.BaseSubchannelWrapper; } });
		var server_credentials_1 = serverCredentials;
		Object.defineProperty(exports, "createServerCredentialsWithInterceptors", { enumerable: true, get: function () { return server_credentials_1.createServerCredentialsWithInterceptors; } });
		Object.defineProperty(exports, "createCertificateProviderServerCredentials", { enumerable: true, get: function () { return server_credentials_1.createCertificateProviderServerCredentials; } });
		var certificate_provider_1 = requireCertificateProvider();
		Object.defineProperty(exports, "FileWatcherCertificateProvider", { enumerable: true, get: function () { return certificate_provider_1.FileWatcherCertificateProvider; } });
		var channel_credentials_1 = channelCredentials;
		Object.defineProperty(exports, "createCertificateProviderChannelCredentials", { enumerable: true, get: function () { return channel_credentials_1.createCertificateProviderChannelCredentials; } });
		var internal_channel_1 = requireInternalChannel();
		Object.defineProperty(exports, "SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX", { enumerable: true, get: function () { return internal_channel_1.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX; } });
		
	} (experimental));
	return experimental;
}

var resolverUds = {};

var hasRequiredResolverUds;

function requireResolverUds () {
	if (hasRequiredResolverUds) return resolverUds;
	hasRequiredResolverUds = 1;
	/*
	 * Copyright 2019 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(resolverUds, "__esModule", { value: true });
	resolverUds.setup = setup;
	const resolver_1 = resolver;
	class UdsResolver {
	    constructor(target, listener, channelOptions) {
	        this.listener = listener;
	        this.hasReturnedResult = false;
	        this.endpoints = [];
	        let path;
	        if (target.authority === '') {
	            path = '/' + target.path;
	        }
	        else {
	            path = target.path;
	        }
	        this.endpoints = [{ addresses: [{ path }] }];
	    }
	    updateResolution() {
	        if (!this.hasReturnedResult) {
	            this.hasReturnedResult = true;
	            process.nextTick(this.listener.onSuccessfulResolution, this.endpoints, null, null, null, {});
	        }
	    }
	    destroy() {
	        this.hasReturnedResult = false;
	    }
	    static getDefaultAuthority(target) {
	        return 'localhost';
	    }
	}
	function setup() {
	    (0, resolver_1.registerResolver)('unix', UdsResolver);
	}
	
	return resolverUds;
}

var resolverIp = {};

var hasRequiredResolverIp;

function requireResolverIp () {
	if (hasRequiredResolverIp) return resolverIp;
	hasRequiredResolverIp = 1;
	/*
	 * Copyright 2021 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(resolverIp, "__esModule", { value: true });
	resolverIp.setup = setup;
	const net_1 = require$$0$3;
	const constants_1 = constants;
	const metadata_1 = metadata;
	const resolver_1 = resolver;
	const uri_parser_1 = uriParser;
	const logging = logging$8;
	const TRACER_NAME = 'ip_resolver';
	function trace(text) {
	    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
	}
	const IPV4_SCHEME = 'ipv4';
	const IPV6_SCHEME = 'ipv6';
	/**
	 * The default TCP port to connect to if not explicitly specified in the target.
	 */
	const DEFAULT_PORT = 443;
	class IpResolver {
	    constructor(target, listener, channelOptions) {
	        var _a;
	        this.listener = listener;
	        this.endpoints = [];
	        this.error = null;
	        this.hasReturnedResult = false;
	        trace('Resolver constructed for target ' + (0, uri_parser_1.uriToString)(target));
	        const addresses = [];
	        if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {
	            this.error = {
	                code: constants_1.Status.UNAVAILABLE,
	                details: `Unrecognized scheme ${target.scheme} in IP resolver`,
	                metadata: new metadata_1.Metadata(),
	            };
	            return;
	        }
	        const pathList = target.path.split(',');
	        for (const path of pathList) {
	            const hostPort = (0, uri_parser_1.splitHostPort)(path);
	            if (hostPort === null) {
	                this.error = {
	                    code: constants_1.Status.UNAVAILABLE,
	                    details: `Failed to parse ${target.scheme} address ${path}`,
	                    metadata: new metadata_1.Metadata(),
	                };
	                return;
	            }
	            if ((target.scheme === IPV4_SCHEME && !(0, net_1.isIPv4)(hostPort.host)) ||
	                (target.scheme === IPV6_SCHEME && !(0, net_1.isIPv6)(hostPort.host))) {
	                this.error = {
	                    code: constants_1.Status.UNAVAILABLE,
	                    details: `Failed to parse ${target.scheme} address ${path}`,
	                    metadata: new metadata_1.Metadata(),
	                };
	                return;
	            }
	            addresses.push({
	                host: hostPort.host,
	                port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT,
	            });
	        }
	        this.endpoints = addresses.map(address => ({ addresses: [address] }));
	        trace('Parsed ' + target.scheme + ' address list ' + addresses);
	    }
	    updateResolution() {
	        if (!this.hasReturnedResult) {
	            this.hasReturnedResult = true;
	            process.nextTick(() => {
	                if (this.error) {
	                    this.listener.onError(this.error);
	                }
	                else {
	                    this.listener.onSuccessfulResolution(this.endpoints, null, null, null, {});
	                }
	            });
	        }
	    }
	    destroy() {
	        this.hasReturnedResult = false;
	    }
	    static getDefaultAuthority(target) {
	        return target.path.split(',')[0];
	    }
	}
	function setup() {
	    (0, resolver_1.registerResolver)(IPV4_SCHEME, IpResolver);
	    (0, resolver_1.registerResolver)(IPV6_SCHEME, IpResolver);
	}
	
	return resolverIp;
}

var loadBalancerRoundRobin = {};

var hasRequiredLoadBalancerRoundRobin;

function requireLoadBalancerRoundRobin () {
	if (hasRequiredLoadBalancerRoundRobin) return loadBalancerRoundRobin;
	hasRequiredLoadBalancerRoundRobin = 1;
	/*
	 * Copyright 2019 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(loadBalancerRoundRobin, "__esModule", { value: true });
	loadBalancerRoundRobin.RoundRobinLoadBalancer = void 0;
	loadBalancerRoundRobin.setup = setup;
	const load_balancer_1 = requireLoadBalancer();
	const connectivity_state_1 = connectivityState;
	const picker_1 = requirePicker();
	const logging = logging$8;
	const constants_1 = constants;
	const subchannel_address_1 = subchannelAddress;
	const load_balancer_pick_first_1 = requireLoadBalancerPickFirst();
	const TRACER_NAME = 'round_robin';
	function trace(text) {
	    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
	}
	const TYPE_NAME = 'round_robin';
	class RoundRobinLoadBalancingConfig {
	    getLoadBalancerName() {
	        return TYPE_NAME;
	    }
	    constructor() { }
	    toJsonObject() {
	        return {
	            [TYPE_NAME]: {},
	        };
	    }
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    static createFromJson(obj) {
	        return new RoundRobinLoadBalancingConfig();
	    }
	}
	class RoundRobinPicker {
	    constructor(children, nextIndex = 0) {
	        this.children = children;
	        this.nextIndex = nextIndex;
	    }
	    pick(pickArgs) {
	        const childPicker = this.children[this.nextIndex].picker;
	        this.nextIndex = (this.nextIndex + 1) % this.children.length;
	        return childPicker.pick(pickArgs);
	    }
	    /**
	     * Check what the next subchannel returned would be. Used by the load
	     * balancer implementation to preserve this part of the picker state if
	     * possible when a subchannel connects or disconnects.
	     */
	    peekNextEndpoint() {
	        return this.children[this.nextIndex].endpoint;
	    }
	}
	class RoundRobinLoadBalancer {
	    constructor(channelControlHelper) {
	        this.channelControlHelper = channelControlHelper;
	        this.children = [];
	        this.currentState = connectivity_state_1.ConnectivityState.IDLE;
	        this.currentReadyPicker = null;
	        this.updatesPaused = false;
	        this.lastError = null;
	        this.childChannelControlHelper = (0, load_balancer_1.createChildChannelControlHelper)(channelControlHelper, {
	            updateState: (connectivityState, picker, errorMessage) => {
	                /* Ensure that name resolution is requested again after active
	                 * connections are dropped. This is more aggressive than necessary to
	                 * accomplish that, so we are counting on resolvers to have
	                 * reasonable rate limits. */
	                if (this.currentState === connectivity_state_1.ConnectivityState.READY && connectivityState !== connectivity_state_1.ConnectivityState.READY) {
	                    this.channelControlHelper.requestReresolution();
	                }
	                if (errorMessage) {
	                    this.lastError = errorMessage;
	                }
	                this.calculateAndUpdateState();
	            },
	        });
	    }
	    countChildrenWithState(state) {
	        return this.children.filter(child => child.getConnectivityState() === state)
	            .length;
	    }
	    calculateAndUpdateState() {
	        if (this.updatesPaused) {
	            return;
	        }
	        if (this.countChildrenWithState(connectivity_state_1.ConnectivityState.READY) > 0) {
	            const readyChildren = this.children.filter(child => child.getConnectivityState() === connectivity_state_1.ConnectivityState.READY);
	            let index = 0;
	            if (this.currentReadyPicker !== null) {
	                const nextPickedEndpoint = this.currentReadyPicker.peekNextEndpoint();
	                index = readyChildren.findIndex(child => (0, subchannel_address_1.endpointEqual)(child.getEndpoint(), nextPickedEndpoint));
	                if (index < 0) {
	                    index = 0;
	                }
	            }
	            this.updateState(connectivity_state_1.ConnectivityState.READY, new RoundRobinPicker(readyChildren.map(child => ({
	                endpoint: child.getEndpoint(),
	                picker: child.getPicker(),
	            })), index), null);
	        }
	        else if (this.countChildrenWithState(connectivity_state_1.ConnectivityState.CONNECTING) > 0) {
	            this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this), null);
	        }
	        else if (this.countChildrenWithState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) > 0) {
	            const errorMessage = `round_robin: No connection established. Last error: ${this.lastError}`;
	            this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({
	                details: errorMessage,
	            }), errorMessage);
	        }
	        else {
	            this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this), null);
	        }
	        /* round_robin should keep all children connected, this is how we do that.
	         * We can't do this more efficiently in the individual child's updateState
	         * callback because that doesn't have a reference to which child the state
	         * change is associated with. */
	        for (const child of this.children) {
	            if (child.getConnectivityState() === connectivity_state_1.ConnectivityState.IDLE) {
	                child.exitIdle();
	            }
	        }
	    }
	    updateState(newState, picker, errorMessage) {
	        trace(connectivity_state_1.ConnectivityState[this.currentState] +
	            ' -> ' +
	            connectivity_state_1.ConnectivityState[newState]);
	        if (newState === connectivity_state_1.ConnectivityState.READY) {
	            this.currentReadyPicker = picker;
	        }
	        else {
	            this.currentReadyPicker = null;
	        }
	        this.currentState = newState;
	        this.channelControlHelper.updateState(newState, picker, errorMessage);
	    }
	    resetSubchannelList() {
	        for (const child of this.children) {
	            child.destroy();
	        }
	    }
	    updateAddressList(endpointList, lbConfig, options) {
	        this.resetSubchannelList();
	        trace('Connect to endpoint list ' + endpointList.map(subchannel_address_1.endpointToString));
	        this.updatesPaused = true;
	        this.children = endpointList.map(endpoint => new load_balancer_pick_first_1.LeafLoadBalancer(endpoint, this.childChannelControlHelper, options));
	        for (const child of this.children) {
	            child.startConnecting();
	        }
	        this.updatesPaused = false;
	        this.calculateAndUpdateState();
	    }
	    exitIdle() {
	        /* The round_robin LB policy is only in the IDLE state if it has no
	         * addresses to try to connect to and it has no picked subchannel.
	         * In that case, there is no meaningful action that can be taken here. */
	    }
	    resetBackoff() {
	        // This LB policy has no backoff to reset
	    }
	    destroy() {
	        this.resetSubchannelList();
	    }
	    getTypeName() {
	        return TYPE_NAME;
	    }
	}
	loadBalancerRoundRobin.RoundRobinLoadBalancer = RoundRobinLoadBalancer;
	function setup() {
	    (0, load_balancer_1.registerLoadBalancerType)(TYPE_NAME, RoundRobinLoadBalancer, RoundRobinLoadBalancingConfig);
	}
	
	return loadBalancerRoundRobin;
}

var loadBalancerOutlierDetection = {};

var hasRequiredLoadBalancerOutlierDetection;

function requireLoadBalancerOutlierDetection () {
	if (hasRequiredLoadBalancerOutlierDetection) return loadBalancerOutlierDetection;
	hasRequiredLoadBalancerOutlierDetection = 1;
	/*
	 * Copyright 2022 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	var _a;
	Object.defineProperty(loadBalancerOutlierDetection, "__esModule", { value: true });
	loadBalancerOutlierDetection.OutlierDetectionLoadBalancer = loadBalancerOutlierDetection.OutlierDetectionLoadBalancingConfig = void 0;
	loadBalancerOutlierDetection.setup = setup;
	const connectivity_state_1 = connectivityState;
	const constants_1 = constants;
	const duration_1 = requireDuration();
	const experimental_1 = requireExperimental();
	const load_balancer_1 = requireLoadBalancer();
	const load_balancer_child_handler_1 = requireLoadBalancerChildHandler();
	const picker_1 = requirePicker();
	const subchannel_address_1 = subchannelAddress;
	const subchannel_interface_1 = requireSubchannelInterface();
	const logging = logging$8;
	const TRACER_NAME = 'outlier_detection';
	function trace(text) {
	    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
	}
	const TYPE_NAME = 'outlier_detection';
	const OUTLIER_DETECTION_ENABLED = ((_a = process.env.GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION) !== null && _a !== void 0 ? _a : 'true') === 'true';
	const defaultSuccessRateEjectionConfig = {
	    stdev_factor: 1900,
	    enforcement_percentage: 100,
	    minimum_hosts: 5,
	    request_volume: 100,
	};
	const defaultFailurePercentageEjectionConfig = {
	    threshold: 85,
	    enforcement_percentage: 100,
	    minimum_hosts: 5,
	    request_volume: 50,
	};
	function validateFieldType(obj, fieldName, expectedType, objectName) {
	    if (fieldName in obj &&
	        obj[fieldName] !== undefined &&
	        typeof obj[fieldName] !== expectedType) {
	        const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;
	        throw new Error(`outlier detection config ${fullFieldName} parse error: expected ${expectedType}, got ${typeof obj[fieldName]}`);
	    }
	}
	function validatePositiveDuration(obj, fieldName, objectName) {
	    const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;
	    if (fieldName in obj && obj[fieldName] !== undefined) {
	        if (!(0, duration_1.isDuration)(obj[fieldName])) {
	            throw new Error(`outlier detection config ${fullFieldName} parse error: expected Duration, got ${typeof obj[fieldName]}`);
	        }
	        if (!(obj[fieldName].seconds >= 0 &&
	            obj[fieldName].seconds <= 315576000000 &&
	            obj[fieldName].nanos >= 0 &&
	            obj[fieldName].nanos <= 999999999)) {
	            throw new Error(`outlier detection config ${fullFieldName} parse error: values out of range for non-negative Duaration`);
	        }
	    }
	}
	function validatePercentage(obj, fieldName, objectName) {
	    const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;
	    validateFieldType(obj, fieldName, 'number', objectName);
	    if (fieldName in obj &&
	        obj[fieldName] !== undefined &&
	        !(obj[fieldName] >= 0 && obj[fieldName] <= 100)) {
	        throw new Error(`outlier detection config ${fullFieldName} parse error: value out of range for percentage (0-100)`);
	    }
	}
	class OutlierDetectionLoadBalancingConfig {
	    constructor(intervalMs, baseEjectionTimeMs, maxEjectionTimeMs, maxEjectionPercent, successRateEjection, failurePercentageEjection, childPolicy) {
	        this.childPolicy = childPolicy;
	        if (childPolicy.getLoadBalancerName() === 'pick_first') {
	            throw new Error('outlier_detection LB policy cannot have a pick_first child policy');
	        }
	        this.intervalMs = intervalMs !== null && intervalMs !== void 0 ? intervalMs : 10000;
	        this.baseEjectionTimeMs = baseEjectionTimeMs !== null && baseEjectionTimeMs !== void 0 ? baseEjectionTimeMs : 30000;
	        this.maxEjectionTimeMs = maxEjectionTimeMs !== null && maxEjectionTimeMs !== void 0 ? maxEjectionTimeMs : 300000;
	        this.maxEjectionPercent = maxEjectionPercent !== null && maxEjectionPercent !== void 0 ? maxEjectionPercent : 10;
	        this.successRateEjection = successRateEjection
	            ? Object.assign(Object.assign({}, defaultSuccessRateEjectionConfig), successRateEjection) : null;
	        this.failurePercentageEjection = failurePercentageEjection
	            ? Object.assign(Object.assign({}, defaultFailurePercentageEjectionConfig), failurePercentageEjection) : null;
	    }
	    getLoadBalancerName() {
	        return TYPE_NAME;
	    }
	    toJsonObject() {
	        var _a, _b;
	        return {
	            outlier_detection: {
	                interval: (0, duration_1.msToDuration)(this.intervalMs),
	                base_ejection_time: (0, duration_1.msToDuration)(this.baseEjectionTimeMs),
	                max_ejection_time: (0, duration_1.msToDuration)(this.maxEjectionTimeMs),
	                max_ejection_percent: this.maxEjectionPercent,
	                success_rate_ejection: (_a = this.successRateEjection) !== null && _a !== void 0 ? _a : undefined,
	                failure_percentage_ejection: (_b = this.failurePercentageEjection) !== null && _b !== void 0 ? _b : undefined,
	                child_policy: [this.childPolicy.toJsonObject()],
	            },
	        };
	    }
	    getIntervalMs() {
	        return this.intervalMs;
	    }
	    getBaseEjectionTimeMs() {
	        return this.baseEjectionTimeMs;
	    }
	    getMaxEjectionTimeMs() {
	        return this.maxEjectionTimeMs;
	    }
	    getMaxEjectionPercent() {
	        return this.maxEjectionPercent;
	    }
	    getSuccessRateEjectionConfig() {
	        return this.successRateEjection;
	    }
	    getFailurePercentageEjectionConfig() {
	        return this.failurePercentageEjection;
	    }
	    getChildPolicy() {
	        return this.childPolicy;
	    }
	    static createFromJson(obj) {
	        var _a;
	        validatePositiveDuration(obj, 'interval');
	        validatePositiveDuration(obj, 'base_ejection_time');
	        validatePositiveDuration(obj, 'max_ejection_time');
	        validatePercentage(obj, 'max_ejection_percent');
	        if ('success_rate_ejection' in obj &&
	            obj.success_rate_ejection !== undefined) {
	            if (typeof obj.success_rate_ejection !== 'object') {
	                throw new Error('outlier detection config success_rate_ejection must be an object');
	            }
	            validateFieldType(obj.success_rate_ejection, 'stdev_factor', 'number', 'success_rate_ejection');
	            validatePercentage(obj.success_rate_ejection, 'enforcement_percentage', 'success_rate_ejection');
	            validateFieldType(obj.success_rate_ejection, 'minimum_hosts', 'number', 'success_rate_ejection');
	            validateFieldType(obj.success_rate_ejection, 'request_volume', 'number', 'success_rate_ejection');
	        }
	        if ('failure_percentage_ejection' in obj &&
	            obj.failure_percentage_ejection !== undefined) {
	            if (typeof obj.failure_percentage_ejection !== 'object') {
	                throw new Error('outlier detection config failure_percentage_ejection must be an object');
	            }
	            validatePercentage(obj.failure_percentage_ejection, 'threshold', 'failure_percentage_ejection');
	            validatePercentage(obj.failure_percentage_ejection, 'enforcement_percentage', 'failure_percentage_ejection');
	            validateFieldType(obj.failure_percentage_ejection, 'minimum_hosts', 'number', 'failure_percentage_ejection');
	            validateFieldType(obj.failure_percentage_ejection, 'request_volume', 'number', 'failure_percentage_ejection');
	        }
	        if (!('child_policy' in obj) || !Array.isArray(obj.child_policy)) {
	            throw new Error('outlier detection config child_policy must be an array');
	        }
	        const childPolicy = (0, load_balancer_1.selectLbConfigFromList)(obj.child_policy);
	        if (!childPolicy) {
	            throw new Error('outlier detection config child_policy: no valid recognized policy found');
	        }
	        return new OutlierDetectionLoadBalancingConfig(obj.interval ? (0, duration_1.durationToMs)(obj.interval) : null, obj.base_ejection_time ? (0, duration_1.durationToMs)(obj.base_ejection_time) : null, obj.max_ejection_time ? (0, duration_1.durationToMs)(obj.max_ejection_time) : null, (_a = obj.max_ejection_percent) !== null && _a !== void 0 ? _a : null, obj.success_rate_ejection, obj.failure_percentage_ejection, childPolicy);
	    }
	}
	loadBalancerOutlierDetection.OutlierDetectionLoadBalancingConfig = OutlierDetectionLoadBalancingConfig;
	class OutlierDetectionSubchannelWrapper extends subchannel_interface_1.BaseSubchannelWrapper {
	    constructor(childSubchannel, mapEntry) {
	        super(childSubchannel);
	        this.mapEntry = mapEntry;
	        this.refCount = 0;
	    }
	    ref() {
	        this.child.ref();
	        this.refCount += 1;
	    }
	    unref() {
	        this.child.unref();
	        this.refCount -= 1;
	        if (this.refCount <= 0) {
	            if (this.mapEntry) {
	                const index = this.mapEntry.subchannelWrappers.indexOf(this);
	                if (index >= 0) {
	                    this.mapEntry.subchannelWrappers.splice(index, 1);
	                }
	            }
	        }
	    }
	    eject() {
	        this.setHealthy(false);
	    }
	    uneject() {
	        this.setHealthy(true);
	    }
	    getMapEntry() {
	        return this.mapEntry;
	    }
	    getWrappedSubchannel() {
	        return this.child;
	    }
	}
	function createEmptyBucket() {
	    return {
	        success: 0,
	        failure: 0,
	    };
	}
	class CallCounter {
	    constructor() {
	        this.activeBucket = createEmptyBucket();
	        this.inactiveBucket = createEmptyBucket();
	    }
	    addSuccess() {
	        this.activeBucket.success += 1;
	    }
	    addFailure() {
	        this.activeBucket.failure += 1;
	    }
	    switchBuckets() {
	        this.inactiveBucket = this.activeBucket;
	        this.activeBucket = createEmptyBucket();
	    }
	    getLastSuccesses() {
	        return this.inactiveBucket.success;
	    }
	    getLastFailures() {
	        return this.inactiveBucket.failure;
	    }
	}
	class OutlierDetectionPicker {
	    constructor(wrappedPicker, countCalls) {
	        this.wrappedPicker = wrappedPicker;
	        this.countCalls = countCalls;
	    }
	    pick(pickArgs) {
	        const wrappedPick = this.wrappedPicker.pick(pickArgs);
	        if (wrappedPick.pickResultType === picker_1.PickResultType.COMPLETE) {
	            const subchannelWrapper = wrappedPick.subchannel;
	            const mapEntry = subchannelWrapper.getMapEntry();
	            if (mapEntry) {
	                let onCallEnded = wrappedPick.onCallEnded;
	                if (this.countCalls) {
	                    onCallEnded = statusCode => {
	                        var _a;
	                        if (statusCode === constants_1.Status.OK) {
	                            mapEntry.counter.addSuccess();
	                        }
	                        else {
	                            mapEntry.counter.addFailure();
	                        }
	                        (_a = wrappedPick.onCallEnded) === null || _a === void 0 ? void 0 : _a.call(wrappedPick, statusCode);
	                    };
	                }
	                return Object.assign(Object.assign({}, wrappedPick), { subchannel: subchannelWrapper.getWrappedSubchannel(), onCallEnded: onCallEnded });
	            }
	            else {
	                return Object.assign(Object.assign({}, wrappedPick), { subchannel: subchannelWrapper.getWrappedSubchannel() });
	            }
	        }
	        else {
	            return wrappedPick;
	        }
	    }
	}
	class OutlierDetectionLoadBalancer {
	    constructor(channelControlHelper) {
	        this.entryMap = new subchannel_address_1.EndpointMap();
	        this.latestConfig = null;
	        this.timerStartTime = null;
	        this.childBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler((0, experimental_1.createChildChannelControlHelper)(channelControlHelper, {
	            createSubchannel: (subchannelAddress, subchannelArgs) => {
	                const originalSubchannel = channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);
	                const mapEntry = this.entryMap.getForSubchannelAddress(subchannelAddress);
	                const subchannelWrapper = new OutlierDetectionSubchannelWrapper(originalSubchannel, mapEntry);
	                if ((mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.currentEjectionTimestamp) !== null) {
	                    // If the address is ejected, propagate that to the new subchannel wrapper
	                    subchannelWrapper.eject();
	                }
	                mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.subchannelWrappers.push(subchannelWrapper);
	                return subchannelWrapper;
	            },
	            updateState: (connectivityState, picker, errorMessage) => {
	                if (connectivityState === connectivity_state_1.ConnectivityState.READY) {
	                    channelControlHelper.updateState(connectivityState, new OutlierDetectionPicker(picker, this.isCountingEnabled()), errorMessage);
	                }
	                else {
	                    channelControlHelper.updateState(connectivityState, picker, errorMessage);
	                }
	            },
	        }));
	        this.ejectionTimer = setInterval(() => { }, 0);
	        clearInterval(this.ejectionTimer);
	    }
	    isCountingEnabled() {
	        return (this.latestConfig !== null &&
	            (this.latestConfig.getSuccessRateEjectionConfig() !== null ||
	                this.latestConfig.getFailurePercentageEjectionConfig() !== null));
	    }
	    getCurrentEjectionPercent() {
	        let ejectionCount = 0;
	        for (const mapEntry of this.entryMap.values()) {
	            if (mapEntry.currentEjectionTimestamp !== null) {
	                ejectionCount += 1;
	            }
	        }
	        return (ejectionCount * 100) / this.entryMap.size;
	    }
	    runSuccessRateCheck(ejectionTimestamp) {
	        if (!this.latestConfig) {
	            return;
	        }
	        const successRateConfig = this.latestConfig.getSuccessRateEjectionConfig();
	        if (!successRateConfig) {
	            return;
	        }
	        trace('Running success rate check');
	        // Step 1
	        const targetRequestVolume = successRateConfig.request_volume;
	        let addresesWithTargetVolume = 0;
	        const successRates = [];
	        for (const [endpoint, mapEntry] of this.entryMap.entries()) {
	            const successes = mapEntry.counter.getLastSuccesses();
	            const failures = mapEntry.counter.getLastFailures();
	            trace('Stats for ' +
	                (0, subchannel_address_1.endpointToString)(endpoint) +
	                ': successes=' +
	                successes +
	                ' failures=' +
	                failures +
	                ' targetRequestVolume=' +
	                targetRequestVolume);
	            if (successes + failures >= targetRequestVolume) {
	                addresesWithTargetVolume += 1;
	                successRates.push(successes / (successes + failures));
	            }
	        }
	        trace('Found ' +
	            addresesWithTargetVolume +
	            ' success rate candidates; currentEjectionPercent=' +
	            this.getCurrentEjectionPercent() +
	            ' successRates=[' +
	            successRates +
	            ']');
	        if (addresesWithTargetVolume < successRateConfig.minimum_hosts) {
	            return;
	        }
	        // Step 2
	        const successRateMean = successRates.reduce((a, b) => a + b) / successRates.length;
	        let successRateDeviationSum = 0;
	        for (const rate of successRates) {
	            const deviation = rate - successRateMean;
	            successRateDeviationSum += deviation * deviation;
	        }
	        const successRateVariance = successRateDeviationSum / successRates.length;
	        const successRateStdev = Math.sqrt(successRateVariance);
	        const ejectionThreshold = successRateMean -
	            successRateStdev * (successRateConfig.stdev_factor / 1000);
	        trace('stdev=' + successRateStdev + ' ejectionThreshold=' + ejectionThreshold);
	        // Step 3
	        for (const [address, mapEntry] of this.entryMap.entries()) {
	            // Step 3.i
	            if (this.getCurrentEjectionPercent() >=
	                this.latestConfig.getMaxEjectionPercent()) {
	                break;
	            }
	            // Step 3.ii
	            const successes = mapEntry.counter.getLastSuccesses();
	            const failures = mapEntry.counter.getLastFailures();
	            if (successes + failures < targetRequestVolume) {
	                continue;
	            }
	            // Step 3.iii
	            const successRate = successes / (successes + failures);
	            trace('Checking candidate ' + address + ' successRate=' + successRate);
	            if (successRate < ejectionThreshold) {
	                const randomNumber = Math.random() * 100;
	                trace('Candidate ' +
	                    address +
	                    ' randomNumber=' +
	                    randomNumber +
	                    ' enforcement_percentage=' +
	                    successRateConfig.enforcement_percentage);
	                if (randomNumber < successRateConfig.enforcement_percentage) {
	                    trace('Ejecting candidate ' + address);
	                    this.eject(mapEntry, ejectionTimestamp);
	                }
	            }
	        }
	    }
	    runFailurePercentageCheck(ejectionTimestamp) {
	        if (!this.latestConfig) {
	            return;
	        }
	        const failurePercentageConfig = this.latestConfig.getFailurePercentageEjectionConfig();
	        if (!failurePercentageConfig) {
	            return;
	        }
	        trace('Running failure percentage check. threshold=' +
	            failurePercentageConfig.threshold +
	            ' request volume threshold=' +
	            failurePercentageConfig.request_volume);
	        // Step 1
	        let addressesWithTargetVolume = 0;
	        for (const mapEntry of this.entryMap.values()) {
	            const successes = mapEntry.counter.getLastSuccesses();
	            const failures = mapEntry.counter.getLastFailures();
	            if (successes + failures >= failurePercentageConfig.request_volume) {
	                addressesWithTargetVolume += 1;
	            }
	        }
	        if (addressesWithTargetVolume < failurePercentageConfig.minimum_hosts) {
	            return;
	        }
	        // Step 2
	        for (const [address, mapEntry] of this.entryMap.entries()) {
	            // Step 2.i
	            if (this.getCurrentEjectionPercent() >=
	                this.latestConfig.getMaxEjectionPercent()) {
	                break;
	            }
	            // Step 2.ii
	            const successes = mapEntry.counter.getLastSuccesses();
	            const failures = mapEntry.counter.getLastFailures();
	            trace('Candidate successes=' + successes + ' failures=' + failures);
	            if (successes + failures < failurePercentageConfig.request_volume) {
	                continue;
	            }
	            // Step 2.iii
	            const failurePercentage = (failures * 100) / (failures + successes);
	            if (failurePercentage > failurePercentageConfig.threshold) {
	                const randomNumber = Math.random() * 100;
	                trace('Candidate ' +
	                    address +
	                    ' randomNumber=' +
	                    randomNumber +
	                    ' enforcement_percentage=' +
	                    failurePercentageConfig.enforcement_percentage);
	                if (randomNumber < failurePercentageConfig.enforcement_percentage) {
	                    trace('Ejecting candidate ' + address);
	                    this.eject(mapEntry, ejectionTimestamp);
	                }
	            }
	        }
	    }
	    eject(mapEntry, ejectionTimestamp) {
	        mapEntry.currentEjectionTimestamp = new Date();
	        mapEntry.ejectionTimeMultiplier += 1;
	        for (const subchannelWrapper of mapEntry.subchannelWrappers) {
	            subchannelWrapper.eject();
	        }
	    }
	    uneject(mapEntry) {
	        mapEntry.currentEjectionTimestamp = null;
	        for (const subchannelWrapper of mapEntry.subchannelWrappers) {
	            subchannelWrapper.uneject();
	        }
	    }
	    switchAllBuckets() {
	        for (const mapEntry of this.entryMap.values()) {
	            mapEntry.counter.switchBuckets();
	        }
	    }
	    startTimer(delayMs) {
	        var _a, _b;
	        this.ejectionTimer = setTimeout(() => this.runChecks(), delayMs);
	        (_b = (_a = this.ejectionTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
	    }
	    runChecks() {
	        const ejectionTimestamp = new Date();
	        trace('Ejection timer running');
	        this.switchAllBuckets();
	        if (!this.latestConfig) {
	            return;
	        }
	        this.timerStartTime = ejectionTimestamp;
	        this.startTimer(this.latestConfig.getIntervalMs());
	        this.runSuccessRateCheck(ejectionTimestamp);
	        this.runFailurePercentageCheck(ejectionTimestamp);
	        for (const [address, mapEntry] of this.entryMap.entries()) {
	            if (mapEntry.currentEjectionTimestamp === null) {
	                if (mapEntry.ejectionTimeMultiplier > 0) {
	                    mapEntry.ejectionTimeMultiplier -= 1;
	                }
	            }
	            else {
	                const baseEjectionTimeMs = this.latestConfig.getBaseEjectionTimeMs();
	                const maxEjectionTimeMs = this.latestConfig.getMaxEjectionTimeMs();
	                const returnTime = new Date(mapEntry.currentEjectionTimestamp.getTime());
	                returnTime.setMilliseconds(returnTime.getMilliseconds() +
	                    Math.min(baseEjectionTimeMs * mapEntry.ejectionTimeMultiplier, Math.max(baseEjectionTimeMs, maxEjectionTimeMs)));
	                if (returnTime < new Date()) {
	                    trace('Unejecting ' + address);
	                    this.uneject(mapEntry);
	                }
	            }
	        }
	    }
	    updateAddressList(endpointList, lbConfig, options) {
	        if (!(lbConfig instanceof OutlierDetectionLoadBalancingConfig)) {
	            return;
	        }
	        trace('Received update with config: ' + JSON.stringify(lbConfig.toJsonObject(), undefined, 2));
	        for (const endpoint of endpointList) {
	            if (!this.entryMap.has(endpoint)) {
	                trace('Adding map entry for ' + (0, subchannel_address_1.endpointToString)(endpoint));
	                this.entryMap.set(endpoint, {
	                    counter: new CallCounter(),
	                    currentEjectionTimestamp: null,
	                    ejectionTimeMultiplier: 0,
	                    subchannelWrappers: [],
	                });
	            }
	        }
	        this.entryMap.deleteMissing(endpointList);
	        const childPolicy = lbConfig.getChildPolicy();
	        this.childBalancer.updateAddressList(endpointList, childPolicy, options);
	        if (lbConfig.getSuccessRateEjectionConfig() ||
	            lbConfig.getFailurePercentageEjectionConfig()) {
	            if (this.timerStartTime) {
	                trace('Previous timer existed. Replacing timer');
	                clearTimeout(this.ejectionTimer);
	                const remainingDelay = lbConfig.getIntervalMs() -
	                    (new Date().getTime() - this.timerStartTime.getTime());
	                this.startTimer(remainingDelay);
	            }
	            else {
	                trace('Starting new timer');
	                this.timerStartTime = new Date();
	                this.startTimer(lbConfig.getIntervalMs());
	                this.switchAllBuckets();
	            }
	        }
	        else {
	            trace('Counting disabled. Cancelling timer.');
	            this.timerStartTime = null;
	            clearTimeout(this.ejectionTimer);
	            for (const mapEntry of this.entryMap.values()) {
	                this.uneject(mapEntry);
	                mapEntry.ejectionTimeMultiplier = 0;
	            }
	        }
	        this.latestConfig = lbConfig;
	    }
	    exitIdle() {
	        this.childBalancer.exitIdle();
	    }
	    resetBackoff() {
	        this.childBalancer.resetBackoff();
	    }
	    destroy() {
	        clearTimeout(this.ejectionTimer);
	        this.childBalancer.destroy();
	    }
	    getTypeName() {
	        return TYPE_NAME;
	    }
	}
	loadBalancerOutlierDetection.OutlierDetectionLoadBalancer = OutlierDetectionLoadBalancer;
	function setup() {
	    if (OUTLIER_DETECTION_ENABLED) {
	        (0, experimental_1.registerLoadBalancerType)(TYPE_NAME, OutlierDetectionLoadBalancer, OutlierDetectionLoadBalancingConfig);
	    }
	}
	
	return loadBalancerOutlierDetection;
}

(function (exports) {
	/*
	 * Copyright 2019 gRPC authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.experimental = exports.ServerInterceptingCall = exports.ResponderBuilder = exports.ServerListenerBuilder = exports.addAdminServicesToServer = exports.getChannelzHandlers = exports.getChannelzServiceDefinition = exports.InterceptorConfigurationError = exports.InterceptingCall = exports.RequesterBuilder = exports.ListenerBuilder = exports.StatusBuilder = exports.getClientChannel = exports.ServerCredentials = exports.Server = exports.setLogVerbosity = exports.setLogger = exports.load = exports.loadObject = exports.CallCredentials = exports.ChannelCredentials = exports.waitForClientReady = exports.closeClient = exports.Channel = exports.makeGenericClientConstructor = exports.makeClientConstructor = exports.loadPackageDefinition = exports.Client = exports.compressionAlgorithms = exports.propagate = exports.connectivityState = exports.status = exports.logVerbosity = exports.Metadata = exports.credentials = void 0;
	const call_credentials_1 = callCredentials;
	Object.defineProperty(exports, "CallCredentials", { enumerable: true, get: function () { return call_credentials_1.CallCredentials; } });
	const channel_1 = requireChannel();
	Object.defineProperty(exports, "Channel", { enumerable: true, get: function () { return channel_1.ChannelImplementation; } });
	const compression_algorithms_1 = compressionAlgorithms;
	Object.defineProperty(exports, "compressionAlgorithms", { enumerable: true, get: function () { return compression_algorithms_1.CompressionAlgorithms; } });
	const connectivity_state_1 = connectivityState;
	Object.defineProperty(exports, "connectivityState", { enumerable: true, get: function () { return connectivity_state_1.ConnectivityState; } });
	const channel_credentials_1 = channelCredentials;
	Object.defineProperty(exports, "ChannelCredentials", { enumerable: true, get: function () { return channel_credentials_1.ChannelCredentials; } });
	const client_1 = requireClient();
	Object.defineProperty(exports, "Client", { enumerable: true, get: function () { return client_1.Client; } });
	const constants_1 = constants;
	Object.defineProperty(exports, "logVerbosity", { enumerable: true, get: function () { return constants_1.LogVerbosity; } });
	Object.defineProperty(exports, "status", { enumerable: true, get: function () { return constants_1.Status; } });
	Object.defineProperty(exports, "propagate", { enumerable: true, get: function () { return constants_1.Propagate; } });
	const logging = logging$8;
	const make_client_1 = requireMakeClient();
	Object.defineProperty(exports, "loadPackageDefinition", { enumerable: true, get: function () { return make_client_1.loadPackageDefinition; } });
	Object.defineProperty(exports, "makeClientConstructor", { enumerable: true, get: function () { return make_client_1.makeClientConstructor; } });
	Object.defineProperty(exports, "makeGenericClientConstructor", { enumerable: true, get: function () { return make_client_1.makeClientConstructor; } });
	const metadata_1 = metadata;
	Object.defineProperty(exports, "Metadata", { enumerable: true, get: function () { return metadata_1.Metadata; } });
	const server_1 = server;
	Object.defineProperty(exports, "Server", { enumerable: true, get: function () { return server_1.Server; } });
	const server_credentials_1 = serverCredentials;
	Object.defineProperty(exports, "ServerCredentials", { enumerable: true, get: function () { return server_credentials_1.ServerCredentials; } });
	const status_builder_1 = statusBuilder;
	Object.defineProperty(exports, "StatusBuilder", { enumerable: true, get: function () { return status_builder_1.StatusBuilder; } });
	/**** Client Credentials ****/
	// Using assign only copies enumerable properties, which is what we want
	exports.credentials = {
	    /**
	     * Combine a ChannelCredentials with any number of CallCredentials into a
	     * single ChannelCredentials object.
	     * @param channelCredentials The ChannelCredentials object.
	     * @param callCredentials Any number of CallCredentials objects.
	     * @return The resulting ChannelCredentials object.
	     */
	    combineChannelCredentials: (channelCredentials, ...callCredentials) => {
	        return callCredentials.reduce((acc, other) => acc.compose(other), channelCredentials);
	    },
	    /**
	     * Combine any number of CallCredentials into a single CallCredentials
	     * object.
	     * @param first The first CallCredentials object.
	     * @param additional Any number of additional CallCredentials objects.
	     * @return The resulting CallCredentials object.
	     */
	    combineCallCredentials: (first, ...additional) => {
	        return additional.reduce((acc, other) => acc.compose(other), first);
	    },
	    // from channel-credentials.ts
	    createInsecure: channel_credentials_1.ChannelCredentials.createInsecure,
	    createSsl: channel_credentials_1.ChannelCredentials.createSsl,
	    createFromSecureContext: channel_credentials_1.ChannelCredentials.createFromSecureContext,
	    // from call-credentials.ts
	    createFromMetadataGenerator: call_credentials_1.CallCredentials.createFromMetadataGenerator,
	    createFromGoogleCredential: call_credentials_1.CallCredentials.createFromGoogleCredential,
	    createEmpty: call_credentials_1.CallCredentials.createEmpty,
	};
	/**
	 * Close a Client object.
	 * @param client The client to close.
	 */
	const closeClient = (client) => client.close();
	exports.closeClient = closeClient;
	const waitForClientReady = (client, deadline, callback) => client.waitForReady(deadline, callback);
	exports.waitForClientReady = waitForClientReady;
	/* eslint-enable @typescript-eslint/no-explicit-any */
	/**** Unimplemented function stubs ****/
	/* eslint-disable @typescript-eslint/no-explicit-any */
	const loadObject = (value, options) => {
	    throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');
	};
	exports.loadObject = loadObject;
	const load = (filename, format, options) => {
	    throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');
	};
	exports.load = load;
	const setLogger = (logger) => {
	    logging.setLogger(logger);
	};
	exports.setLogger = setLogger;
	const setLogVerbosity = (verbosity) => {
	    logging.setLoggerVerbosity(verbosity);
	};
	exports.setLogVerbosity = setLogVerbosity;
	const getClientChannel = (client) => {
	    return client_1.Client.prototype.getChannel.call(client);
	};
	exports.getClientChannel = getClientChannel;
	var client_interceptors_1 = requireClientInterceptors();
	Object.defineProperty(exports, "ListenerBuilder", { enumerable: true, get: function () { return client_interceptors_1.ListenerBuilder; } });
	Object.defineProperty(exports, "RequesterBuilder", { enumerable: true, get: function () { return client_interceptors_1.RequesterBuilder; } });
	Object.defineProperty(exports, "InterceptingCall", { enumerable: true, get: function () { return client_interceptors_1.InterceptingCall; } });
	Object.defineProperty(exports, "InterceptorConfigurationError", { enumerable: true, get: function () { return client_interceptors_1.InterceptorConfigurationError; } });
	var channelz_1 = requireChannelz();
	Object.defineProperty(exports, "getChannelzServiceDefinition", { enumerable: true, get: function () { return channelz_1.getChannelzServiceDefinition; } });
	Object.defineProperty(exports, "getChannelzHandlers", { enumerable: true, get: function () { return channelz_1.getChannelzHandlers; } });
	var admin_1 = requireAdmin();
	Object.defineProperty(exports, "addAdminServicesToServer", { enumerable: true, get: function () { return admin_1.addAdminServicesToServer; } });
	var server_interceptors_1 = requireServerInterceptors();
	Object.defineProperty(exports, "ServerListenerBuilder", { enumerable: true, get: function () { return server_interceptors_1.ServerListenerBuilder; } });
	Object.defineProperty(exports, "ResponderBuilder", { enumerable: true, get: function () { return server_interceptors_1.ResponderBuilder; } });
	Object.defineProperty(exports, "ServerInterceptingCall", { enumerable: true, get: function () { return server_interceptors_1.ServerInterceptingCall; } });
	const experimental = requireExperimental();
	exports.experimental = experimental;
	const resolver_dns = requireResolverDns();
	const resolver_uds = requireResolverUds();
	const resolver_ip = requireResolverIp();
	const load_balancer_pick_first = requireLoadBalancerPickFirst();
	const load_balancer_round_robin = requireLoadBalancerRoundRobin();
	const load_balancer_outlier_detection = requireLoadBalancerOutlierDetection();
	const channelz = requireChannelz();
	(() => {
	    resolver_dns.setup();
	    resolver_uds.setup();
	    resolver_ip.setup();
	    load_balancer_pick_first.setup();
	    load_balancer_round_robin.setup();
	    load_balancer_outlier_detection.setup();
	    channelz.setup();
	})();
	
} (src$2));

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: services/fetch_proxy/v1/fetch_proxy.proto
/* eslint-disable */
var HttpMethod;
(function (HttpMethod) {
    HttpMethod[HttpMethod["HTTP_METHOD_UNDEFINED"] = 0] = "HTTP_METHOD_UNDEFINED";
    HttpMethod[HttpMethod["HTTP_METHOD_GET"] = 1] = "HTTP_METHOD_GET";
    HttpMethod[HttpMethod["HTTP_METHOD_POST"] = 2] = "HTTP_METHOD_POST";
    HttpMethod[HttpMethod["HTTP_METHOD_PUT"] = 3] = "HTTP_METHOD_PUT";
    HttpMethod[HttpMethod["HTTP_METHOD_DELETE"] = 4] = "HTTP_METHOD_DELETE";
    HttpMethod[HttpMethod["HTTP_METHOD_HEAD"] = 5] = "HTTP_METHOD_HEAD";
    HttpMethod[HttpMethod["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(HttpMethod || (HttpMethod = {}));
function httpMethodFromJSON(object) {
    switch (object) {
        case 0:
        case "HTTP_METHOD_UNDEFINED":
            return HttpMethod.HTTP_METHOD_UNDEFINED;
        case 1:
        case "HTTP_METHOD_GET":
            return HttpMethod.HTTP_METHOD_GET;
        case 2:
        case "HTTP_METHOD_POST":
            return HttpMethod.HTTP_METHOD_POST;
        case 3:
        case "HTTP_METHOD_PUT":
            return HttpMethod.HTTP_METHOD_PUT;
        case 4:
        case "HTTP_METHOD_DELETE":
            return HttpMethod.HTTP_METHOD_DELETE;
        case 5:
        case "HTTP_METHOD_HEAD":
            return HttpMethod.HTTP_METHOD_HEAD;
        case -1:
        case "UNRECOGNIZED":
        default:
            return HttpMethod.UNRECOGNIZED;
    }
}
function httpMethodToJSON(object) {
    switch (object) {
        case HttpMethod.HTTP_METHOD_UNDEFINED:
            return "HTTP_METHOD_UNDEFINED";
        case HttpMethod.HTTP_METHOD_GET:
            return "HTTP_METHOD_GET";
        case HttpMethod.HTTP_METHOD_POST:
            return "HTTP_METHOD_POST";
        case HttpMethod.HTTP_METHOD_PUT:
            return "HTTP_METHOD_PUT";
        case HttpMethod.HTTP_METHOD_DELETE:
            return "HTTP_METHOD_DELETE";
        case HttpMethod.HTTP_METHOD_HEAD:
            return "HTTP_METHOD_HEAD";
        case HttpMethod.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var Region;
(function (Region) {
    Region[Region["REGION_UNDEFINED"] = 0] = "REGION_UNDEFINED";
    Region[Region["REGION_US_WEST_2"] = 1] = "REGION_US_WEST_2";
    Region[Region["REGION_EU_WEST_1"] = 2] = "REGION_EU_WEST_1";
    Region[Region["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Region || (Region = {}));
function regionFromJSON(object) {
    switch (object) {
        case 0:
        case "REGION_UNDEFINED":
            return Region.REGION_UNDEFINED;
        case 1:
        case "REGION_US_WEST_2":
            return Region.REGION_US_WEST_2;
        case 2:
        case "REGION_EU_WEST_1":
            return Region.REGION_EU_WEST_1;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Region.UNRECOGNIZED;
    }
}
function regionToJSON(object) {
    switch (object) {
        case Region.REGION_UNDEFINED:
            return "REGION_UNDEFINED";
        case Region.REGION_US_WEST_2:
            return "REGION_US_WEST_2";
        case Region.REGION_EU_WEST_1:
            return "REGION_EU_WEST_1";
        case Region.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseFetchRequest() {
    return { url: "", headers: {}, httpMethod: 0, bodyJson: undefined, region: undefined, contextId: "" };
}
const FetchRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        Object.entries(message.headers).forEach(([key, value]) => {
            FetchRequest_HeadersEntry.encode({ key: key, value }, writer.uint32(18).fork()).join();
        });
        if (message.httpMethod !== 0) {
            writer.uint32(24).int32(message.httpMethod);
        }
        if (message.bodyJson !== undefined) {
            writer.uint32(34).bytes(message.bodyJson);
        }
        if (message.region !== undefined) {
            writer.uint32(40).int32(message.region);
        }
        if (message.contextId !== "") {
            writer.uint32(50).string(message.contextId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFetchRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = FetchRequest_HeadersEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.headers[entry2.key] = entry2.value;
                    }
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.httpMethod = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.bodyJson = reader.bytes();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.region = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            url: isSet$5(object.url) ? globalThis.String(object.url) : "",
            headers: isObject$1(object.headers)
                ? Object.entries(object.headers).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            httpMethod: isSet$5(object.httpMethod) ? httpMethodFromJSON(object.httpMethod) : 0,
            bodyJson: isSet$5(object.bodyJson) ? bytesFromBase64$2(object.bodyJson) : undefined,
            region: isSet$5(object.region) ? regionFromJSON(object.region) : undefined,
            contextId: isSet$5(object.contextId) ? globalThis.String(object.contextId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.headers) {
            const entries = Object.entries(message.headers);
            if (entries.length > 0) {
                obj.headers = {};
                entries.forEach(([k, v]) => {
                    obj.headers[k] = v;
                });
            }
        }
        if (message.httpMethod !== 0) {
            obj.httpMethod = httpMethodToJSON(message.httpMethod);
        }
        if (message.bodyJson !== undefined) {
            obj.bodyJson = base64FromBytes$2(message.bodyJson);
        }
        if (message.region !== undefined) {
            obj.region = regionToJSON(message.region);
        }
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        return obj;
    },
    create(base) {
        return FetchRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFetchRequest();
        message.url = object.url ?? "";
        message.headers = Object.entries(object.headers ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.httpMethod = object.httpMethod ?? 0;
        message.bodyJson = object.bodyJson ?? undefined;
        message.region = object.region ?? undefined;
        message.contextId = object.contextId ?? "";
        return message;
    },
};
function createBaseFetchRequest_HeadersEntry() {
    return { key: "", value: "" };
}
const FetchRequest_HeadersEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFetchRequest_HeadersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet$5(object.key) ? globalThis.String(object.key) : "",
            value: isSet$5(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return FetchRequest_HeadersEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFetchRequest_HeadersEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
function createBaseFetchResponse() {
    return { response: new Uint8Array(0), statusCode: 0 };
}
const FetchResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.response.length !== 0) {
            writer.uint32(10).bytes(message.response);
        }
        if (message.statusCode !== 0) {
            writer.uint32(16).int32(message.statusCode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFetchResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.response = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.statusCode = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet$5(object.response) ? bytesFromBase64$2(object.response) : new Uint8Array(0),
            statusCode: isSet$5(object.statusCode) ? globalThis.Number(object.statusCode) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response.length !== 0) {
            obj.response = base64FromBytes$2(message.response);
        }
        if (message.statusCode !== 0) {
            obj.statusCode = Math.round(message.statusCode);
        }
        return obj;
    },
    create(base) {
        return FetchResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFetchResponse();
        message.response = object.response ?? new Uint8Array(0);
        message.statusCode = object.statusCode ?? 0;
        return message;
    },
};
const FusionFetchProxyService = {
    fetch: {
        path: "/services.fetch_proxy.v1.FusionFetchProxy/Fetch",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(FetchRequest.encode(value).finish()),
        requestDeserialize: (value) => FetchRequest.decode(value),
        responseSerialize: (value) => Buffer.from(FetchResponse.encode(value).finish()),
        responseDeserialize: (value) => FetchResponse.decode(value),
    },
};
src$2.makeGenericClientConstructor(FusionFetchProxyService, "services.fetch_proxy.v1.FusionFetchProxy");
function bytesFromBase64$2(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes$2(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isObject$1(value) {
    return typeof value === "object" && value !== null;
}
function isSet$5(value) {
    return value !== null && value !== undefined;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: notifi/common/v1/types.proto
/* eslint-disable */
var BlockchainType;
(function (BlockchainType) {
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_UNSPECIFIED"] = 0] = "BLOCKCHAIN_TYPE_UNSPECIFIED";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_SOLANA"] = 1] = "BLOCKCHAIN_TYPE_SOLANA";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_NEAR"] = 2] = "BLOCKCHAIN_TYPE_NEAR";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_ETHEREUM"] = 3] = "BLOCKCHAIN_TYPE_ETHEREUM";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_OFF_CHAIN"] = 4] = "BLOCKCHAIN_TYPE_OFF_CHAIN";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_POLYGON"] = 5] = "BLOCKCHAIN_TYPE_POLYGON";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_ARBITRUM"] = 6] = "BLOCKCHAIN_TYPE_ARBITRUM";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_BINANCE"] = 7] = "BLOCKCHAIN_TYPE_BINANCE";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_ACALA"] = 8] = "BLOCKCHAIN_TYPE_ACALA";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_APTOS"] = 9] = "BLOCKCHAIN_TYPE_APTOS";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_AVALANCHE"] = 10] = "BLOCKCHAIN_TYPE_AVALANCHE";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_OSMOSIS"] = 11] = "BLOCKCHAIN_TYPE_OSMOSIS";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_OPTIMISM"] = 12] = "BLOCKCHAIN_TYPE_OPTIMISM";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_INJECTIVE"] = 13] = "BLOCKCHAIN_TYPE_INJECTIVE";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_SUI"] = 14] = "BLOCKCHAIN_TYPE_SUI";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_EVMOS"] = 15] = "BLOCKCHAIN_TYPE_EVMOS";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_ZKSYNC"] = 16] = "BLOCKCHAIN_TYPE_ZKSYNC";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_NIBIRU"] = 17] = "BLOCKCHAIN_TYPE_NIBIRU";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_BASE"] = 18] = "BLOCKCHAIN_TYPE_BASE";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_BLAST"] = 19] = "BLOCKCHAIN_TYPE_BLAST";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_CELO"] = 20] = "BLOCKCHAIN_TYPE_CELO";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_MANTLE"] = 21] = "BLOCKCHAIN_TYPE_MANTLE";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_LINEA"] = 22] = "BLOCKCHAIN_TYPE_LINEA";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_SCROLL"] = 23] = "BLOCKCHAIN_TYPE_SCROLL";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_MANTA"] = 24] = "BLOCKCHAIN_TYPE_MANTA";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_MONAD"] = 25] = "BLOCKCHAIN_TYPE_MONAD";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_XION"] = 26] = "BLOCKCHAIN_TYPE_XION";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_ELYS"] = 27] = "BLOCKCHAIN_TYPE_ELYS";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_NEUTRON"] = 28] = "BLOCKCHAIN_TYPE_NEUTRON";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_ARCHWAY"] = 29] = "BLOCKCHAIN_TYPE_ARCHWAY";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_BERACHAIN"] = 30] = "BLOCKCHAIN_TYPE_BERACHAIN";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_AXELAR"] = 31] = "BLOCKCHAIN_TYPE_AXELAR";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_AGORIC"] = 32] = "BLOCKCHAIN_TYPE_AGORIC";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_ORAI"] = 33] = "BLOCKCHAIN_TYPE_ORAI";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_KAVA"] = 34] = "BLOCKCHAIN_TYPE_KAVA";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_CELESTIA"] = 35] = "BLOCKCHAIN_TYPE_CELESTIA";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_COSMOS"] = 36] = "BLOCKCHAIN_TYPE_COSMOS";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_DYMENSION"] = 37] = "BLOCKCHAIN_TYPE_DYMENSION";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_PERSISTENCE"] = 38] = "BLOCKCHAIN_TYPE_PERSISTENCE";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_DYDX"] = 39] = "BLOCKCHAIN_TYPE_DYDX";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_THE_ROOT_NETWORK"] = 40] = "BLOCKCHAIN_TYPE_THE_ROOT_NETWORK";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_MOVEMENT"] = 41] = "BLOCKCHAIN_TYPE_MOVEMENT";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_BITCOIN"] = 42] = "BLOCKCHAIN_TYPE_BITCOIN";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_ARCH"] = 43] = "BLOCKCHAIN_TYPE_ARCH";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_SONIC"] = 44] = "BLOCKCHAIN_TYPE_SONIC";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_ROME"] = 45] = "BLOCKCHAIN_TYPE_ROME";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_SEI"] = 46] = "BLOCKCHAIN_TYPE_SEI";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_ABSTRACT"] = 47] = "BLOCKCHAIN_TYPE_ABSTRACT";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_BOB"] = 48] = "BLOCKCHAIN_TYPE_BOB";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_SWELLCHAIN"] = 49] = "BLOCKCHAIN_TYPE_SWELLCHAIN";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_HYPEREVM"] = 50] = "BLOCKCHAIN_TYPE_HYPEREVM";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_UNICHAIN"] = 51] = "BLOCKCHAIN_TYPE_UNICHAIN";
    BlockchainType[BlockchainType["BLOCKCHAIN_TYPE_BOTANIX"] = 52] = "BLOCKCHAIN_TYPE_BOTANIX";
    BlockchainType[BlockchainType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockchainType || (BlockchainType = {}));
function blockchainTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "BLOCKCHAIN_TYPE_UNSPECIFIED":
            return BlockchainType.BLOCKCHAIN_TYPE_UNSPECIFIED;
        case 1:
        case "BLOCKCHAIN_TYPE_SOLANA":
            return BlockchainType.BLOCKCHAIN_TYPE_SOLANA;
        case 2:
        case "BLOCKCHAIN_TYPE_NEAR":
            return BlockchainType.BLOCKCHAIN_TYPE_NEAR;
        case 3:
        case "BLOCKCHAIN_TYPE_ETHEREUM":
            return BlockchainType.BLOCKCHAIN_TYPE_ETHEREUM;
        case 4:
        case "BLOCKCHAIN_TYPE_OFF_CHAIN":
            return BlockchainType.BLOCKCHAIN_TYPE_OFF_CHAIN;
        case 5:
        case "BLOCKCHAIN_TYPE_POLYGON":
            return BlockchainType.BLOCKCHAIN_TYPE_POLYGON;
        case 6:
        case "BLOCKCHAIN_TYPE_ARBITRUM":
            return BlockchainType.BLOCKCHAIN_TYPE_ARBITRUM;
        case 7:
        case "BLOCKCHAIN_TYPE_BINANCE":
            return BlockchainType.BLOCKCHAIN_TYPE_BINANCE;
        case 8:
        case "BLOCKCHAIN_TYPE_ACALA":
            return BlockchainType.BLOCKCHAIN_TYPE_ACALA;
        case 9:
        case "BLOCKCHAIN_TYPE_APTOS":
            return BlockchainType.BLOCKCHAIN_TYPE_APTOS;
        case 10:
        case "BLOCKCHAIN_TYPE_AVALANCHE":
            return BlockchainType.BLOCKCHAIN_TYPE_AVALANCHE;
        case 11:
        case "BLOCKCHAIN_TYPE_OSMOSIS":
            return BlockchainType.BLOCKCHAIN_TYPE_OSMOSIS;
        case 12:
        case "BLOCKCHAIN_TYPE_OPTIMISM":
            return BlockchainType.BLOCKCHAIN_TYPE_OPTIMISM;
        case 13:
        case "BLOCKCHAIN_TYPE_INJECTIVE":
            return BlockchainType.BLOCKCHAIN_TYPE_INJECTIVE;
        case 14:
        case "BLOCKCHAIN_TYPE_SUI":
            return BlockchainType.BLOCKCHAIN_TYPE_SUI;
        case 15:
        case "BLOCKCHAIN_TYPE_EVMOS":
            return BlockchainType.BLOCKCHAIN_TYPE_EVMOS;
        case 16:
        case "BLOCKCHAIN_TYPE_ZKSYNC":
            return BlockchainType.BLOCKCHAIN_TYPE_ZKSYNC;
        case 17:
        case "BLOCKCHAIN_TYPE_NIBIRU":
            return BlockchainType.BLOCKCHAIN_TYPE_NIBIRU;
        case 18:
        case "BLOCKCHAIN_TYPE_BASE":
            return BlockchainType.BLOCKCHAIN_TYPE_BASE;
        case 19:
        case "BLOCKCHAIN_TYPE_BLAST":
            return BlockchainType.BLOCKCHAIN_TYPE_BLAST;
        case 20:
        case "BLOCKCHAIN_TYPE_CELO":
            return BlockchainType.BLOCKCHAIN_TYPE_CELO;
        case 21:
        case "BLOCKCHAIN_TYPE_MANTLE":
            return BlockchainType.BLOCKCHAIN_TYPE_MANTLE;
        case 22:
        case "BLOCKCHAIN_TYPE_LINEA":
            return BlockchainType.BLOCKCHAIN_TYPE_LINEA;
        case 23:
        case "BLOCKCHAIN_TYPE_SCROLL":
            return BlockchainType.BLOCKCHAIN_TYPE_SCROLL;
        case 24:
        case "BLOCKCHAIN_TYPE_MANTA":
            return BlockchainType.BLOCKCHAIN_TYPE_MANTA;
        case 25:
        case "BLOCKCHAIN_TYPE_MONAD":
            return BlockchainType.BLOCKCHAIN_TYPE_MONAD;
        case 26:
        case "BLOCKCHAIN_TYPE_XION":
            return BlockchainType.BLOCKCHAIN_TYPE_XION;
        case 27:
        case "BLOCKCHAIN_TYPE_ELYS":
            return BlockchainType.BLOCKCHAIN_TYPE_ELYS;
        case 28:
        case "BLOCKCHAIN_TYPE_NEUTRON":
            return BlockchainType.BLOCKCHAIN_TYPE_NEUTRON;
        case 29:
        case "BLOCKCHAIN_TYPE_ARCHWAY":
            return BlockchainType.BLOCKCHAIN_TYPE_ARCHWAY;
        case 30:
        case "BLOCKCHAIN_TYPE_BERACHAIN":
            return BlockchainType.BLOCKCHAIN_TYPE_BERACHAIN;
        case 31:
        case "BLOCKCHAIN_TYPE_AXELAR":
            return BlockchainType.BLOCKCHAIN_TYPE_AXELAR;
        case 32:
        case "BLOCKCHAIN_TYPE_AGORIC":
            return BlockchainType.BLOCKCHAIN_TYPE_AGORIC;
        case 33:
        case "BLOCKCHAIN_TYPE_ORAI":
            return BlockchainType.BLOCKCHAIN_TYPE_ORAI;
        case 34:
        case "BLOCKCHAIN_TYPE_KAVA":
            return BlockchainType.BLOCKCHAIN_TYPE_KAVA;
        case 35:
        case "BLOCKCHAIN_TYPE_CELESTIA":
            return BlockchainType.BLOCKCHAIN_TYPE_CELESTIA;
        case 36:
        case "BLOCKCHAIN_TYPE_COSMOS":
            return BlockchainType.BLOCKCHAIN_TYPE_COSMOS;
        case 37:
        case "BLOCKCHAIN_TYPE_DYMENSION":
            return BlockchainType.BLOCKCHAIN_TYPE_DYMENSION;
        case 38:
        case "BLOCKCHAIN_TYPE_PERSISTENCE":
            return BlockchainType.BLOCKCHAIN_TYPE_PERSISTENCE;
        case 39:
        case "BLOCKCHAIN_TYPE_DYDX":
            return BlockchainType.BLOCKCHAIN_TYPE_DYDX;
        case 40:
        case "BLOCKCHAIN_TYPE_THE_ROOT_NETWORK":
            return BlockchainType.BLOCKCHAIN_TYPE_THE_ROOT_NETWORK;
        case 41:
        case "BLOCKCHAIN_TYPE_MOVEMENT":
            return BlockchainType.BLOCKCHAIN_TYPE_MOVEMENT;
        case 42:
        case "BLOCKCHAIN_TYPE_BITCOIN":
            return BlockchainType.BLOCKCHAIN_TYPE_BITCOIN;
        case 43:
        case "BLOCKCHAIN_TYPE_ARCH":
            return BlockchainType.BLOCKCHAIN_TYPE_ARCH;
        case 44:
        case "BLOCKCHAIN_TYPE_SONIC":
            return BlockchainType.BLOCKCHAIN_TYPE_SONIC;
        case 45:
        case "BLOCKCHAIN_TYPE_ROME":
            return BlockchainType.BLOCKCHAIN_TYPE_ROME;
        case 46:
        case "BLOCKCHAIN_TYPE_SEI":
            return BlockchainType.BLOCKCHAIN_TYPE_SEI;
        case 47:
        case "BLOCKCHAIN_TYPE_ABSTRACT":
            return BlockchainType.BLOCKCHAIN_TYPE_ABSTRACT;
        case 48:
        case "BLOCKCHAIN_TYPE_BOB":
            return BlockchainType.BLOCKCHAIN_TYPE_BOB;
        case 49:
        case "BLOCKCHAIN_TYPE_SWELLCHAIN":
            return BlockchainType.BLOCKCHAIN_TYPE_SWELLCHAIN;
        case 50:
        case "BLOCKCHAIN_TYPE_HYPEREVM":
            return BlockchainType.BLOCKCHAIN_TYPE_HYPEREVM;
        case 51:
        case "BLOCKCHAIN_TYPE_UNICHAIN":
            return BlockchainType.BLOCKCHAIN_TYPE_UNICHAIN;
        case 52:
        case "BLOCKCHAIN_TYPE_BOTANIX":
            return BlockchainType.BLOCKCHAIN_TYPE_BOTANIX;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockchainType.UNRECOGNIZED;
    }
}
function blockchainTypeToJSON(object) {
    switch (object) {
        case BlockchainType.BLOCKCHAIN_TYPE_UNSPECIFIED:
            return "BLOCKCHAIN_TYPE_UNSPECIFIED";
        case BlockchainType.BLOCKCHAIN_TYPE_SOLANA:
            return "BLOCKCHAIN_TYPE_SOLANA";
        case BlockchainType.BLOCKCHAIN_TYPE_NEAR:
            return "BLOCKCHAIN_TYPE_NEAR";
        case BlockchainType.BLOCKCHAIN_TYPE_ETHEREUM:
            return "BLOCKCHAIN_TYPE_ETHEREUM";
        case BlockchainType.BLOCKCHAIN_TYPE_OFF_CHAIN:
            return "BLOCKCHAIN_TYPE_OFF_CHAIN";
        case BlockchainType.BLOCKCHAIN_TYPE_POLYGON:
            return "BLOCKCHAIN_TYPE_POLYGON";
        case BlockchainType.BLOCKCHAIN_TYPE_ARBITRUM:
            return "BLOCKCHAIN_TYPE_ARBITRUM";
        case BlockchainType.BLOCKCHAIN_TYPE_BINANCE:
            return "BLOCKCHAIN_TYPE_BINANCE";
        case BlockchainType.BLOCKCHAIN_TYPE_ACALA:
            return "BLOCKCHAIN_TYPE_ACALA";
        case BlockchainType.BLOCKCHAIN_TYPE_APTOS:
            return "BLOCKCHAIN_TYPE_APTOS";
        case BlockchainType.BLOCKCHAIN_TYPE_AVALANCHE:
            return "BLOCKCHAIN_TYPE_AVALANCHE";
        case BlockchainType.BLOCKCHAIN_TYPE_OSMOSIS:
            return "BLOCKCHAIN_TYPE_OSMOSIS";
        case BlockchainType.BLOCKCHAIN_TYPE_OPTIMISM:
            return "BLOCKCHAIN_TYPE_OPTIMISM";
        case BlockchainType.BLOCKCHAIN_TYPE_INJECTIVE:
            return "BLOCKCHAIN_TYPE_INJECTIVE";
        case BlockchainType.BLOCKCHAIN_TYPE_SUI:
            return "BLOCKCHAIN_TYPE_SUI";
        case BlockchainType.BLOCKCHAIN_TYPE_EVMOS:
            return "BLOCKCHAIN_TYPE_EVMOS";
        case BlockchainType.BLOCKCHAIN_TYPE_ZKSYNC:
            return "BLOCKCHAIN_TYPE_ZKSYNC";
        case BlockchainType.BLOCKCHAIN_TYPE_NIBIRU:
            return "BLOCKCHAIN_TYPE_NIBIRU";
        case BlockchainType.BLOCKCHAIN_TYPE_BASE:
            return "BLOCKCHAIN_TYPE_BASE";
        case BlockchainType.BLOCKCHAIN_TYPE_BLAST:
            return "BLOCKCHAIN_TYPE_BLAST";
        case BlockchainType.BLOCKCHAIN_TYPE_CELO:
            return "BLOCKCHAIN_TYPE_CELO";
        case BlockchainType.BLOCKCHAIN_TYPE_MANTLE:
            return "BLOCKCHAIN_TYPE_MANTLE";
        case BlockchainType.BLOCKCHAIN_TYPE_LINEA:
            return "BLOCKCHAIN_TYPE_LINEA";
        case BlockchainType.BLOCKCHAIN_TYPE_SCROLL:
            return "BLOCKCHAIN_TYPE_SCROLL";
        case BlockchainType.BLOCKCHAIN_TYPE_MANTA:
            return "BLOCKCHAIN_TYPE_MANTA";
        case BlockchainType.BLOCKCHAIN_TYPE_MONAD:
            return "BLOCKCHAIN_TYPE_MONAD";
        case BlockchainType.BLOCKCHAIN_TYPE_XION:
            return "BLOCKCHAIN_TYPE_XION";
        case BlockchainType.BLOCKCHAIN_TYPE_ELYS:
            return "BLOCKCHAIN_TYPE_ELYS";
        case BlockchainType.BLOCKCHAIN_TYPE_NEUTRON:
            return "BLOCKCHAIN_TYPE_NEUTRON";
        case BlockchainType.BLOCKCHAIN_TYPE_ARCHWAY:
            return "BLOCKCHAIN_TYPE_ARCHWAY";
        case BlockchainType.BLOCKCHAIN_TYPE_BERACHAIN:
            return "BLOCKCHAIN_TYPE_BERACHAIN";
        case BlockchainType.BLOCKCHAIN_TYPE_AXELAR:
            return "BLOCKCHAIN_TYPE_AXELAR";
        case BlockchainType.BLOCKCHAIN_TYPE_AGORIC:
            return "BLOCKCHAIN_TYPE_AGORIC";
        case BlockchainType.BLOCKCHAIN_TYPE_ORAI:
            return "BLOCKCHAIN_TYPE_ORAI";
        case BlockchainType.BLOCKCHAIN_TYPE_KAVA:
            return "BLOCKCHAIN_TYPE_KAVA";
        case BlockchainType.BLOCKCHAIN_TYPE_CELESTIA:
            return "BLOCKCHAIN_TYPE_CELESTIA";
        case BlockchainType.BLOCKCHAIN_TYPE_COSMOS:
            return "BLOCKCHAIN_TYPE_COSMOS";
        case BlockchainType.BLOCKCHAIN_TYPE_DYMENSION:
            return "BLOCKCHAIN_TYPE_DYMENSION";
        case BlockchainType.BLOCKCHAIN_TYPE_PERSISTENCE:
            return "BLOCKCHAIN_TYPE_PERSISTENCE";
        case BlockchainType.BLOCKCHAIN_TYPE_DYDX:
            return "BLOCKCHAIN_TYPE_DYDX";
        case BlockchainType.BLOCKCHAIN_TYPE_THE_ROOT_NETWORK:
            return "BLOCKCHAIN_TYPE_THE_ROOT_NETWORK";
        case BlockchainType.BLOCKCHAIN_TYPE_MOVEMENT:
            return "BLOCKCHAIN_TYPE_MOVEMENT";
        case BlockchainType.BLOCKCHAIN_TYPE_BITCOIN:
            return "BLOCKCHAIN_TYPE_BITCOIN";
        case BlockchainType.BLOCKCHAIN_TYPE_ARCH:
            return "BLOCKCHAIN_TYPE_ARCH";
        case BlockchainType.BLOCKCHAIN_TYPE_SONIC:
            return "BLOCKCHAIN_TYPE_SONIC";
        case BlockchainType.BLOCKCHAIN_TYPE_ROME:
            return "BLOCKCHAIN_TYPE_ROME";
        case BlockchainType.BLOCKCHAIN_TYPE_SEI:
            return "BLOCKCHAIN_TYPE_SEI";
        case BlockchainType.BLOCKCHAIN_TYPE_ABSTRACT:
            return "BLOCKCHAIN_TYPE_ABSTRACT";
        case BlockchainType.BLOCKCHAIN_TYPE_BOB:
            return "BLOCKCHAIN_TYPE_BOB";
        case BlockchainType.BLOCKCHAIN_TYPE_SWELLCHAIN:
            return "BLOCKCHAIN_TYPE_SWELLCHAIN";
        case BlockchainType.BLOCKCHAIN_TYPE_HYPEREVM:
            return "BLOCKCHAIN_TYPE_HYPEREVM";
        case BlockchainType.BLOCKCHAIN_TYPE_UNICHAIN:
            return "BLOCKCHAIN_TYPE_UNICHAIN";
        case BlockchainType.BLOCKCHAIN_TYPE_BOTANIX:
            return "BLOCKCHAIN_TYPE_BOTANIX";
        case BlockchainType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var FusionStorageType;
(function (FusionStorageType) {
    FusionStorageType[FusionStorageType["FUSION_STORAGE_TYPE_UNSPECIFIED"] = 0] = "FUSION_STORAGE_TYPE_UNSPECIFIED";
    FusionStorageType[FusionStorageType["FUSION_STORAGE_TYPE_INTERNAL_BLOB"] = 1] = "FUSION_STORAGE_TYPE_INTERNAL_BLOB";
    FusionStorageType[FusionStorageType["FUSION_STORAGE_TYPE_INTERNAL_DB"] = 2] = "FUSION_STORAGE_TYPE_INTERNAL_DB";
    FusionStorageType[FusionStorageType["FUSION_STORAGE_TYPE_INTERNAL_CACHE"] = 3] = "FUSION_STORAGE_TYPE_INTERNAL_CACHE";
    FusionStorageType[FusionStorageType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FusionStorageType || (FusionStorageType = {}));
function fusionStorageTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "FUSION_STORAGE_TYPE_UNSPECIFIED":
            return FusionStorageType.FUSION_STORAGE_TYPE_UNSPECIFIED;
        case 1:
        case "FUSION_STORAGE_TYPE_INTERNAL_BLOB":
            return FusionStorageType.FUSION_STORAGE_TYPE_INTERNAL_BLOB;
        case 2:
        case "FUSION_STORAGE_TYPE_INTERNAL_DB":
            return FusionStorageType.FUSION_STORAGE_TYPE_INTERNAL_DB;
        case 3:
        case "FUSION_STORAGE_TYPE_INTERNAL_CACHE":
            return FusionStorageType.FUSION_STORAGE_TYPE_INTERNAL_CACHE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return FusionStorageType.UNRECOGNIZED;
    }
}
function fusionStorageTypeToJSON(object) {
    switch (object) {
        case FusionStorageType.FUSION_STORAGE_TYPE_UNSPECIFIED:
            return "FUSION_STORAGE_TYPE_UNSPECIFIED";
        case FusionStorageType.FUSION_STORAGE_TYPE_INTERNAL_BLOB:
            return "FUSION_STORAGE_TYPE_INTERNAL_BLOB";
        case FusionStorageType.FUSION_STORAGE_TYPE_INTERNAL_DB:
            return "FUSION_STORAGE_TYPE_INTERNAL_DB";
        case FusionStorageType.FUSION_STORAGE_TYPE_INTERNAL_CACHE:
            return "FUSION_STORAGE_TYPE_INTERNAL_CACHE";
        case FusionStorageType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var FusionSourceStateType;
(function (FusionSourceStateType) {
    FusionSourceStateType[FusionSourceStateType["FUSION_SOURCE_STATE_TYPE_UNSPECIFIED"] = 0] = "FUSION_SOURCE_STATE_TYPE_UNSPECIFIED";
    FusionSourceStateType[FusionSourceStateType["FUSION_SOURCE_STATE_TYPE_UNKNOWN"] = 1] = "FUSION_SOURCE_STATE_TYPE_UNKNOWN";
    FusionSourceStateType[FusionSourceStateType["FUSION_SOURCE_STATE_TYPE_PROCESSING"] = 2] = "FUSION_SOURCE_STATE_TYPE_PROCESSING";
    FusionSourceStateType[FusionSourceStateType["FUSION_SOURCE_STATE_TYPE_ACTIVE"] = 3] = "FUSION_SOURCE_STATE_TYPE_ACTIVE";
    FusionSourceStateType[FusionSourceStateType["FUSION_SOURCE_STATE_TYPE_INACTIVE"] = 4] = "FUSION_SOURCE_STATE_TYPE_INACTIVE";
    FusionSourceStateType[FusionSourceStateType["FUSION_SOURCE_STATE_TYPE_ERROR"] = 5] = "FUSION_SOURCE_STATE_TYPE_ERROR";
    FusionSourceStateType[FusionSourceStateType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FusionSourceStateType || (FusionSourceStateType = {}));
var LimitedResourceType;
(function (LimitedResourceType) {
    LimitedResourceType[LimitedResourceType["LIMITED_RESOURCE_TYPE_UNSPECIFIED"] = 0] = "LIMITED_RESOURCE_TYPE_UNSPECIFIED";
    LimitedResourceType[LimitedResourceType["LIMITED_RESOURCE_TYPE_USER_MESSENGER"] = 1] = "LIMITED_RESOURCE_TYPE_USER_MESSENGER";
    LimitedResourceType[LimitedResourceType["LIMITED_RESOURCE_TYPE_TENANT_CONFIG_ADMIN"] = 2] = "LIMITED_RESOURCE_TYPE_TENANT_CONFIG_ADMIN";
    LimitedResourceType[LimitedResourceType["LIMITED_RESOURCE_TYPE_TENANT_DEVELOPER"] = 3] = "LIMITED_RESOURCE_TYPE_TENANT_DEVELOPER";
    LimitedResourceType[LimitedResourceType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LimitedResourceType || (LimitedResourceType = {}));
var TimePeriodType;
(function (TimePeriodType) {
    TimePeriodType[TimePeriodType["TIME_PERIOD_TYPE_UNSPECIFIED"] = 0] = "TIME_PERIOD_TYPE_UNSPECIFIED";
    TimePeriodType[TimePeriodType["TIME_PERIOD_TYPE_PER_MINUTE"] = 1] = "TIME_PERIOD_TYPE_PER_MINUTE";
    TimePeriodType[TimePeriodType["TIME_PERIOD_TYPE_PER_HOUR"] = 60] = "TIME_PERIOD_TYPE_PER_HOUR";
    TimePeriodType[TimePeriodType["TIME_PERIOD_TYPE_PER_DAY"] = 1440] = "TIME_PERIOD_TYPE_PER_DAY";
    TimePeriodType[TimePeriodType["TIME_PERIOD_TYPE_PER_MONTH"] = 43200] = "TIME_PERIOD_TYPE_PER_MONTH";
    TimePeriodType[TimePeriodType["TIME_PERIOD_TYPE_PER_YEAR"] = 525600] = "TIME_PERIOD_TYPE_PER_YEAR";
    TimePeriodType[TimePeriodType["TIME_PERIOD_TYPE_ALL_TIME"] = 2147483647] = "TIME_PERIOD_TYPE_ALL_TIME";
    TimePeriodType[TimePeriodType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(TimePeriodType || (TimePeriodType = {}));
function createBaseTransactionBlockResponseOptions() {
    return {
        showInput: false,
        showRawInput: false,
        showEffects: false,
        showEvents: false,
        showObjectChanges: false,
        showBalanceChanges: false,
    };
}
const TransactionBlockResponseOptions = {
    encode(message, writer = new BinaryWriter()) {
        if (message.showInput !== false) {
            writer.uint32(8).bool(message.showInput);
        }
        if (message.showRawInput !== false) {
            writer.uint32(16).bool(message.showRawInput);
        }
        if (message.showEffects !== false) {
            writer.uint32(24).bool(message.showEffects);
        }
        if (message.showEvents !== false) {
            writer.uint32(32).bool(message.showEvents);
        }
        if (message.showObjectChanges !== false) {
            writer.uint32(40).bool(message.showObjectChanges);
        }
        if (message.showBalanceChanges !== false) {
            writer.uint32(48).bool(message.showBalanceChanges);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionBlockResponseOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.showInput = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.showRawInput = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.showEffects = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.showEvents = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.showObjectChanges = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.showBalanceChanges = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            showInput: isSet$4(object.showInput) ? globalThis.Boolean(object.showInput) : false,
            showRawInput: isSet$4(object.showRawInput) ? globalThis.Boolean(object.showRawInput) : false,
            showEffects: isSet$4(object.showEffects) ? globalThis.Boolean(object.showEffects) : false,
            showEvents: isSet$4(object.showEvents) ? globalThis.Boolean(object.showEvents) : false,
            showObjectChanges: isSet$4(object.showObjectChanges) ? globalThis.Boolean(object.showObjectChanges) : false,
            showBalanceChanges: isSet$4(object.showBalanceChanges) ? globalThis.Boolean(object.showBalanceChanges) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.showInput !== false) {
            obj.showInput = message.showInput;
        }
        if (message.showRawInput !== false) {
            obj.showRawInput = message.showRawInput;
        }
        if (message.showEffects !== false) {
            obj.showEffects = message.showEffects;
        }
        if (message.showEvents !== false) {
            obj.showEvents = message.showEvents;
        }
        if (message.showObjectChanges !== false) {
            obj.showObjectChanges = message.showObjectChanges;
        }
        if (message.showBalanceChanges !== false) {
            obj.showBalanceChanges = message.showBalanceChanges;
        }
        return obj;
    },
    create(base) {
        return TransactionBlockResponseOptions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTransactionBlockResponseOptions();
        message.showInput = object.showInput ?? false;
        message.showRawInput = object.showRawInput ?? false;
        message.showEffects = object.showEffects ?? false;
        message.showEvents = object.showEvents ?? false;
        message.showObjectChanges = object.showObjectChanges ?? false;
        message.showBalanceChanges = object.showBalanceChanges ?? false;
        return message;
    },
};
function createBaseObjectDataOptions() {
    return {
        showType: undefined,
        showOwner: undefined,
        showPreviousTransaction: undefined,
        showDisplay: undefined,
        showContent: undefined,
        showBcs: undefined,
        showStorageRebate: undefined,
    };
}
const ObjectDataOptions = {
    encode(message, writer = new BinaryWriter()) {
        if (message.showType !== undefined) {
            writer.uint32(8).bool(message.showType);
        }
        if (message.showOwner !== undefined) {
            writer.uint32(16).bool(message.showOwner);
        }
        if (message.showPreviousTransaction !== undefined) {
            writer.uint32(24).bool(message.showPreviousTransaction);
        }
        if (message.showDisplay !== undefined) {
            writer.uint32(32).bool(message.showDisplay);
        }
        if (message.showContent !== undefined) {
            writer.uint32(40).bool(message.showContent);
        }
        if (message.showBcs !== undefined) {
            writer.uint32(48).bool(message.showBcs);
        }
        if (message.showStorageRebate !== undefined) {
            writer.uint32(56).bool(message.showStorageRebate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseObjectDataOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.showType = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.showOwner = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.showPreviousTransaction = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.showDisplay = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.showContent = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.showBcs = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.showStorageRebate = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            showType: isSet$4(object.showType) ? globalThis.Boolean(object.showType) : undefined,
            showOwner: isSet$4(object.showOwner) ? globalThis.Boolean(object.showOwner) : undefined,
            showPreviousTransaction: isSet$4(object.showPreviousTransaction)
                ? globalThis.Boolean(object.showPreviousTransaction)
                : undefined,
            showDisplay: isSet$4(object.showDisplay) ? globalThis.Boolean(object.showDisplay) : undefined,
            showContent: isSet$4(object.showContent) ? globalThis.Boolean(object.showContent) : undefined,
            showBcs: isSet$4(object.showBcs) ? globalThis.Boolean(object.showBcs) : undefined,
            showStorageRebate: isSet$4(object.showStorageRebate) ? globalThis.Boolean(object.showStorageRebate) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.showType !== undefined) {
            obj.showType = message.showType;
        }
        if (message.showOwner !== undefined) {
            obj.showOwner = message.showOwner;
        }
        if (message.showPreviousTransaction !== undefined) {
            obj.showPreviousTransaction = message.showPreviousTransaction;
        }
        if (message.showDisplay !== undefined) {
            obj.showDisplay = message.showDisplay;
        }
        if (message.showContent !== undefined) {
            obj.showContent = message.showContent;
        }
        if (message.showBcs !== undefined) {
            obj.showBcs = message.showBcs;
        }
        if (message.showStorageRebate !== undefined) {
            obj.showStorageRebate = message.showStorageRebate;
        }
        return obj;
    },
    create(base) {
        return ObjectDataOptions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseObjectDataOptions();
        message.showType = object.showType ?? undefined;
        message.showOwner = object.showOwner ?? undefined;
        message.showPreviousTransaction = object.showPreviousTransaction ?? undefined;
        message.showDisplay = object.showDisplay ?? undefined;
        message.showContent = object.showContent ?? undefined;
        message.showBcs = object.showBcs ?? undefined;
        message.showStorageRebate = object.showStorageRebate ?? undefined;
        return message;
    },
};
function createBaseSuiObjectDataFilters() {
    return {
        matchAll: undefined,
        matchAny: undefined,
        matchNone: undefined,
        package: undefined,
        moveModule: undefined,
        structType: undefined,
        addressOwner: undefined,
        objectOwner: undefined,
        objectId: undefined,
        objectIds: undefined,
        version: undefined,
    };
}
const SuiObjectDataFilters = {
    encode(message, writer = new BinaryWriter()) {
        if (message.matchAll !== undefined) {
            SuiObjectDataFilters_MatchAll.encode(message.matchAll, writer.uint32(10).fork()).join();
        }
        if (message.matchAny !== undefined) {
            SuiObjectDataFilters_MatchAny.encode(message.matchAny, writer.uint32(18).fork()).join();
        }
        if (message.matchNone !== undefined) {
            SuiObjectDataFilters_MatchNone.encode(message.matchNone, writer.uint32(26).fork()).join();
        }
        if (message.package !== undefined) {
            SuiObjectDataFilters_Package.encode(message.package, writer.uint32(34).fork()).join();
        }
        if (message.moveModule !== undefined) {
            SuiObjectDataFilters_MoveModule.encode(message.moveModule, writer.uint32(42).fork()).join();
        }
        if (message.structType !== undefined) {
            SuiObjectDataFilters_StructType.encode(message.structType, writer.uint32(50).fork()).join();
        }
        if (message.addressOwner !== undefined) {
            SuiObjectDataFilters_AddressOwner.encode(message.addressOwner, writer.uint32(58).fork()).join();
        }
        if (message.objectOwner !== undefined) {
            SuiObjectDataFilters_ObjectOwner.encode(message.objectOwner, writer.uint32(66).fork()).join();
        }
        if (message.objectId !== undefined) {
            SuiObjectDataFilters_ObjectId.encode(message.objectId, writer.uint32(74).fork()).join();
        }
        if (message.objectIds !== undefined) {
            SuiObjectDataFilters_ObjectIds.encode(message.objectIds, writer.uint32(82).fork()).join();
        }
        if (message.version !== undefined) {
            SuiObjectDataFilters_Version.encode(message.version, writer.uint32(90).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuiObjectDataFilters();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.matchAll = SuiObjectDataFilters_MatchAll.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.matchAny = SuiObjectDataFilters_MatchAny.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.matchNone = SuiObjectDataFilters_MatchNone.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.package = SuiObjectDataFilters_Package.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.moveModule = SuiObjectDataFilters_MoveModule.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.structType = SuiObjectDataFilters_StructType.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.addressOwner = SuiObjectDataFilters_AddressOwner.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.objectOwner = SuiObjectDataFilters_ObjectOwner.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.objectId = SuiObjectDataFilters_ObjectId.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.objectIds = SuiObjectDataFilters_ObjectIds.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.version = SuiObjectDataFilters_Version.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            matchAll: isSet$4(object.matchAll) ? SuiObjectDataFilters_MatchAll.fromJSON(object.matchAll) : undefined,
            matchAny: isSet$4(object.matchAny) ? SuiObjectDataFilters_MatchAny.fromJSON(object.matchAny) : undefined,
            matchNone: isSet$4(object.matchNone) ? SuiObjectDataFilters_MatchNone.fromJSON(object.matchNone) : undefined,
            package: isSet$4(object.package) ? SuiObjectDataFilters_Package.fromJSON(object.package) : undefined,
            moveModule: isSet$4(object.moveModule) ? SuiObjectDataFilters_MoveModule.fromJSON(object.moveModule) : undefined,
            structType: isSet$4(object.structType) ? SuiObjectDataFilters_StructType.fromJSON(object.structType) : undefined,
            addressOwner: isSet$4(object.addressOwner)
                ? SuiObjectDataFilters_AddressOwner.fromJSON(object.addressOwner)
                : undefined,
            objectOwner: isSet$4(object.objectOwner)
                ? SuiObjectDataFilters_ObjectOwner.fromJSON(object.objectOwner)
                : undefined,
            objectId: isSet$4(object.objectId) ? SuiObjectDataFilters_ObjectId.fromJSON(object.objectId) : undefined,
            objectIds: isSet$4(object.objectIds) ? SuiObjectDataFilters_ObjectIds.fromJSON(object.objectIds) : undefined,
            version: isSet$4(object.version) ? SuiObjectDataFilters_Version.fromJSON(object.version) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.matchAll !== undefined) {
            obj.matchAll = SuiObjectDataFilters_MatchAll.toJSON(message.matchAll);
        }
        if (message.matchAny !== undefined) {
            obj.matchAny = SuiObjectDataFilters_MatchAny.toJSON(message.matchAny);
        }
        if (message.matchNone !== undefined) {
            obj.matchNone = SuiObjectDataFilters_MatchNone.toJSON(message.matchNone);
        }
        if (message.package !== undefined) {
            obj.package = SuiObjectDataFilters_Package.toJSON(message.package);
        }
        if (message.moveModule !== undefined) {
            obj.moveModule = SuiObjectDataFilters_MoveModule.toJSON(message.moveModule);
        }
        if (message.structType !== undefined) {
            obj.structType = SuiObjectDataFilters_StructType.toJSON(message.structType);
        }
        if (message.addressOwner !== undefined) {
            obj.addressOwner = SuiObjectDataFilters_AddressOwner.toJSON(message.addressOwner);
        }
        if (message.objectOwner !== undefined) {
            obj.objectOwner = SuiObjectDataFilters_ObjectOwner.toJSON(message.objectOwner);
        }
        if (message.objectId !== undefined) {
            obj.objectId = SuiObjectDataFilters_ObjectId.toJSON(message.objectId);
        }
        if (message.objectIds !== undefined) {
            obj.objectIds = SuiObjectDataFilters_ObjectIds.toJSON(message.objectIds);
        }
        if (message.version !== undefined) {
            obj.version = SuiObjectDataFilters_Version.toJSON(message.version);
        }
        return obj;
    },
    create(base) {
        return SuiObjectDataFilters.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSuiObjectDataFilters();
        message.matchAll = (object.matchAll !== undefined && object.matchAll !== null)
            ? SuiObjectDataFilters_MatchAll.fromPartial(object.matchAll)
            : undefined;
        message.matchAny = (object.matchAny !== undefined && object.matchAny !== null)
            ? SuiObjectDataFilters_MatchAny.fromPartial(object.matchAny)
            : undefined;
        message.matchNone = (object.matchNone !== undefined && object.matchNone !== null)
            ? SuiObjectDataFilters_MatchNone.fromPartial(object.matchNone)
            : undefined;
        message.package = (object.package !== undefined && object.package !== null)
            ? SuiObjectDataFilters_Package.fromPartial(object.package)
            : undefined;
        message.moveModule = (object.moveModule !== undefined && object.moveModule !== null)
            ? SuiObjectDataFilters_MoveModule.fromPartial(object.moveModule)
            : undefined;
        message.structType = (object.structType !== undefined && object.structType !== null)
            ? SuiObjectDataFilters_StructType.fromPartial(object.structType)
            : undefined;
        message.addressOwner = (object.addressOwner !== undefined && object.addressOwner !== null)
            ? SuiObjectDataFilters_AddressOwner.fromPartial(object.addressOwner)
            : undefined;
        message.objectOwner = (object.objectOwner !== undefined && object.objectOwner !== null)
            ? SuiObjectDataFilters_ObjectOwner.fromPartial(object.objectOwner)
            : undefined;
        message.objectId = (object.objectId !== undefined && object.objectId !== null)
            ? SuiObjectDataFilters_ObjectId.fromPartial(object.objectId)
            : undefined;
        message.objectIds = (object.objectIds !== undefined && object.objectIds !== null)
            ? SuiObjectDataFilters_ObjectIds.fromPartial(object.objectIds)
            : undefined;
        message.version = (object.version !== undefined && object.version !== null)
            ? SuiObjectDataFilters_Version.fromPartial(object.version)
            : undefined;
        return message;
    },
};
function createBaseSuiObjectDataFilters_MatchAll() {
    return { filters: [] };
}
const SuiObjectDataFilters_MatchAll = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.filters) {
            SuiObjectDataFilters_BasicFilter.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuiObjectDataFilters_MatchAll();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.filters.push(SuiObjectDataFilters_BasicFilter.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            filters: globalThis.Array.isArray(object?.filters)
                ? object.filters.map((e) => SuiObjectDataFilters_BasicFilter.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.filters?.length) {
            obj.filters = message.filters.map((e) => SuiObjectDataFilters_BasicFilter.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return SuiObjectDataFilters_MatchAll.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSuiObjectDataFilters_MatchAll();
        message.filters = object.filters?.map((e) => SuiObjectDataFilters_BasicFilter.fromPartial(e)) || [];
        return message;
    },
};
function createBaseSuiObjectDataFilters_MatchAny() {
    return { filters: [] };
}
const SuiObjectDataFilters_MatchAny = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.filters) {
            SuiObjectDataFilters_BasicFilter.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuiObjectDataFilters_MatchAny();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.filters.push(SuiObjectDataFilters_BasicFilter.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            filters: globalThis.Array.isArray(object?.filters)
                ? object.filters.map((e) => SuiObjectDataFilters_BasicFilter.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.filters?.length) {
            obj.filters = message.filters.map((e) => SuiObjectDataFilters_BasicFilter.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return SuiObjectDataFilters_MatchAny.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSuiObjectDataFilters_MatchAny();
        message.filters = object.filters?.map((e) => SuiObjectDataFilters_BasicFilter.fromPartial(e)) || [];
        return message;
    },
};
function createBaseSuiObjectDataFilters_MatchNone() {
    return { filters: [] };
}
const SuiObjectDataFilters_MatchNone = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.filters) {
            SuiObjectDataFilters_BasicFilter.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuiObjectDataFilters_MatchNone();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.filters.push(SuiObjectDataFilters_BasicFilter.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            filters: globalThis.Array.isArray(object?.filters)
                ? object.filters.map((e) => SuiObjectDataFilters_BasicFilter.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.filters?.length) {
            obj.filters = message.filters.map((e) => SuiObjectDataFilters_BasicFilter.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return SuiObjectDataFilters_MatchNone.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSuiObjectDataFilters_MatchNone();
        message.filters = object.filters?.map((e) => SuiObjectDataFilters_BasicFilter.fromPartial(e)) || [];
        return message;
    },
};
function createBaseSuiObjectDataFilters_BasicFilter() {
    return {
        package: undefined,
        moveModule: undefined,
        structType: undefined,
        addressOwner: undefined,
        objectOwner: undefined,
        objectId: undefined,
        objectIds: undefined,
        version: undefined,
    };
}
const SuiObjectDataFilters_BasicFilter = {
    encode(message, writer = new BinaryWriter()) {
        if (message.package !== undefined) {
            SuiObjectDataFilters_Package.encode(message.package, writer.uint32(10).fork()).join();
        }
        if (message.moveModule !== undefined) {
            SuiObjectDataFilters_MoveModule.encode(message.moveModule, writer.uint32(18).fork()).join();
        }
        if (message.structType !== undefined) {
            SuiObjectDataFilters_StructType.encode(message.structType, writer.uint32(26).fork()).join();
        }
        if (message.addressOwner !== undefined) {
            SuiObjectDataFilters_AddressOwner.encode(message.addressOwner, writer.uint32(34).fork()).join();
        }
        if (message.objectOwner !== undefined) {
            SuiObjectDataFilters_ObjectOwner.encode(message.objectOwner, writer.uint32(42).fork()).join();
        }
        if (message.objectId !== undefined) {
            SuiObjectDataFilters_ObjectId.encode(message.objectId, writer.uint32(50).fork()).join();
        }
        if (message.objectIds !== undefined) {
            SuiObjectDataFilters_ObjectIds.encode(message.objectIds, writer.uint32(58).fork()).join();
        }
        if (message.version !== undefined) {
            SuiObjectDataFilters_Version.encode(message.version, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuiObjectDataFilters_BasicFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.package = SuiObjectDataFilters_Package.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.moveModule = SuiObjectDataFilters_MoveModule.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.structType = SuiObjectDataFilters_StructType.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.addressOwner = SuiObjectDataFilters_AddressOwner.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.objectOwner = SuiObjectDataFilters_ObjectOwner.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.objectId = SuiObjectDataFilters_ObjectId.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.objectIds = SuiObjectDataFilters_ObjectIds.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.version = SuiObjectDataFilters_Version.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            package: isSet$4(object.package) ? SuiObjectDataFilters_Package.fromJSON(object.package) : undefined,
            moveModule: isSet$4(object.moveModule) ? SuiObjectDataFilters_MoveModule.fromJSON(object.moveModule) : undefined,
            structType: isSet$4(object.structType) ? SuiObjectDataFilters_StructType.fromJSON(object.structType) : undefined,
            addressOwner: isSet$4(object.addressOwner)
                ? SuiObjectDataFilters_AddressOwner.fromJSON(object.addressOwner)
                : undefined,
            objectOwner: isSet$4(object.objectOwner)
                ? SuiObjectDataFilters_ObjectOwner.fromJSON(object.objectOwner)
                : undefined,
            objectId: isSet$4(object.objectId) ? SuiObjectDataFilters_ObjectId.fromJSON(object.objectId) : undefined,
            objectIds: isSet$4(object.objectIds) ? SuiObjectDataFilters_ObjectIds.fromJSON(object.objectIds) : undefined,
            version: isSet$4(object.version) ? SuiObjectDataFilters_Version.fromJSON(object.version) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.package !== undefined) {
            obj.package = SuiObjectDataFilters_Package.toJSON(message.package);
        }
        if (message.moveModule !== undefined) {
            obj.moveModule = SuiObjectDataFilters_MoveModule.toJSON(message.moveModule);
        }
        if (message.structType !== undefined) {
            obj.structType = SuiObjectDataFilters_StructType.toJSON(message.structType);
        }
        if (message.addressOwner !== undefined) {
            obj.addressOwner = SuiObjectDataFilters_AddressOwner.toJSON(message.addressOwner);
        }
        if (message.objectOwner !== undefined) {
            obj.objectOwner = SuiObjectDataFilters_ObjectOwner.toJSON(message.objectOwner);
        }
        if (message.objectId !== undefined) {
            obj.objectId = SuiObjectDataFilters_ObjectId.toJSON(message.objectId);
        }
        if (message.objectIds !== undefined) {
            obj.objectIds = SuiObjectDataFilters_ObjectIds.toJSON(message.objectIds);
        }
        if (message.version !== undefined) {
            obj.version = SuiObjectDataFilters_Version.toJSON(message.version);
        }
        return obj;
    },
    create(base) {
        return SuiObjectDataFilters_BasicFilter.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSuiObjectDataFilters_BasicFilter();
        message.package = (object.package !== undefined && object.package !== null)
            ? SuiObjectDataFilters_Package.fromPartial(object.package)
            : undefined;
        message.moveModule = (object.moveModule !== undefined && object.moveModule !== null)
            ? SuiObjectDataFilters_MoveModule.fromPartial(object.moveModule)
            : undefined;
        message.structType = (object.structType !== undefined && object.structType !== null)
            ? SuiObjectDataFilters_StructType.fromPartial(object.structType)
            : undefined;
        message.addressOwner = (object.addressOwner !== undefined && object.addressOwner !== null)
            ? SuiObjectDataFilters_AddressOwner.fromPartial(object.addressOwner)
            : undefined;
        message.objectOwner = (object.objectOwner !== undefined && object.objectOwner !== null)
            ? SuiObjectDataFilters_ObjectOwner.fromPartial(object.objectOwner)
            : undefined;
        message.objectId = (object.objectId !== undefined && object.objectId !== null)
            ? SuiObjectDataFilters_ObjectId.fromPartial(object.objectId)
            : undefined;
        message.objectIds = (object.objectIds !== undefined && object.objectIds !== null)
            ? SuiObjectDataFilters_ObjectIds.fromPartial(object.objectIds)
            : undefined;
        message.version = (object.version !== undefined && object.version !== null)
            ? SuiObjectDataFilters_Version.fromPartial(object.version)
            : undefined;
        return message;
    },
};
function createBaseSuiObjectDataFilters_Package() {
    return { package: "" };
}
const SuiObjectDataFilters_Package = {
    encode(message, writer = new BinaryWriter()) {
        if (message.package !== "") {
            writer.uint32(10).string(message.package);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuiObjectDataFilters_Package();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.package = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { package: isSet$4(object.package) ? globalThis.String(object.package) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.package !== "") {
            obj.package = message.package;
        }
        return obj;
    },
    create(base) {
        return SuiObjectDataFilters_Package.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSuiObjectDataFilters_Package();
        message.package = object.package ?? "";
        return message;
    },
};
function createBaseSuiObjectDataFilters_MoveModule() {
    return { module: "", package: "" };
}
const SuiObjectDataFilters_MoveModule = {
    encode(message, writer = new BinaryWriter()) {
        if (message.module !== "") {
            writer.uint32(10).string(message.module);
        }
        if (message.package !== "") {
            writer.uint32(18).string(message.package);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuiObjectDataFilters_MoveModule();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.module = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.package = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            module: isSet$4(object.module) ? globalThis.String(object.module) : "",
            package: isSet$4(object.package) ? globalThis.String(object.package) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.module !== "") {
            obj.module = message.module;
        }
        if (message.package !== "") {
            obj.package = message.package;
        }
        return obj;
    },
    create(base) {
        return SuiObjectDataFilters_MoveModule.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSuiObjectDataFilters_MoveModule();
        message.module = object.module ?? "";
        message.package = object.package ?? "";
        return message;
    },
};
function createBaseSuiObjectDataFilters_StructType() {
    return { structType: "" };
}
const SuiObjectDataFilters_StructType = {
    encode(message, writer = new BinaryWriter()) {
        if (message.structType !== "") {
            writer.uint32(10).string(message.structType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuiObjectDataFilters_StructType();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.structType = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { structType: isSet$4(object.structType) ? globalThis.String(object.structType) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.structType !== "") {
            obj.structType = message.structType;
        }
        return obj;
    },
    create(base) {
        return SuiObjectDataFilters_StructType.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSuiObjectDataFilters_StructType();
        message.structType = object.structType ?? "";
        return message;
    },
};
function createBaseSuiObjectDataFilters_AddressOwner() {
    return { addressOwner: "" };
}
const SuiObjectDataFilters_AddressOwner = {
    encode(message, writer = new BinaryWriter()) {
        if (message.addressOwner !== "") {
            writer.uint32(10).string(message.addressOwner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuiObjectDataFilters_AddressOwner();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.addressOwner = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { addressOwner: isSet$4(object.addressOwner) ? globalThis.String(object.addressOwner) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.addressOwner !== "") {
            obj.addressOwner = message.addressOwner;
        }
        return obj;
    },
    create(base) {
        return SuiObjectDataFilters_AddressOwner.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSuiObjectDataFilters_AddressOwner();
        message.addressOwner = object.addressOwner ?? "";
        return message;
    },
};
function createBaseSuiObjectDataFilters_ObjectOwner() {
    return { objectOwner: "" };
}
const SuiObjectDataFilters_ObjectOwner = {
    encode(message, writer = new BinaryWriter()) {
        if (message.objectOwner !== "") {
            writer.uint32(10).string(message.objectOwner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuiObjectDataFilters_ObjectOwner();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.objectOwner = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { objectOwner: isSet$4(object.objectOwner) ? globalThis.String(object.objectOwner) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.objectOwner !== "") {
            obj.objectOwner = message.objectOwner;
        }
        return obj;
    },
    create(base) {
        return SuiObjectDataFilters_ObjectOwner.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSuiObjectDataFilters_ObjectOwner();
        message.objectOwner = object.objectOwner ?? "";
        return message;
    },
};
function createBaseSuiObjectDataFilters_ObjectId() {
    return { objectId: "" };
}
const SuiObjectDataFilters_ObjectId = {
    encode(message, writer = new BinaryWriter()) {
        if (message.objectId !== "") {
            writer.uint32(10).string(message.objectId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuiObjectDataFilters_ObjectId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.objectId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { objectId: isSet$4(object.objectId) ? globalThis.String(object.objectId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.objectId !== "") {
            obj.objectId = message.objectId;
        }
        return obj;
    },
    create(base) {
        return SuiObjectDataFilters_ObjectId.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSuiObjectDataFilters_ObjectId();
        message.objectId = object.objectId ?? "";
        return message;
    },
};
function createBaseSuiObjectDataFilters_ObjectIds() {
    return { objectIds: [] };
}
const SuiObjectDataFilters_ObjectIds = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.objectIds) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuiObjectDataFilters_ObjectIds();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.objectIds.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            objectIds: globalThis.Array.isArray(object?.objectIds)
                ? object.objectIds.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.objectIds?.length) {
            obj.objectIds = message.objectIds;
        }
        return obj;
    },
    create(base) {
        return SuiObjectDataFilters_ObjectIds.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSuiObjectDataFilters_ObjectIds();
        message.objectIds = object.objectIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseSuiObjectDataFilters_Version() {
    return { version: "" };
}
const SuiObjectDataFilters_Version = {
    encode(message, writer = new BinaryWriter()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuiObjectDataFilters_Version();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { version: isSet$4(object.version) ? globalThis.String(object.version) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.version !== "") {
            obj.version = message.version;
        }
        return obj;
    },
    create(base) {
        return SuiObjectDataFilters_Version.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSuiObjectDataFilters_Version();
        message.version = object.version ?? "";
        return message;
    },
};
function createBaseAccountInfoDataSlice() {
    return { length: 0, offset: 0 };
}
const AccountInfoDataSlice = {
    encode(message, writer = new BinaryWriter()) {
        if (message.length !== 0) {
            writer.uint32(8).int64(message.length);
        }
        if (message.offset !== 0) {
            writer.uint32(16).int64(message.offset);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountInfoDataSlice();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.length = longToNumber$3(reader.int64());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.offset = longToNumber$3(reader.int64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            length: isSet$4(object.length) ? globalThis.Number(object.length) : 0,
            offset: isSet$4(object.offset) ? globalThis.Number(object.offset) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.length !== 0) {
            obj.length = Math.round(message.length);
        }
        if (message.offset !== 0) {
            obj.offset = Math.round(message.offset);
        }
        return obj;
    },
    create(base) {
        return AccountInfoDataSlice.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAccountInfoDataSlice();
        message.length = object.length ?? 0;
        message.offset = object.offset ?? 0;
        return message;
    },
};
function createBaseProgramAccountsFilter() {
    return { memcmp: undefined, dataSize: 0 };
}
const ProgramAccountsFilter = {
    encode(message, writer = new BinaryWriter()) {
        if (message.memcmp !== undefined) {
            Memcmp.encode(message.memcmp, writer.uint32(10).fork()).join();
        }
        if (message.dataSize !== 0) {
            writer.uint32(16).uint64(message.dataSize);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProgramAccountsFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.memcmp = Memcmp.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.dataSize = longToNumber$3(reader.uint64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            memcmp: isSet$4(object.memcmp) ? Memcmp.fromJSON(object.memcmp) : undefined,
            dataSize: isSet$4(object.dataSize) ? globalThis.Number(object.dataSize) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.memcmp !== undefined) {
            obj.memcmp = Memcmp.toJSON(message.memcmp);
        }
        if (message.dataSize !== 0) {
            obj.dataSize = Math.round(message.dataSize);
        }
        return obj;
    },
    create(base) {
        return ProgramAccountsFilter.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseProgramAccountsFilter();
        message.memcmp = (object.memcmp !== undefined && object.memcmp !== null)
            ? Memcmp.fromPartial(object.memcmp)
            : undefined;
        message.dataSize = object.dataSize ?? 0;
        return message;
    },
};
function createBaseMemcmp() {
    return { offset: 0, bytes: "", encoding: "" };
}
const Memcmp = {
    encode(message, writer = new BinaryWriter()) {
        if (message.offset !== 0) {
            writer.uint32(8).int64(message.offset);
        }
        if (message.bytes !== "") {
            writer.uint32(18).string(message.bytes);
        }
        if (message.encoding !== "") {
            writer.uint32(26).string(message.encoding);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMemcmp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.offset = longToNumber$3(reader.int64());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.bytes = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.encoding = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            offset: isSet$4(object.offset) ? globalThis.Number(object.offset) : 0,
            bytes: isSet$4(object.bytes) ? globalThis.String(object.bytes) : "",
            encoding: isSet$4(object.encoding) ? globalThis.String(object.encoding) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.offset !== 0) {
            obj.offset = Math.round(message.offset);
        }
        if (message.bytes !== "") {
            obj.bytes = message.bytes;
        }
        if (message.encoding !== "") {
            obj.encoding = message.encoding;
        }
        return obj;
    },
    create(base) {
        return Memcmp.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMemcmp();
        message.offset = object.offset ?? 0;
        message.bytes = object.bytes ?? "";
        message.encoding = object.encoding ?? "";
        return message;
    },
};
function longToNumber$3(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet$4(value) {
    return value !== null && value !== undefined;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: services/blockchain_manager/v1/blockchain_manager.proto
/* eslint-disable */
var ResponseCode;
(function (ResponseCode) {
    ResponseCode[ResponseCode["RESPONSE_CODE_UNSPECIFIED"] = 0] = "RESPONSE_CODE_UNSPECIFIED";
    ResponseCode[ResponseCode["RESPONSE_CODE_OK"] = 1] = "RESPONSE_CODE_OK";
    ResponseCode[ResponseCode["RESPONSE_CODE_INVALID_ARGUMENT"] = 2] = "RESPONSE_CODE_INVALID_ARGUMENT";
    ResponseCode[ResponseCode["RESPONSE_CODE_ACCOUNT_NOT_AVAILABLE"] = 3] = "RESPONSE_CODE_ACCOUNT_NOT_AVAILABLE";
    ResponseCode[ResponseCode["RESPONSE_CODE_NETWORK_FAILURE"] = 4] = "RESPONSE_CODE_NETWORK_FAILURE";
    ResponseCode[ResponseCode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ResponseCode || (ResponseCode = {}));
function responseCodeFromJSON(object) {
    switch (object) {
        case 0:
        case "RESPONSE_CODE_UNSPECIFIED":
            return ResponseCode.RESPONSE_CODE_UNSPECIFIED;
        case 1:
        case "RESPONSE_CODE_OK":
            return ResponseCode.RESPONSE_CODE_OK;
        case 2:
        case "RESPONSE_CODE_INVALID_ARGUMENT":
            return ResponseCode.RESPONSE_CODE_INVALID_ARGUMENT;
        case 3:
        case "RESPONSE_CODE_ACCOUNT_NOT_AVAILABLE":
            return ResponseCode.RESPONSE_CODE_ACCOUNT_NOT_AVAILABLE;
        case 4:
        case "RESPONSE_CODE_NETWORK_FAILURE":
            return ResponseCode.RESPONSE_CODE_NETWORK_FAILURE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ResponseCode.UNRECOGNIZED;
    }
}
function responseCodeToJSON(object) {
    switch (object) {
        case ResponseCode.RESPONSE_CODE_UNSPECIFIED:
            return "RESPONSE_CODE_UNSPECIFIED";
        case ResponseCode.RESPONSE_CODE_OK:
            return "RESPONSE_CODE_OK";
        case ResponseCode.RESPONSE_CODE_INVALID_ARGUMENT:
            return "RESPONSE_CODE_INVALID_ARGUMENT";
        case ResponseCode.RESPONSE_CODE_ACCOUNT_NOT_AVAILABLE:
            return "RESPONSE_CODE_ACCOUNT_NOT_AVAILABLE";
        case ResponseCode.RESPONSE_CODE_NETWORK_FAILURE:
            return "RESPONSE_CODE_NETWORK_FAILURE";
        case ResponseCode.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseEthCallRequest() {
    return {
        contextId: "",
        blockchainType: 0,
        fromAddress: undefined,
        toAddress: "",
        gasAmount: undefined,
        gasPrice: undefined,
        value: undefined,
        data: undefined,
        blockNumberOrTag: "",
    };
}
const EthCallRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.blockchainType !== 0) {
            writer.uint32(16).int32(message.blockchainType);
        }
        if (message.fromAddress !== undefined) {
            writer.uint32(26).string(message.fromAddress);
        }
        if (message.toAddress !== "") {
            writer.uint32(34).string(message.toAddress);
        }
        if (message.gasAmount !== undefined) {
            writer.uint32(42).string(message.gasAmount);
        }
        if (message.gasPrice !== undefined) {
            writer.uint32(50).string(message.gasPrice);
        }
        if (message.value !== undefined) {
            writer.uint32(58).string(message.value);
        }
        if (message.data !== undefined) {
            writer.uint32(66).string(message.data);
        }
        if (message.blockNumberOrTag !== "") {
            writer.uint32(74).string(message.blockNumberOrTag);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEthCallRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockchainType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.fromAddress = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.toAddress = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.gasAmount = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.gasPrice = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.data = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.blockNumberOrTag = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            blockchainType: isSet$3(object.blockchainType) ? blockchainTypeFromJSON(object.blockchainType) : 0,
            fromAddress: isSet$3(object.fromAddress) ? globalThis.String(object.fromAddress) : undefined,
            toAddress: isSet$3(object.toAddress) ? globalThis.String(object.toAddress) : "",
            gasAmount: isSet$3(object.gasAmount) ? globalThis.String(object.gasAmount) : undefined,
            gasPrice: isSet$3(object.gasPrice) ? globalThis.String(object.gasPrice) : undefined,
            value: isSet$3(object.value) ? globalThis.String(object.value) : undefined,
            data: isSet$3(object.data) ? globalThis.String(object.data) : undefined,
            blockNumberOrTag: isSet$3(object.blockNumberOrTag) ? globalThis.String(object.blockNumberOrTag) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.blockchainType !== 0) {
            obj.blockchainType = blockchainTypeToJSON(message.blockchainType);
        }
        if (message.fromAddress !== undefined) {
            obj.fromAddress = message.fromAddress;
        }
        if (message.toAddress !== "") {
            obj.toAddress = message.toAddress;
        }
        if (message.gasAmount !== undefined) {
            obj.gasAmount = message.gasAmount;
        }
        if (message.gasPrice !== undefined) {
            obj.gasPrice = message.gasPrice;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        if (message.data !== undefined) {
            obj.data = message.data;
        }
        if (message.blockNumberOrTag !== "") {
            obj.blockNumberOrTag = message.blockNumberOrTag;
        }
        return obj;
    },
    create(base) {
        return EthCallRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEthCallRequest();
        message.contextId = object.contextId ?? "";
        message.blockchainType = object.blockchainType ?? 0;
        message.fromAddress = object.fromAddress ?? undefined;
        message.toAddress = object.toAddress ?? "";
        message.gasAmount = object.gasAmount ?? undefined;
        message.gasPrice = object.gasPrice ?? undefined;
        message.value = object.value ?? undefined;
        message.data = object.data ?? undefined;
        message.blockNumberOrTag = object.blockNumberOrTag ?? "";
        return message;
    },
};
function createBaseEthCallResponse() {
    return { data: new Uint8Array(0) };
}
const EthCallResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.data.length !== 0) {
            writer.uint32(10).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEthCallResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { data: isSet$3(object.data) ? bytesFromBase64$1(object.data) : new Uint8Array(0) };
    },
    toJSON(message) {
        const obj = {};
        if (message.data.length !== 0) {
            obj.data = base64FromBytes$1(message.data);
        }
        return obj;
    },
    create(base) {
        return EthCallResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEthCallResponse();
        message.data = object.data ?? new Uint8Array(0);
        return message;
    },
};
function createBaseGetAccountBalanceRequest() {
    return { contextId: "", blockchainType: 0, accountAddress: "", blockId: "" };
}
const GetAccountBalanceRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.blockchainType !== 0) {
            writer.uint32(16).int32(message.blockchainType);
        }
        if (message.accountAddress !== "") {
            writer.uint32(26).string(message.accountAddress);
        }
        if (message.blockId !== "") {
            writer.uint32(34).string(message.blockId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAccountBalanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockchainType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.accountAddress = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.blockId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            blockchainType: isSet$3(object.blockchainType) ? blockchainTypeFromJSON(object.blockchainType) : 0,
            accountAddress: isSet$3(object.accountAddress) ? globalThis.String(object.accountAddress) : "",
            blockId: isSet$3(object.blockId) ? globalThis.String(object.blockId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.blockchainType !== 0) {
            obj.blockchainType = blockchainTypeToJSON(message.blockchainType);
        }
        if (message.accountAddress !== "") {
            obj.accountAddress = message.accountAddress;
        }
        if (message.blockId !== "") {
            obj.blockId = message.blockId;
        }
        return obj;
    },
    create(base) {
        return GetAccountBalanceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAccountBalanceRequest();
        message.contextId = object.contextId ?? "";
        message.blockchainType = object.blockchainType ?? 0;
        message.accountAddress = object.accountAddress ?? "";
        message.blockId = object.blockId ?? "";
        return message;
    },
};
function createBaseGetAccountBalanceResponse() {
    return { responseCode: 0, value: "" };
}
const GetAccountBalanceResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.responseCode !== 0) {
            writer.uint32(8).int32(message.responseCode);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAccountBalanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.responseCode = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            responseCode: isSet$3(object.responseCode) ? responseCodeFromJSON(object.responseCode) : 0,
            value: isSet$3(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.responseCode !== 0) {
            obj.responseCode = responseCodeToJSON(message.responseCode);
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return GetAccountBalanceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAccountBalanceResponse();
        message.responseCode = object.responseCode ?? 0;
        message.value = object.value ?? "";
        return message;
    },
};
function createBaseBcmGetSuiAccountBalanceRequest() {
    return { contextId: "", address: "", coinType: undefined };
}
const BcmGetSuiAccountBalanceRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        if (message.coinType !== undefined) {
            writer.uint32(26).string(message.coinType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSuiAccountBalanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.coinType = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            address: isSet$3(object.address) ? globalThis.String(object.address) : "",
            coinType: isSet$3(object.coinType) ? globalThis.String(object.coinType) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.coinType !== undefined) {
            obj.coinType = message.coinType;
        }
        return obj;
    },
    create(base) {
        return BcmGetSuiAccountBalanceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSuiAccountBalanceRequest();
        message.contextId = object.contextId ?? "";
        message.address = object.address ?? "";
        message.coinType = object.coinType ?? undefined;
        return message;
    },
};
function createBaseBcmGetSuiAccountBalanceResponse() {
    return { getBalanceResponse: "" };
}
const BcmGetSuiAccountBalanceResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.getBalanceResponse !== "") {
            writer.uint32(10).string(message.getBalanceResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSuiAccountBalanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.getBalanceResponse = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { getBalanceResponse: isSet$3(object.getBalanceResponse) ? globalThis.String(object.getBalanceResponse) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.getBalanceResponse !== "") {
            obj.getBalanceResponse = message.getBalanceResponse;
        }
        return obj;
    },
    create(base) {
        return BcmGetSuiAccountBalanceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSuiAccountBalanceResponse();
        message.getBalanceResponse = object.getBalanceResponse ?? "";
        return message;
    },
};
function createBaseBcmRunSuiTransactionCallRequest() {
    return { contextId: "", txBytes: "", signatures: [], transactionResponseOptions: undefined, requestType: "" };
}
const BcmRunSuiTransactionCallRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.txBytes !== "") {
            writer.uint32(18).string(message.txBytes);
        }
        for (const v of message.signatures) {
            writer.uint32(26).string(v);
        }
        if (message.transactionResponseOptions !== undefined) {
            TransactionBlockResponseOptions.encode(message.transactionResponseOptions, writer.uint32(34).fork()).join();
        }
        if (message.requestType !== "") {
            writer.uint32(42).string(message.requestType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmRunSuiTransactionCallRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.txBytes = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.signatures.push(reader.string());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.transactionResponseOptions = TransactionBlockResponseOptions.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.requestType = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            txBytes: isSet$3(object.txBytes) ? globalThis.String(object.txBytes) : "",
            signatures: globalThis.Array.isArray(object?.signatures)
                ? object.signatures.map((e) => globalThis.String(e))
                : [],
            transactionResponseOptions: isSet$3(object.transactionResponseOptions)
                ? TransactionBlockResponseOptions.fromJSON(object.transactionResponseOptions)
                : undefined,
            requestType: isSet$3(object.requestType) ? globalThis.String(object.requestType) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.txBytes !== "") {
            obj.txBytes = message.txBytes;
        }
        if (message.signatures?.length) {
            obj.signatures = message.signatures;
        }
        if (message.transactionResponseOptions !== undefined) {
            obj.transactionResponseOptions = TransactionBlockResponseOptions.toJSON(message.transactionResponseOptions);
        }
        if (message.requestType !== "") {
            obj.requestType = message.requestType;
        }
        return obj;
    },
    create(base) {
        return BcmRunSuiTransactionCallRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmRunSuiTransactionCallRequest();
        message.contextId = object.contextId ?? "";
        message.txBytes = object.txBytes ?? "";
        message.signatures = object.signatures?.map((e) => e) || [];
        message.transactionResponseOptions =
            (object.transactionResponseOptions !== undefined && object.transactionResponseOptions !== null)
                ? TransactionBlockResponseOptions.fromPartial(object.transactionResponseOptions)
                : undefined;
        message.requestType = object.requestType ?? "";
        return message;
    },
};
function createBaseBcmRunSuiTransactionCallResponse() {
    return { transactionBlockResponse: new Uint8Array(0) };
}
const BcmRunSuiTransactionCallResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.transactionBlockResponse.length !== 0) {
            writer.uint32(10).bytes(message.transactionBlockResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmRunSuiTransactionCallResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.transactionBlockResponse = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            transactionBlockResponse: isSet$3(object.transactionBlockResponse)
                ? bytesFromBase64$1(object.transactionBlockResponse)
                : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.transactionBlockResponse.length !== 0) {
            obj.transactionBlockResponse = base64FromBytes$1(message.transactionBlockResponse);
        }
        return obj;
    },
    create(base) {
        return BcmRunSuiTransactionCallResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmRunSuiTransactionCallResponse();
        message.transactionBlockResponse = object.transactionBlockResponse ?? new Uint8Array(0);
        return message;
    },
};
function createBaseBcmGetSuiTransactionBlockRequest() {
    return { contextId: "", digest: "", transactionResponseOptions: undefined };
}
const BcmGetSuiTransactionBlockRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.digest !== "") {
            writer.uint32(26).string(message.digest);
        }
        if (message.transactionResponseOptions !== undefined) {
            TransactionBlockResponseOptions.encode(message.transactionResponseOptions, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSuiTransactionBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.digest = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.transactionResponseOptions = TransactionBlockResponseOptions.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            digest: isSet$3(object.digest) ? globalThis.String(object.digest) : "",
            transactionResponseOptions: isSet$3(object.transactionResponseOptions)
                ? TransactionBlockResponseOptions.fromJSON(object.transactionResponseOptions)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.digest !== "") {
            obj.digest = message.digest;
        }
        if (message.transactionResponseOptions !== undefined) {
            obj.transactionResponseOptions = TransactionBlockResponseOptions.toJSON(message.transactionResponseOptions);
        }
        return obj;
    },
    create(base) {
        return BcmGetSuiTransactionBlockRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSuiTransactionBlockRequest();
        message.contextId = object.contextId ?? "";
        message.digest = object.digest ?? "";
        message.transactionResponseOptions =
            (object.transactionResponseOptions !== undefined && object.transactionResponseOptions !== null)
                ? TransactionBlockResponseOptions.fromPartial(object.transactionResponseOptions)
                : undefined;
        return message;
    },
};
function createBaseBcmGetSuiTransactionBlockResponse() {
    return { suiTransactionBlockResponse: "" };
}
const BcmGetSuiTransactionBlockResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.suiTransactionBlockResponse !== "") {
            writer.uint32(10).string(message.suiTransactionBlockResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSuiTransactionBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.suiTransactionBlockResponse = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            suiTransactionBlockResponse: isSet$3(object.suiTransactionBlockResponse)
                ? globalThis.String(object.suiTransactionBlockResponse)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.suiTransactionBlockResponse !== "") {
            obj.suiTransactionBlockResponse = message.suiTransactionBlockResponse;
        }
        return obj;
    },
    create(base) {
        return BcmGetSuiTransactionBlockResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSuiTransactionBlockResponse();
        message.suiTransactionBlockResponse = object.suiTransactionBlockResponse ?? "";
        return message;
    },
};
function createBaseBcmRunSuiDryTransactionCallRequest() {
    return { contextId: "", txBytes: "" };
}
const BcmRunSuiDryTransactionCallRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.txBytes !== "") {
            writer.uint32(18).string(message.txBytes);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmRunSuiDryTransactionCallRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.txBytes = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            txBytes: isSet$3(object.txBytes) ? globalThis.String(object.txBytes) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.txBytes !== "") {
            obj.txBytes = message.txBytes;
        }
        return obj;
    },
    create(base) {
        return BcmRunSuiDryTransactionCallRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmRunSuiDryTransactionCallRequest();
        message.contextId = object.contextId ?? "";
        message.txBytes = object.txBytes ?? "";
        return message;
    },
};
function createBaseBcmRunSuiDryTransactionCallResponse() {
    return { dryTransactionBlockResponse: "" };
}
const BcmRunSuiDryTransactionCallResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.dryTransactionBlockResponse !== "") {
            writer.uint32(10).string(message.dryTransactionBlockResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmRunSuiDryTransactionCallResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.dryTransactionBlockResponse = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            dryTransactionBlockResponse: isSet$3(object.dryTransactionBlockResponse)
                ? globalThis.String(object.dryTransactionBlockResponse)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.dryTransactionBlockResponse !== "") {
            obj.dryTransactionBlockResponse = message.dryTransactionBlockResponse;
        }
        return obj;
    },
    create(base) {
        return BcmRunSuiDryTransactionCallResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmRunSuiDryTransactionCallResponse();
        message.dryTransactionBlockResponse = object.dryTransactionBlockResponse ?? "";
        return message;
    },
};
function createBaseBcmGetSuiObjectRequest() {
    return { contextId: "", objectId: "", objectOptions: undefined };
}
const BcmGetSuiObjectRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.objectId !== "") {
            writer.uint32(18).string(message.objectId);
        }
        if (message.objectOptions !== undefined) {
            ObjectDataOptions.encode(message.objectOptions, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSuiObjectRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.objectId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.objectOptions = ObjectDataOptions.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            objectId: isSet$3(object.objectId) ? globalThis.String(object.objectId) : "",
            objectOptions: isSet$3(object.objectOptions) ? ObjectDataOptions.fromJSON(object.objectOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.objectId !== "") {
            obj.objectId = message.objectId;
        }
        if (message.objectOptions !== undefined) {
            obj.objectOptions = ObjectDataOptions.toJSON(message.objectOptions);
        }
        return obj;
    },
    create(base) {
        return BcmGetSuiObjectRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSuiObjectRequest();
        message.contextId = object.contextId ?? "";
        message.objectId = object.objectId ?? "";
        message.objectOptions = (object.objectOptions !== undefined && object.objectOptions !== null)
            ? ObjectDataOptions.fromPartial(object.objectOptions)
            : undefined;
        return message;
    },
};
function createBaseBcmGetSuiObjectResponse() {
    return { suiObjectResponse: "" };
}
const BcmGetSuiObjectResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.suiObjectResponse !== "") {
            writer.uint32(10).string(message.suiObjectResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSuiObjectResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.suiObjectResponse = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { suiObjectResponse: isSet$3(object.suiObjectResponse) ? globalThis.String(object.suiObjectResponse) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.suiObjectResponse !== "") {
            obj.suiObjectResponse = message.suiObjectResponse;
        }
        return obj;
    },
    create(base) {
        return BcmGetSuiObjectResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSuiObjectResponse();
        message.suiObjectResponse = object.suiObjectResponse ?? "";
        return message;
    },
};
function createBaseBcmGetSuiCoinMetadataRequest() {
    return { contextId: "", coinType: "" };
}
const BcmGetSuiCoinMetadataRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.coinType !== "") {
            writer.uint32(18).string(message.coinType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSuiCoinMetadataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.coinType = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            coinType: isSet$3(object.coinType) ? globalThis.String(object.coinType) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.coinType !== "") {
            obj.coinType = message.coinType;
        }
        return obj;
    },
    create(base) {
        return BcmGetSuiCoinMetadataRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSuiCoinMetadataRequest();
        message.contextId = object.contextId ?? "";
        message.coinType = object.coinType ?? "";
        return message;
    },
};
function createBaseBcmGetSuiCoinMetadataResponse() {
    return { suiCoinMetadataResponse: "" };
}
const BcmGetSuiCoinMetadataResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.suiCoinMetadataResponse !== "") {
            writer.uint32(10).string(message.suiCoinMetadataResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSuiCoinMetadataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.suiCoinMetadataResponse = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            suiCoinMetadataResponse: isSet$3(object.suiCoinMetadataResponse)
                ? globalThis.String(object.suiCoinMetadataResponse)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.suiCoinMetadataResponse !== "") {
            obj.suiCoinMetadataResponse = message.suiCoinMetadataResponse;
        }
        return obj;
    },
    create(base) {
        return BcmGetSuiCoinMetadataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSuiCoinMetadataResponse();
        message.suiCoinMetadataResponse = object.suiCoinMetadataResponse ?? "";
        return message;
    },
};
function createBaseBcmGetSuiCoinSupplyRequest() {
    return { contextId: "", coinType: "" };
}
const BcmGetSuiCoinSupplyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.coinType !== "") {
            writer.uint32(18).string(message.coinType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSuiCoinSupplyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.coinType = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            coinType: isSet$3(object.coinType) ? globalThis.String(object.coinType) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.coinType !== "") {
            obj.coinType = message.coinType;
        }
        return obj;
    },
    create(base) {
        return BcmGetSuiCoinSupplyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSuiCoinSupplyRequest();
        message.contextId = object.contextId ?? "";
        message.coinType = object.coinType ?? "";
        return message;
    },
};
function createBaseBcmGetSuiCoinSupplyResponse() {
    return { suiCoinSupplyResponse: "" };
}
const BcmGetSuiCoinSupplyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.suiCoinSupplyResponse !== "") {
            writer.uint32(10).string(message.suiCoinSupplyResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSuiCoinSupplyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.suiCoinSupplyResponse = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            suiCoinSupplyResponse: isSet$3(object.suiCoinSupplyResponse) ? globalThis.String(object.suiCoinSupplyResponse) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.suiCoinSupplyResponse !== "") {
            obj.suiCoinSupplyResponse = message.suiCoinSupplyResponse;
        }
        return obj;
    },
    create(base) {
        return BcmGetSuiCoinSupplyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSuiCoinSupplyResponse();
        message.suiCoinSupplyResponse = object.suiCoinSupplyResponse ?? "";
        return message;
    },
};
function createBaseBcmGetSuiDynamicFieldObjectRequest() {
    return { contextId: "", parentId: "", type: "", value: "" };
}
const BcmGetSuiDynamicFieldObjectRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.parentId !== "") {
            writer.uint32(18).string(message.parentId);
        }
        if (message.type !== "") {
            writer.uint32(26).string(message.type);
        }
        if (message.value !== "") {
            writer.uint32(34).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSuiDynamicFieldObjectRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.parentId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            parentId: isSet$3(object.parentId) ? globalThis.String(object.parentId) : "",
            type: isSet$3(object.type) ? globalThis.String(object.type) : "",
            value: isSet$3(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.parentId !== "") {
            obj.parentId = message.parentId;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return BcmGetSuiDynamicFieldObjectRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSuiDynamicFieldObjectRequest();
        message.contextId = object.contextId ?? "";
        message.parentId = object.parentId ?? "";
        message.type = object.type ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
function createBaseBcmGetSuiDynamicFieldObjectResponse() {
    return { dynamicFieldResponse: "" };
}
const BcmGetSuiDynamicFieldObjectResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.dynamicFieldResponse !== "") {
            writer.uint32(10).string(message.dynamicFieldResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSuiDynamicFieldObjectResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.dynamicFieldResponse = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            dynamicFieldResponse: isSet$3(object.dynamicFieldResponse) ? globalThis.String(object.dynamicFieldResponse) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.dynamicFieldResponse !== "") {
            obj.dynamicFieldResponse = message.dynamicFieldResponse;
        }
        return obj;
    },
    create(base) {
        return BcmGetSuiDynamicFieldObjectResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSuiDynamicFieldObjectResponse();
        message.dynamicFieldResponse = object.dynamicFieldResponse ?? "";
        return message;
    },
};
function createBaseBcmRunSuiDevInspectTransactionRequest() {
    return { contextId: "", sender: "", txBytes: "", gasPrice: undefined, epoch: undefined };
}
const BcmRunSuiDevInspectTransactionRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.sender !== "") {
            writer.uint32(18).string(message.sender);
        }
        if (message.txBytes !== "") {
            writer.uint32(26).string(message.txBytes);
        }
        if (message.gasPrice !== undefined) {
            writer.uint32(34).string(message.gasPrice);
        }
        if (message.epoch !== undefined) {
            writer.uint32(42).string(message.epoch);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmRunSuiDevInspectTransactionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.txBytes = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.gasPrice = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.epoch = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            sender: isSet$3(object.sender) ? globalThis.String(object.sender) : "",
            txBytes: isSet$3(object.txBytes) ? globalThis.String(object.txBytes) : "",
            gasPrice: isSet$3(object.gasPrice) ? globalThis.String(object.gasPrice) : undefined,
            epoch: isSet$3(object.epoch) ? globalThis.String(object.epoch) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.txBytes !== "") {
            obj.txBytes = message.txBytes;
        }
        if (message.gasPrice !== undefined) {
            obj.gasPrice = message.gasPrice;
        }
        if (message.epoch !== undefined) {
            obj.epoch = message.epoch;
        }
        return obj;
    },
    create(base) {
        return BcmRunSuiDevInspectTransactionRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmRunSuiDevInspectTransactionRequest();
        message.contextId = object.contextId ?? "";
        message.sender = object.sender ?? "";
        message.txBytes = object.txBytes ?? "";
        message.gasPrice = object.gasPrice ?? undefined;
        message.epoch = object.epoch ?? undefined;
        return message;
    },
};
function createBaseBcmRunSuiDevInspectTransactionResponse() {
    return { devInspectTransactionBlockResponse: "" };
}
const BcmRunSuiDevInspectTransactionResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.devInspectTransactionBlockResponse !== "") {
            writer.uint32(10).string(message.devInspectTransactionBlockResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmRunSuiDevInspectTransactionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.devInspectTransactionBlockResponse = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            devInspectTransactionBlockResponse: isSet$3(object.devInspectTransactionBlockResponse)
                ? globalThis.String(object.devInspectTransactionBlockResponse)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.devInspectTransactionBlockResponse !== "") {
            obj.devInspectTransactionBlockResponse = message.devInspectTransactionBlockResponse;
        }
        return obj;
    },
    create(base) {
        return BcmRunSuiDevInspectTransactionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmRunSuiDevInspectTransactionResponse();
        message.devInspectTransactionBlockResponse = object.devInspectTransactionBlockResponse ?? "";
        return message;
    },
};
function createBaseBcmGetSuiOwnedObjectsRequest() {
    return {
        contextId: "",
        owner: "",
        suiObjectDataFilters: undefined,
        objectOptions: undefined,
        cursor: undefined,
        limit: undefined,
    };
}
const BcmGetSuiOwnedObjectsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.owner !== "") {
            writer.uint32(18).string(message.owner);
        }
        if (message.suiObjectDataFilters !== undefined) {
            SuiObjectDataFilters.encode(message.suiObjectDataFilters, writer.uint32(26).fork()).join();
        }
        if (message.objectOptions !== undefined) {
            ObjectDataOptions.encode(message.objectOptions, writer.uint32(34).fork()).join();
        }
        if (message.cursor !== undefined) {
            writer.uint32(42).string(message.cursor);
        }
        if (message.limit !== undefined) {
            writer.uint32(48).uint64(message.limit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSuiOwnedObjectsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.suiObjectDataFilters = SuiObjectDataFilters.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.objectOptions = ObjectDataOptions.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.limit = longToNumber$2(reader.uint64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            owner: isSet$3(object.owner) ? globalThis.String(object.owner) : "",
            suiObjectDataFilters: isSet$3(object.suiObjectDataFilters)
                ? SuiObjectDataFilters.fromJSON(object.suiObjectDataFilters)
                : undefined,
            objectOptions: isSet$3(object.objectOptions) ? ObjectDataOptions.fromJSON(object.objectOptions) : undefined,
            cursor: isSet$3(object.cursor) ? globalThis.String(object.cursor) : undefined,
            limit: isSet$3(object.limit) ? globalThis.Number(object.limit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.owner !== "") {
            obj.owner = message.owner;
        }
        if (message.suiObjectDataFilters !== undefined) {
            obj.suiObjectDataFilters = SuiObjectDataFilters.toJSON(message.suiObjectDataFilters);
        }
        if (message.objectOptions !== undefined) {
            obj.objectOptions = ObjectDataOptions.toJSON(message.objectOptions);
        }
        if (message.cursor !== undefined) {
            obj.cursor = message.cursor;
        }
        if (message.limit !== undefined) {
            obj.limit = Math.round(message.limit);
        }
        return obj;
    },
    create(base) {
        return BcmGetSuiOwnedObjectsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSuiOwnedObjectsRequest();
        message.contextId = object.contextId ?? "";
        message.owner = object.owner ?? "";
        message.suiObjectDataFilters = (object.suiObjectDataFilters !== undefined && object.suiObjectDataFilters !== null)
            ? SuiObjectDataFilters.fromPartial(object.suiObjectDataFilters)
            : undefined;
        message.objectOptions = (object.objectOptions !== undefined && object.objectOptions !== null)
            ? ObjectDataOptions.fromPartial(object.objectOptions)
            : undefined;
        message.cursor = object.cursor ?? undefined;
        message.limit = object.limit ?? undefined;
        return message;
    },
};
function createBaseBcmGetSuiOwnedObjectsResponse() {
    return { getOwnedObjectsResponse: "" };
}
const BcmGetSuiOwnedObjectsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.getOwnedObjectsResponse !== "") {
            writer.uint32(10).string(message.getOwnedObjectsResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSuiOwnedObjectsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.getOwnedObjectsResponse = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            getOwnedObjectsResponse: isSet$3(object.getOwnedObjectsResponse)
                ? globalThis.String(object.getOwnedObjectsResponse)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.getOwnedObjectsResponse !== "") {
            obj.getOwnedObjectsResponse = message.getOwnedObjectsResponse;
        }
        return obj;
    },
    create(base) {
        return BcmGetSuiOwnedObjectsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSuiOwnedObjectsResponse();
        message.getOwnedObjectsResponse = object.getOwnedObjectsResponse ?? "";
        return message;
    },
};
function createBaseAbciQueryRequest() {
    return { contextId: "", blockchainType: 0, path: "", data: new Uint8Array(0), blockId: 0 };
}
const AbciQueryRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.blockchainType !== 0) {
            writer.uint32(16).int32(message.blockchainType);
        }
        if (message.path !== "") {
            writer.uint32(26).string(message.path);
        }
        if (message.data.length !== 0) {
            writer.uint32(34).bytes(message.data);
        }
        if (message.blockId !== 0) {
            writer.uint32(40).uint64(message.blockId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAbciQueryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.blockchainType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.blockId = longToNumber$2(reader.uint64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            blockchainType: isSet$3(object.blockchainType) ? blockchainTypeFromJSON(object.blockchainType) : 0,
            path: isSet$3(object.path) ? globalThis.String(object.path) : "",
            data: isSet$3(object.data) ? bytesFromBase64$1(object.data) : new Uint8Array(0),
            blockId: isSet$3(object.blockId) ? globalThis.Number(object.blockId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.blockchainType !== 0) {
            obj.blockchainType = blockchainTypeToJSON(message.blockchainType);
        }
        if (message.path !== "") {
            obj.path = message.path;
        }
        if (message.data.length !== 0) {
            obj.data = base64FromBytes$1(message.data);
        }
        if (message.blockId !== 0) {
            obj.blockId = Math.round(message.blockId);
        }
        return obj;
    },
    create(base) {
        return AbciQueryRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAbciQueryRequest();
        message.contextId = object.contextId ?? "";
        message.blockchainType = object.blockchainType ?? 0;
        message.path = object.path ?? "";
        message.data = object.data ?? new Uint8Array(0);
        message.blockId = object.blockId ?? 0;
        return message;
    },
};
function createBaseAbciQueryResponse() {
    return { value: new Uint8Array(0), height: undefined };
}
const AbciQueryResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.value.length !== 0) {
            writer.uint32(10).bytes(message.value);
        }
        if (message.height !== undefined) {
            writer.uint32(16).int32(message.height);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAbciQueryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.height = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            value: isSet$3(object.value) ? bytesFromBase64$1(object.value) : new Uint8Array(0),
            height: isSet$3(object.height) ? globalThis.Number(object.height) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.value.length !== 0) {
            obj.value = base64FromBytes$1(message.value);
        }
        if (message.height !== undefined) {
            obj.height = Math.round(message.height);
        }
        return obj;
    },
    create(base) {
        return AbciQueryResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAbciQueryResponse();
        message.value = object.value ?? new Uint8Array(0);
        message.height = object.height ?? undefined;
        return message;
    },
};
function createBaseBcmGetSolanaBalanceRequest() {
    return { contextId: "", pubkey: "", requestedSlot: undefined };
}
const BcmGetSolanaBalanceRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.pubkey !== "") {
            writer.uint32(18).string(message.pubkey);
        }
        if (message.requestedSlot !== undefined) {
            writer.uint32(24).uint64(message.requestedSlot);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSolanaBalanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pubkey = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.requestedSlot = longToNumber$2(reader.uint64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            pubkey: isSet$3(object.pubkey) ? globalThis.String(object.pubkey) : "",
            requestedSlot: isSet$3(object.requestedSlot) ? globalThis.Number(object.requestedSlot) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.pubkey !== "") {
            obj.pubkey = message.pubkey;
        }
        if (message.requestedSlot !== undefined) {
            obj.requestedSlot = Math.round(message.requestedSlot);
        }
        return obj;
    },
    create(base) {
        return BcmGetSolanaBalanceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSolanaBalanceRequest();
        message.contextId = object.contextId ?? "";
        message.pubkey = object.pubkey ?? "";
        message.requestedSlot = object.requestedSlot ?? undefined;
        return message;
    },
};
function createBaseBcmGetSolanaBalanceResponse() {
    return { balanceResponse: "" };
}
const BcmGetSolanaBalanceResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.balanceResponse !== "") {
            writer.uint32(10).string(message.balanceResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSolanaBalanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.balanceResponse = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { balanceResponse: isSet$3(object.balanceResponse) ? globalThis.String(object.balanceResponse) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.balanceResponse !== "") {
            obj.balanceResponse = message.balanceResponse;
        }
        return obj;
    },
    create(base) {
        return BcmGetSolanaBalanceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSolanaBalanceResponse();
        message.balanceResponse = object.balanceResponse ?? "";
        return message;
    },
};
function createBaseBcmGetSolanaAccountInfoRequest() {
    return { contextId: "", pubkey: "", encoding: undefined, dataSlice: undefined, minContextSlot: undefined };
}
const BcmGetSolanaAccountInfoRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.pubkey !== "") {
            writer.uint32(18).string(message.pubkey);
        }
        if (message.encoding !== undefined) {
            writer.uint32(26).string(message.encoding);
        }
        if (message.dataSlice !== undefined) {
            AccountInfoDataSlice.encode(message.dataSlice, writer.uint32(34).fork()).join();
        }
        if (message.minContextSlot !== undefined) {
            writer.uint32(40).uint64(message.minContextSlot);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSolanaAccountInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pubkey = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.encoding = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.dataSlice = AccountInfoDataSlice.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.minContextSlot = longToNumber$2(reader.uint64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            pubkey: isSet$3(object.pubkey) ? globalThis.String(object.pubkey) : "",
            encoding: isSet$3(object.encoding) ? globalThis.String(object.encoding) : undefined,
            dataSlice: isSet$3(object.dataSlice) ? AccountInfoDataSlice.fromJSON(object.dataSlice) : undefined,
            minContextSlot: isSet$3(object.minContextSlot) ? globalThis.Number(object.minContextSlot) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.pubkey !== "") {
            obj.pubkey = message.pubkey;
        }
        if (message.encoding !== undefined) {
            obj.encoding = message.encoding;
        }
        if (message.dataSlice !== undefined) {
            obj.dataSlice = AccountInfoDataSlice.toJSON(message.dataSlice);
        }
        if (message.minContextSlot !== undefined) {
            obj.minContextSlot = Math.round(message.minContextSlot);
        }
        return obj;
    },
    create(base) {
        return BcmGetSolanaAccountInfoRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSolanaAccountInfoRequest();
        message.contextId = object.contextId ?? "";
        message.pubkey = object.pubkey ?? "";
        message.encoding = object.encoding ?? undefined;
        message.dataSlice = (object.dataSlice !== undefined && object.dataSlice !== null)
            ? AccountInfoDataSlice.fromPartial(object.dataSlice)
            : undefined;
        message.minContextSlot = object.minContextSlot ?? undefined;
        return message;
    },
};
function createBaseBcmGetSolanaAccountInfoResponse() {
    return { accountInfoResponse: "" };
}
const BcmGetSolanaAccountInfoResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.accountInfoResponse !== "") {
            writer.uint32(10).string(message.accountInfoResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSolanaAccountInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accountInfoResponse = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountInfoResponse: isSet$3(object.accountInfoResponse) ? globalThis.String(object.accountInfoResponse) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountInfoResponse !== "") {
            obj.accountInfoResponse = message.accountInfoResponse;
        }
        return obj;
    },
    create(base) {
        return BcmGetSolanaAccountInfoResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSolanaAccountInfoResponse();
        message.accountInfoResponse = object.accountInfoResponse ?? "";
        return message;
    },
};
function createBaseBcmGetSolanaSlotRequest() {
    return { contextId: "", minContextSlot: undefined };
}
const BcmGetSolanaSlotRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.minContextSlot !== undefined) {
            writer.uint32(16).uint64(message.minContextSlot);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSolanaSlotRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.minContextSlot = longToNumber$2(reader.uint64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            minContextSlot: isSet$3(object.minContextSlot) ? globalThis.Number(object.minContextSlot) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.minContextSlot !== undefined) {
            obj.minContextSlot = Math.round(message.minContextSlot);
        }
        return obj;
    },
    create(base) {
        return BcmGetSolanaSlotRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSolanaSlotRequest();
        message.contextId = object.contextId ?? "";
        message.minContextSlot = object.minContextSlot ?? undefined;
        return message;
    },
};
function createBaseBcmGetSolanaSlotResponse() {
    return { currentSlotResponse: "" };
}
const BcmGetSolanaSlotResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.currentSlotResponse !== "") {
            writer.uint32(10).string(message.currentSlotResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSolanaSlotResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.currentSlotResponse = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            currentSlotResponse: isSet$3(object.currentSlotResponse) ? globalThis.String(object.currentSlotResponse) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.currentSlotResponse !== "") {
            obj.currentSlotResponse = message.currentSlotResponse;
        }
        return obj;
    },
    create(base) {
        return BcmGetSolanaSlotResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSolanaSlotResponse();
        message.currentSlotResponse = object.currentSlotResponse ?? "";
        return message;
    },
};
function createBaseBcmGetSolanaProgramAccountsRequest() {
    return { contextId: "", pubkey: "", withContext: undefined, encoding: undefined, filterObject: undefined };
}
const BcmGetSolanaProgramAccountsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.pubkey !== "") {
            writer.uint32(18).string(message.pubkey);
        }
        if (message.withContext !== undefined) {
            writer.uint32(24).bool(message.withContext);
        }
        if (message.encoding !== undefined) {
            writer.uint32(34).string(message.encoding);
        }
        if (message.filterObject !== undefined) {
            ProgramAccountsFilter.encode(message.filterObject, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSolanaProgramAccountsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pubkey = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.withContext = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.encoding = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.filterObject = ProgramAccountsFilter.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            pubkey: isSet$3(object.pubkey) ? globalThis.String(object.pubkey) : "",
            withContext: isSet$3(object.withContext) ? globalThis.Boolean(object.withContext) : undefined,
            encoding: isSet$3(object.encoding) ? globalThis.String(object.encoding) : undefined,
            filterObject: isSet$3(object.filterObject) ? ProgramAccountsFilter.fromJSON(object.filterObject) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.pubkey !== "") {
            obj.pubkey = message.pubkey;
        }
        if (message.withContext !== undefined) {
            obj.withContext = message.withContext;
        }
        if (message.encoding !== undefined) {
            obj.encoding = message.encoding;
        }
        if (message.filterObject !== undefined) {
            obj.filterObject = ProgramAccountsFilter.toJSON(message.filterObject);
        }
        return obj;
    },
    create(base) {
        return BcmGetSolanaProgramAccountsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSolanaProgramAccountsRequest();
        message.contextId = object.contextId ?? "";
        message.pubkey = object.pubkey ?? "";
        message.withContext = object.withContext ?? undefined;
        message.encoding = object.encoding ?? undefined;
        message.filterObject = (object.filterObject !== undefined && object.filterObject !== null)
            ? ProgramAccountsFilter.fromPartial(object.filterObject)
            : undefined;
        return message;
    },
};
function createBaseBcmGetSolanaProgramAccountsResponse() {
    return { programAccountsResponse: "" };
}
const BcmGetSolanaProgramAccountsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.programAccountsResponse !== "") {
            writer.uint32(10).string(message.programAccountsResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSolanaProgramAccountsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.programAccountsResponse = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            programAccountsResponse: isSet$3(object.programAccountsResponse)
                ? globalThis.String(object.programAccountsResponse)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.programAccountsResponse !== "") {
            obj.programAccountsResponse = message.programAccountsResponse;
        }
        return obj;
    },
    create(base) {
        return BcmGetSolanaProgramAccountsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSolanaProgramAccountsResponse();
        message.programAccountsResponse = object.programAccountsResponse ?? "";
        return message;
    },
};
function createBaseBcmGetSolanaTransactionRequest() {
    return { contextId: "", transactionSignature: "", encoding: undefined };
}
const BcmGetSolanaTransactionRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.transactionSignature !== "") {
            writer.uint32(18).string(message.transactionSignature);
        }
        if (message.encoding !== undefined) {
            writer.uint32(26).string(message.encoding);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSolanaTransactionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.transactionSignature = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.encoding = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            transactionSignature: isSet$3(object.transactionSignature) ? globalThis.String(object.transactionSignature) : "",
            encoding: isSet$3(object.encoding) ? globalThis.String(object.encoding) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.transactionSignature !== "") {
            obj.transactionSignature = message.transactionSignature;
        }
        if (message.encoding !== undefined) {
            obj.encoding = message.encoding;
        }
        return obj;
    },
    create(base) {
        return BcmGetSolanaTransactionRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSolanaTransactionRequest();
        message.contextId = object.contextId ?? "";
        message.transactionSignature = object.transactionSignature ?? "";
        message.encoding = object.encoding ?? undefined;
        return message;
    },
};
function createBaseBcmGetSolanaTransactionResponse() {
    return { transactionResponse: "" };
}
const BcmGetSolanaTransactionResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.transactionResponse !== "") {
            writer.uint32(10).string(message.transactionResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSolanaTransactionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.transactionResponse = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            transactionResponse: isSet$3(object.transactionResponse) ? globalThis.String(object.transactionResponse) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.transactionResponse !== "") {
            obj.transactionResponse = message.transactionResponse;
        }
        return obj;
    },
    create(base) {
        return BcmGetSolanaTransactionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSolanaTransactionResponse();
        message.transactionResponse = object.transactionResponse ?? "";
        return message;
    },
};
function createBaseBcmGetSolanaTokenAccountBalanceRequest() {
    return { contextId: "", pubkey: "" };
}
const BcmGetSolanaTokenAccountBalanceRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.pubkey !== "") {
            writer.uint32(18).string(message.pubkey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSolanaTokenAccountBalanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pubkey = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            pubkey: isSet$3(object.pubkey) ? globalThis.String(object.pubkey) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.pubkey !== "") {
            obj.pubkey = message.pubkey;
        }
        return obj;
    },
    create(base) {
        return BcmGetSolanaTokenAccountBalanceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSolanaTokenAccountBalanceRequest();
        message.contextId = object.contextId ?? "";
        message.pubkey = object.pubkey ?? "";
        return message;
    },
};
function createBaseBcmGetSolanaTokenAccountBalanceResponse() {
    return { balanceResponse: "" };
}
const BcmGetSolanaTokenAccountBalanceResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.balanceResponse !== "") {
            writer.uint32(10).string(message.balanceResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSolanaTokenAccountBalanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.balanceResponse = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { balanceResponse: isSet$3(object.balanceResponse) ? globalThis.String(object.balanceResponse) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.balanceResponse !== "") {
            obj.balanceResponse = message.balanceResponse;
        }
        return obj;
    },
    create(base) {
        return BcmGetSolanaTokenAccountBalanceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSolanaTokenAccountBalanceResponse();
        message.balanceResponse = object.balanceResponse ?? "";
        return message;
    },
};
function createBaseBcmGetSolanaMultipleAccountsRequest() {
    return { contextId: "", pubkeys: [] };
}
const BcmGetSolanaMultipleAccountsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        for (const v of message.pubkeys) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSolanaMultipleAccountsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.pubkeys.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            pubkeys: globalThis.Array.isArray(object?.pubkeys) ? object.pubkeys.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.pubkeys?.length) {
            obj.pubkeys = message.pubkeys;
        }
        return obj;
    },
    create(base) {
        return BcmGetSolanaMultipleAccountsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSolanaMultipleAccountsRequest();
        message.contextId = object.contextId ?? "";
        message.pubkeys = object.pubkeys?.map((e) => e) || [];
        return message;
    },
};
function createBaseBcmGetSolanaMultipleAccountsResponse() {
    return { accountsResponse: "" };
}
const BcmGetSolanaMultipleAccountsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.accountsResponse !== "") {
            writer.uint32(10).string(message.accountsResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSolanaMultipleAccountsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accountsResponse = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { accountsResponse: isSet$3(object.accountsResponse) ? globalThis.String(object.accountsResponse) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountsResponse !== "") {
            obj.accountsResponse = message.accountsResponse;
        }
        return obj;
    },
    create(base) {
        return BcmGetSolanaMultipleAccountsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSolanaMultipleAccountsResponse();
        message.accountsResponse = object.accountsResponse ?? "";
        return message;
    },
};
function createBaseBcmGetSolanaTokenAccountsByOwnerRequest() {
    return { contextId: "", pubkey: "", mint: undefined, programId: undefined };
}
const BcmGetSolanaTokenAccountsByOwnerRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.pubkey !== "") {
            writer.uint32(18).string(message.pubkey);
        }
        if (message.mint !== undefined) {
            writer.uint32(26).string(message.mint);
        }
        if (message.programId !== undefined) {
            writer.uint32(34).string(message.programId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSolanaTokenAccountsByOwnerRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pubkey = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.mint = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.programId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$3(object.contextId) ? globalThis.String(object.contextId) : "",
            pubkey: isSet$3(object.pubkey) ? globalThis.String(object.pubkey) : "",
            mint: isSet$3(object.mint) ? globalThis.String(object.mint) : undefined,
            programId: isSet$3(object.programId) ? globalThis.String(object.programId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.pubkey !== "") {
            obj.pubkey = message.pubkey;
        }
        if (message.mint !== undefined) {
            obj.mint = message.mint;
        }
        if (message.programId !== undefined) {
            obj.programId = message.programId;
        }
        return obj;
    },
    create(base) {
        return BcmGetSolanaTokenAccountsByOwnerRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSolanaTokenAccountsByOwnerRequest();
        message.contextId = object.contextId ?? "";
        message.pubkey = object.pubkey ?? "";
        message.mint = object.mint ?? undefined;
        message.programId = object.programId ?? undefined;
        return message;
    },
};
function createBaseBcmGetSolanaTokenAccountsByOwnerResponse() {
    return { tokenAccountsResponse: "" };
}
const BcmGetSolanaTokenAccountsByOwnerResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.tokenAccountsResponse !== "") {
            writer.uint32(10).string(message.tokenAccountsResponse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBcmGetSolanaTokenAccountsByOwnerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.tokenAccountsResponse = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokenAccountsResponse: isSet$3(object.tokenAccountsResponse) ? globalThis.String(object.tokenAccountsResponse) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tokenAccountsResponse !== "") {
            obj.tokenAccountsResponse = message.tokenAccountsResponse;
        }
        return obj;
    },
    create(base) {
        return BcmGetSolanaTokenAccountsByOwnerResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBcmGetSolanaTokenAccountsByOwnerResponse();
        message.tokenAccountsResponse = object.tokenAccountsResponse ?? "";
        return message;
    },
};
const FusionEvmRpcService = {
    runEthCall: {
        path: "/services.blockchain_manager.v1.FusionEvmRpc/RunEthCall",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(EthCallRequest.encode(value).finish()),
        requestDeserialize: (value) => EthCallRequest.decode(value),
        responseSerialize: (value) => Buffer.from(EthCallResponse.encode(value).finish()),
        responseDeserialize: (value) => EthCallResponse.decode(value),
    },
    getAccountBalance: {
        path: "/services.blockchain_manager.v1.FusionEvmRpc/GetAccountBalance",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(GetAccountBalanceRequest.encode(value).finish()),
        requestDeserialize: (value) => GetAccountBalanceRequest.decode(value),
        responseSerialize: (value) => Buffer.from(GetAccountBalanceResponse.encode(value).finish()),
        responseDeserialize: (value) => GetAccountBalanceResponse.decode(value),
    },
};
const FusionEvmRpcClient = src$2.makeGenericClientConstructor(FusionEvmRpcService, "services.blockchain_manager.v1.FusionEvmRpc");
const FusionSuiRpcService = {
    getSuiAccountBalance: {
        path: "/services.blockchain_manager.v1.FusionSuiRpc/GetSuiAccountBalance",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(BcmGetSuiAccountBalanceRequest.encode(value).finish()),
        requestDeserialize: (value) => BcmGetSuiAccountBalanceRequest.decode(value),
        responseSerialize: (value) => Buffer.from(BcmGetSuiAccountBalanceResponse.encode(value).finish()),
        responseDeserialize: (value) => BcmGetSuiAccountBalanceResponse.decode(value),
    },
    runSuiTransaction: {
        path: "/services.blockchain_manager.v1.FusionSuiRpc/RunSuiTransaction",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(BcmRunSuiTransactionCallRequest.encode(value).finish()),
        requestDeserialize: (value) => BcmRunSuiTransactionCallRequest.decode(value),
        responseSerialize: (value) => Buffer.from(BcmRunSuiTransactionCallResponse.encode(value).finish()),
        responseDeserialize: (value) => BcmRunSuiTransactionCallResponse.decode(value),
    },
    runSuiDryTransaction: {
        path: "/services.blockchain_manager.v1.FusionSuiRpc/RunSuiDryTransaction",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(BcmRunSuiDryTransactionCallRequest.encode(value).finish()),
        requestDeserialize: (value) => BcmRunSuiDryTransactionCallRequest.decode(value),
        responseSerialize: (value) => Buffer.from(BcmRunSuiDryTransactionCallResponse.encode(value).finish()),
        responseDeserialize: (value) => BcmRunSuiDryTransactionCallResponse.decode(value),
    },
    getSuiObject: {
        path: "/services.blockchain_manager.v1.FusionSuiRpc/GetSuiObject",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(BcmGetSuiObjectRequest.encode(value).finish()),
        requestDeserialize: (value) => BcmGetSuiObjectRequest.decode(value),
        responseSerialize: (value) => Buffer.from(BcmGetSuiObjectResponse.encode(value).finish()),
        responseDeserialize: (value) => BcmGetSuiObjectResponse.decode(value),
    },
    getSuiCoinMetadata: {
        path: "/services.blockchain_manager.v1.FusionSuiRpc/GetSuiCoinMetadata",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(BcmGetSuiCoinMetadataRequest.encode(value).finish()),
        requestDeserialize: (value) => BcmGetSuiCoinMetadataRequest.decode(value),
        responseSerialize: (value) => Buffer.from(BcmGetSuiCoinMetadataResponse.encode(value).finish()),
        responseDeserialize: (value) => BcmGetSuiCoinMetadataResponse.decode(value),
    },
    getSuiCoinSupply: {
        path: "/services.blockchain_manager.v1.FusionSuiRpc/GetSuiCoinSupply",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(BcmGetSuiCoinSupplyRequest.encode(value).finish()),
        requestDeserialize: (value) => BcmGetSuiCoinSupplyRequest.decode(value),
        responseSerialize: (value) => Buffer.from(BcmGetSuiCoinSupplyResponse.encode(value).finish()),
        responseDeserialize: (value) => BcmGetSuiCoinSupplyResponse.decode(value),
    },
    getSuiTransactionBlock: {
        path: "/services.blockchain_manager.v1.FusionSuiRpc/GetSuiTransactionBlock",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(BcmGetSuiTransactionBlockRequest.encode(value).finish()),
        requestDeserialize: (value) => BcmGetSuiTransactionBlockRequest.decode(value),
        responseSerialize: (value) => Buffer.from(BcmGetSuiTransactionBlockResponse.encode(value).finish()),
        responseDeserialize: (value) => BcmGetSuiTransactionBlockResponse.decode(value),
    },
    getSuiDynamicFieldObject: {
        path: "/services.blockchain_manager.v1.FusionSuiRpc/GetSuiDynamicFieldObject",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(BcmGetSuiDynamicFieldObjectRequest.encode(value).finish()),
        requestDeserialize: (value) => BcmGetSuiDynamicFieldObjectRequest.decode(value),
        responseSerialize: (value) => Buffer.from(BcmGetSuiDynamicFieldObjectResponse.encode(value).finish()),
        responseDeserialize: (value) => BcmGetSuiDynamicFieldObjectResponse.decode(value),
    },
    runSuiDevInspectTransaction: {
        path: "/services.blockchain_manager.v1.FusionSuiRpc/RunSuiDevInspectTransaction",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(BcmRunSuiDevInspectTransactionRequest.encode(value).finish()),
        requestDeserialize: (value) => BcmRunSuiDevInspectTransactionRequest.decode(value),
        responseSerialize: (value) => Buffer.from(BcmRunSuiDevInspectTransactionResponse.encode(value).finish()),
        responseDeserialize: (value) => BcmRunSuiDevInspectTransactionResponse.decode(value),
    },
    getSuiOwnedObjects: {
        path: "/services.blockchain_manager.v1.FusionSuiRpc/GetSuiOwnedObjects",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(BcmGetSuiOwnedObjectsRequest.encode(value).finish()),
        requestDeserialize: (value) => BcmGetSuiOwnedObjectsRequest.decode(value),
        responseSerialize: (value) => Buffer.from(BcmGetSuiOwnedObjectsResponse.encode(value).finish()),
        responseDeserialize: (value) => BcmGetSuiOwnedObjectsResponse.decode(value),
    },
};
src$2.makeGenericClientConstructor(FusionSuiRpcService, "services.blockchain_manager.v1.FusionSuiRpc");
const FusionCosmosRpcService = {
    abciQuery: {
        path: "/services.blockchain_manager.v1.FusionCosmosRpc/AbciQuery",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(AbciQueryRequest.encode(value).finish()),
        requestDeserialize: (value) => AbciQueryRequest.decode(value),
        responseSerialize: (value) => Buffer.from(AbciQueryResponse.encode(value).finish()),
        responseDeserialize: (value) => AbciQueryResponse.decode(value),
    },
};
src$2.makeGenericClientConstructor(FusionCosmosRpcService, "services.blockchain_manager.v1.FusionCosmosRpc");
const FusionSolanaRpcService = {
    getSolanaBalance: {
        path: "/services.blockchain_manager.v1.FusionSolanaRpc/GetSolanaBalance",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(BcmGetSolanaBalanceRequest.encode(value).finish()),
        requestDeserialize: (value) => BcmGetSolanaBalanceRequest.decode(value),
        responseSerialize: (value) => Buffer.from(BcmGetSolanaBalanceResponse.encode(value).finish()),
        responseDeserialize: (value) => BcmGetSolanaBalanceResponse.decode(value),
    },
    getSolanaAccountInfo: {
        path: "/services.blockchain_manager.v1.FusionSolanaRpc/GetSolanaAccountInfo",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(BcmGetSolanaAccountInfoRequest.encode(value).finish()),
        requestDeserialize: (value) => BcmGetSolanaAccountInfoRequest.decode(value),
        responseSerialize: (value) => Buffer.from(BcmGetSolanaAccountInfoResponse.encode(value).finish()),
        responseDeserialize: (value) => BcmGetSolanaAccountInfoResponse.decode(value),
    },
    getSolanaSlot: {
        path: "/services.blockchain_manager.v1.FusionSolanaRpc/GetSolanaSlot",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(BcmGetSolanaSlotRequest.encode(value).finish()),
        requestDeserialize: (value) => BcmGetSolanaSlotRequest.decode(value),
        responseSerialize: (value) => Buffer.from(BcmGetSolanaSlotResponse.encode(value).finish()),
        responseDeserialize: (value) => BcmGetSolanaSlotResponse.decode(value),
    },
    getSolanaProgramAccounts: {
        path: "/services.blockchain_manager.v1.FusionSolanaRpc/GetSolanaProgramAccounts",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(BcmGetSolanaProgramAccountsRequest.encode(value).finish()),
        requestDeserialize: (value) => BcmGetSolanaProgramAccountsRequest.decode(value),
        responseSerialize: (value) => Buffer.from(BcmGetSolanaProgramAccountsResponse.encode(value).finish()),
        responseDeserialize: (value) => BcmGetSolanaProgramAccountsResponse.decode(value),
    },
    getSolanaTransaction: {
        path: "/services.blockchain_manager.v1.FusionSolanaRpc/GetSolanaTransaction",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(BcmGetSolanaTransactionRequest.encode(value).finish()),
        requestDeserialize: (value) => BcmGetSolanaTransactionRequest.decode(value),
        responseSerialize: (value) => Buffer.from(BcmGetSolanaTransactionResponse.encode(value).finish()),
        responseDeserialize: (value) => BcmGetSolanaTransactionResponse.decode(value),
    },
    getSolanaTokenAccountBalance: {
        path: "/services.blockchain_manager.v1.FusionSolanaRpc/GetSolanaTokenAccountBalance",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(BcmGetSolanaTokenAccountBalanceRequest.encode(value).finish()),
        requestDeserialize: (value) => BcmGetSolanaTokenAccountBalanceRequest.decode(value),
        responseSerialize: (value) => Buffer.from(BcmGetSolanaTokenAccountBalanceResponse.encode(value).finish()),
        responseDeserialize: (value) => BcmGetSolanaTokenAccountBalanceResponse.decode(value),
    },
    getSolanaMultipleAccounts: {
        path: "/services.blockchain_manager.v1.FusionSolanaRpc/GetSolanaMultipleAccounts",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(BcmGetSolanaMultipleAccountsRequest.encode(value).finish()),
        requestDeserialize: (value) => BcmGetSolanaMultipleAccountsRequest.decode(value),
        responseSerialize: (value) => Buffer.from(BcmGetSolanaMultipleAccountsResponse.encode(value).finish()),
        responseDeserialize: (value) => BcmGetSolanaMultipleAccountsResponse.decode(value),
    },
    getSolanaTokenAccountsByOwner: {
        path: "/services.blockchain_manager.v1.FusionSolanaRpc/GetSolanaTokenAccountsByOwner",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(BcmGetSolanaTokenAccountsByOwnerRequest.encode(value).finish()),
        requestDeserialize: (value) => BcmGetSolanaTokenAccountsByOwnerRequest.decode(value),
        responseSerialize: (value) => Buffer.from(BcmGetSolanaTokenAccountsByOwnerResponse.encode(value).finish()),
        responseDeserialize: (value) => BcmGetSolanaTokenAccountsByOwnerResponse.decode(value),
    },
};
src$2.makeGenericClientConstructor(FusionSolanaRpcService, "services.blockchain_manager.v1.FusionSolanaRpc");
function bytesFromBase64$1(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes$1(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function longToNumber$2(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet$3(value) {
    return value !== null && value !== undefined;
}

const DEFAULT_EVM_ADDRESS = process.env.EVM_RPC_ADDRESS || "localhost:50054";
process.env.SOLANA_RPC_ADDRESS || "localhost:50055";
process.env.SUI_RPC_ADDRESS || "localhost:50057";
/**
 * Class for interacting with the Fusion EVM RPC service.
 * Provides methods to perform Ethereum-specific blockchain operations.
 */
class FusionEvmRpcWrapper {
    client;
    contextId;
    /**
     * Expose BlockchainType enum for external usage.
     */
    static BlockchainType = BlockchainType;
    /**
     * Creates an instance of FusionEvmRpc.
     * @param contextId - The context ID for the gRPC requests.
     */
    constructor(contextId) {
        this.contextId = contextId;
        // Only use insecure connection for local development
        // Check DEFAULT_EVM_ADDRESS if it contains "localhost", and if so, use insecure connection
        this.client = new FusionEvmRpcClient(DEFAULT_EVM_ADDRESS, DEFAULT_EVM_ADDRESS.startsWith("localhost") || process.env.GRPC_INSECURE === "true" ? src$2.credentials.createInsecure() : src$2.credentials.createSsl());
    }
    /**
     * Executes an Ethereum call operation.
     * @param request - The request object containing Ethereum call details.
     * @returns A promise that resolves to the Ethereum call response.
     */
    async runEthCall(request) {
        const modifiedRequest = { ...request, contextId: this.contextId };
        return new Promise((resolve, reject) => {
            this.client.runEthCall(modifiedRequest, new src$2.Metadata(), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    /**
     * Retrieves the account balance for an Ethereum address.
     * @param request - The request object containing the Ethereum address.
     * @returns A promise that resolves to the account balance response.
     */
    async getAccountBalance(request) {
        const modifiedRequest = { ...request, contextId: this.contextId };
        return new Promise((resolve, reject) => {
            this.client.getAccountBalance(modifiedRequest, new src$2.Metadata(), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: google/protobuf/timestamp.proto
/* eslint-disable */
function createBaseTimestamp() {
    return { seconds: 0, nanos: 0 };
}
const Timestamp = {
    encode(message, writer = new BinaryWriter()) {
        if (message.seconds !== 0) {
            writer.uint32(8).int64(message.seconds);
        }
        if (message.nanos !== 0) {
            writer.uint32(16).int32(message.nanos);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTimestamp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.seconds = longToNumber$1(reader.int64());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.nanos = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            seconds: isSet$2(object.seconds) ? globalThis.Number(object.seconds) : 0,
            nanos: isSet$2(object.nanos) ? globalThis.Number(object.nanos) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.seconds !== 0) {
            obj.seconds = Math.round(message.seconds);
        }
        if (message.nanos !== 0) {
            obj.nanos = Math.round(message.nanos);
        }
        return obj;
    },
    create(base) {
        return Timestamp.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTimestamp();
        message.seconds = object.seconds ?? 0;
        message.nanos = object.nanos ?? 0;
        return message;
    },
};
function longToNumber$1(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet$2(value) {
    return value !== null && value !== undefined;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: services/storage_manager/v1/storage_manager.proto
/* eslint-disable */
function createBaseFusionBlockStorageResponse() {
    return { blockUrl: undefined, blockData: undefined };
}
const FusionBlockStorageResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.blockUrl !== undefined) {
            writer.uint32(10).string(message.blockUrl);
        }
        if (message.blockData !== undefined) {
            writer.uint32(18).bytes(message.blockData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFusionBlockStorageResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.blockUrl = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.blockData = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockUrl: isSet$1(object.blockUrl) ? globalThis.String(object.blockUrl) : undefined,
            blockData: isSet$1(object.blockData) ? bytesFromBase64(object.blockData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockUrl !== undefined) {
            obj.blockUrl = message.blockUrl;
        }
        if (message.blockData !== undefined) {
            obj.blockData = base64FromBytes(message.blockData);
        }
        return obj;
    },
    create(base) {
        return FusionBlockStorageResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFusionBlockStorageResponse();
        message.blockUrl = object.blockUrl ?? undefined;
        message.blockData = object.blockData ?? undefined;
        return message;
    },
};
function createBaseFusionPutStringRequest() {
    return { contextId: "", storageType: 0, key: "", value: "", version: undefined };
}
const FusionPutStringRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.storageType !== 0) {
            writer.uint32(16).int32(message.storageType);
        }
        if (message.key !== "") {
            writer.uint32(26).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(34).string(message.value);
        }
        if (message.version !== undefined) {
            writer.uint32(40).uint64(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFusionPutStringRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.storageType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.version = longToNumber(reader.uint64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$1(object.contextId) ? globalThis.String(object.contextId) : "",
            storageType: isSet$1(object.storageType) ? fusionStorageTypeFromJSON(object.storageType) : 0,
            key: isSet$1(object.key) ? globalThis.String(object.key) : "",
            value: isSet$1(object.value) ? globalThis.String(object.value) : "",
            version: isSet$1(object.version) ? globalThis.Number(object.version) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.storageType !== 0) {
            obj.storageType = fusionStorageTypeToJSON(message.storageType);
        }
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        if (message.version !== undefined) {
            obj.version = Math.round(message.version);
        }
        return obj;
    },
    create(base) {
        return FusionPutStringRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFusionPutStringRequest();
        message.contextId = object.contextId ?? "";
        message.storageType = object.storageType ?? 0;
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        message.version = object.version ?? undefined;
        return message;
    },
};
function createBaseFusionPutStringResponse() {
    return {};
}
const FusionPutStringResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFusionPutStringResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return FusionPutStringResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseFusionPutStringResponse();
        return message;
    },
};
function createBaseFusionStorageGetRequest() {
    return { contextId: "", storageType: 0, keys: [] };
}
const FusionStorageGetRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.storageType !== 0) {
            writer.uint32(16).int32(message.storageType);
        }
        for (const v of message.keys) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFusionStorageGetRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.storageType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.keys.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$1(object.contextId) ? globalThis.String(object.contextId) : "",
            storageType: isSet$1(object.storageType) ? fusionStorageTypeFromJSON(object.storageType) : 0,
            keys: globalThis.Array.isArray(object?.keys) ? object.keys.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.storageType !== 0) {
            obj.storageType = fusionStorageTypeToJSON(message.storageType);
        }
        if (message.keys?.length) {
            obj.keys = message.keys;
        }
        return obj;
    },
    create(base) {
        return FusionStorageGetRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFusionStorageGetRequest();
        message.contextId = object.contextId ?? "";
        message.storageType = object.storageType ?? 0;
        message.keys = object.keys?.map((e) => e) || [];
        return message;
    },
};
function createBaseFusionStorageGetResponse() {
    return { values: {} };
}
const FusionStorageGetResponse = {
    encode(message, writer = new BinaryWriter()) {
        Object.entries(message.values).forEach(([key, value]) => {
            FusionStorageGetResponse_ValuesEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFusionStorageGetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = FusionStorageGetResponse_ValuesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.values[entry1.key] = entry1.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            values: isObject(object.values)
                ? Object.entries(object.values).reduce((acc, [key, value]) => {
                    acc[key] = FusionStorageGetResponse_Record.fromJSON(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.values) {
            const entries = Object.entries(message.values);
            if (entries.length > 0) {
                obj.values = {};
                entries.forEach(([k, v]) => {
                    obj.values[k] = FusionStorageGetResponse_Record.toJSON(v);
                });
            }
        }
        return obj;
    },
    create(base) {
        return FusionStorageGetResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFusionStorageGetResponse();
        message.values = Object.entries(object.values ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = FusionStorageGetResponse_Record.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseFusionStorageGetResponse_Record() {
    return { value: "", version: 0 };
}
const FusionStorageGetResponse_Record = {
    encode(message, writer = new BinaryWriter()) {
        if (message.value !== "") {
            writer.uint32(10).string(message.value);
        }
        if (message.version !== 0) {
            writer.uint32(16).uint64(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFusionStorageGetResponse_Record();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.version = longToNumber(reader.uint64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            value: isSet$1(object.value) ? globalThis.String(object.value) : "",
            version: isSet$1(object.version) ? globalThis.Number(object.version) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== "") {
            obj.value = message.value;
        }
        if (message.version !== 0) {
            obj.version = Math.round(message.version);
        }
        return obj;
    },
    create(base) {
        return FusionStorageGetResponse_Record.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFusionStorageGetResponse_Record();
        message.value = object.value ?? "";
        message.version = object.version ?? 0;
        return message;
    },
};
function createBaseFusionStorageGetResponse_ValuesEntry() {
    return { key: "", value: undefined };
}
const FusionStorageGetResponse_ValuesEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            FusionStorageGetResponse_Record.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFusionStorageGetResponse_ValuesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = FusionStorageGetResponse_Record.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet$1(object.key) ? globalThis.String(object.key) : "",
            value: isSet$1(object.value) ? FusionStorageGetResponse_Record.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = FusionStorageGetResponse_Record.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return FusionStorageGetResponse_ValuesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFusionStorageGetResponse_ValuesEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? FusionStorageGetResponse_Record.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseFusionStorageGetOffchainEventsRequest() {
    return { contextId: "", startTime: undefined, endTime: undefined, bucket: undefined };
}
const FusionStorageGetOffchainEventsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.startTime !== undefined) {
            Timestamp.encode(toTimestamp(message.startTime), writer.uint32(18).fork()).join();
        }
        if (message.endTime !== undefined) {
            Timestamp.encode(toTimestamp(message.endTime), writer.uint32(26).fork()).join();
        }
        if (message.bucket !== undefined) {
            writer.uint32(34).string(message.bucket);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFusionStorageGetOffchainEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.bucket = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$1(object.contextId) ? globalThis.String(object.contextId) : "",
            startTime: isSet$1(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
            endTime: isSet$1(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
            bucket: isSet$1(object.bucket) ? globalThis.String(object.bucket) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.startTime !== undefined) {
            obj.startTime = message.startTime.toISOString();
        }
        if (message.endTime !== undefined) {
            obj.endTime = message.endTime.toISOString();
        }
        if (message.bucket !== undefined) {
            obj.bucket = message.bucket;
        }
        return obj;
    },
    create(base) {
        return FusionStorageGetOffchainEventsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFusionStorageGetOffchainEventsRequest();
        message.contextId = object.contextId ?? "";
        message.startTime = object.startTime ?? undefined;
        message.endTime = object.endTime ?? undefined;
        message.bucket = object.bucket ?? undefined;
        return message;
    },
};
function createBaseOffchainEventEnvelope() {
    return { eventData: "", bucket: undefined };
}
const OffchainEventEnvelope = {
    encode(message, writer = new BinaryWriter()) {
        if (message.eventData !== "") {
            writer.uint32(10).string(message.eventData);
        }
        if (message.bucket !== undefined) {
            writer.uint32(18).string(message.bucket);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOffchainEventEnvelope();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.eventData = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.bucket = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventData: isSet$1(object.eventData) ? globalThis.String(object.eventData) : "",
            bucket: isSet$1(object.bucket) ? globalThis.String(object.bucket) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventData !== "") {
            obj.eventData = message.eventData;
        }
        if (message.bucket !== undefined) {
            obj.bucket = message.bucket;
        }
        return obj;
    },
    create(base) {
        return OffchainEventEnvelope.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOffchainEventEnvelope();
        message.eventData = object.eventData ?? "";
        message.bucket = object.bucket ?? undefined;
        return message;
    },
};
function createBaseFusionStorageGetOffchainEventsResponse() {
    return { events: [], pageInfo: undefined };
}
const FusionStorageGetOffchainEventsResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.events) {
            OffchainEventEnvelope.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.pageInfo !== undefined) {
            FusionStorageGetOffchainEventsResponse_PageInfo.encode(message.pageInfo, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFusionStorageGetOffchainEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.events.push(OffchainEventEnvelope.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pageInfo = FusionStorageGetOffchainEventsResponse_PageInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            events: globalThis.Array.isArray(object?.events)
                ? object.events.map((e) => OffchainEventEnvelope.fromJSON(e))
                : [],
            pageInfo: isSet$1(object.pageInfo)
                ? FusionStorageGetOffchainEventsResponse_PageInfo.fromJSON(object.pageInfo)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.events?.length) {
            obj.events = message.events.map((e) => OffchainEventEnvelope.toJSON(e));
        }
        if (message.pageInfo !== undefined) {
            obj.pageInfo = FusionStorageGetOffchainEventsResponse_PageInfo.toJSON(message.pageInfo);
        }
        return obj;
    },
    create(base) {
        return FusionStorageGetOffchainEventsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFusionStorageGetOffchainEventsResponse();
        message.events = object.events?.map((e) => OffchainEventEnvelope.fromPartial(e)) || [];
        message.pageInfo = (object.pageInfo !== undefined && object.pageInfo !== null)
            ? FusionStorageGetOffchainEventsResponse_PageInfo.fromPartial(object.pageInfo)
            : undefined;
        return message;
    },
};
function createBaseFusionStorageGetOffchainEventsResponse_PageInfo() {
    return { hasNextPage: false, endCursor: undefined };
}
const FusionStorageGetOffchainEventsResponse_PageInfo = {
    encode(message, writer = new BinaryWriter()) {
        if (message.hasNextPage !== false) {
            writer.uint32(8).bool(message.hasNextPage);
        }
        if (message.endCursor !== undefined) {
            Timestamp.encode(toTimestamp(message.endCursor), writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFusionStorageGetOffchainEventsResponse_PageInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.hasNextPage = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.endCursor = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            hasNextPage: isSet$1(object.hasNextPage) ? globalThis.Boolean(object.hasNextPage) : false,
            endCursor: isSet$1(object.endCursor) ? fromJsonTimestamp(object.endCursor) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.hasNextPage !== false) {
            obj.hasNextPage = message.hasNextPage;
        }
        if (message.endCursor !== undefined) {
            obj.endCursor = message.endCursor.toISOString();
        }
        return obj;
    },
    create(base) {
        return FusionStorageGetOffchainEventsResponse_PageInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFusionStorageGetOffchainEventsResponse_PageInfo();
        message.hasNextPage = object.hasNextPage ?? false;
        message.endCursor = object.endCursor ?? undefined;
        return message;
    },
};
function createBaseFusionStorageDeleteRequest() {
    return { contextId: "", storageType: 0, key: "", version: undefined };
}
const FusionStorageDeleteRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.storageType !== 0) {
            writer.uint32(16).int32(message.storageType);
        }
        if (message.key !== "") {
            writer.uint32(26).string(message.key);
        }
        if (message.version !== undefined) {
            writer.uint32(32).uint64(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFusionStorageDeleteRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.storageType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.version = longToNumber(reader.uint64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$1(object.contextId) ? globalThis.String(object.contextId) : "",
            storageType: isSet$1(object.storageType) ? fusionStorageTypeFromJSON(object.storageType) : 0,
            key: isSet$1(object.key) ? globalThis.String(object.key) : "",
            version: isSet$1(object.version) ? globalThis.Number(object.version) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.storageType !== 0) {
            obj.storageType = fusionStorageTypeToJSON(message.storageType);
        }
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.version !== undefined) {
            obj.version = Math.round(message.version);
        }
        return obj;
    },
    create(base) {
        return FusionStorageDeleteRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFusionStorageDeleteRequest();
        message.contextId = object.contextId ?? "";
        message.storageType = object.storageType ?? 0;
        message.key = object.key ?? "";
        message.version = object.version ?? undefined;
        return message;
    },
};
function createBaseFusionStorageDeleteResponse() {
    return {};
}
const FusionStorageDeleteResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFusionStorageDeleteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return FusionStorageDeleteResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseFusionStorageDeleteResponse();
        return message;
    },
};
function createBaseFusionStoragePeekRequest() {
    return { contextId: "", storageType: 0, queueName: "" };
}
const FusionStoragePeekRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.storageType !== 0) {
            writer.uint32(16).int32(message.storageType);
        }
        if (message.queueName !== "") {
            writer.uint32(26).string(message.queueName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFusionStoragePeekRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.storageType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.queueName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$1(object.contextId) ? globalThis.String(object.contextId) : "",
            storageType: isSet$1(object.storageType) ? fusionStorageTypeFromJSON(object.storageType) : 0,
            queueName: isSet$1(object.queueName) ? globalThis.String(object.queueName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.storageType !== 0) {
            obj.storageType = fusionStorageTypeToJSON(message.storageType);
        }
        if (message.queueName !== "") {
            obj.queueName = message.queueName;
        }
        return obj;
    },
    create(base) {
        return FusionStoragePeekRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFusionStoragePeekRequest();
        message.contextId = object.contextId ?? "";
        message.storageType = object.storageType ?? 0;
        message.queueName = object.queueName ?? "";
        return message;
    },
};
function createBaseFusionStoragePeekResponse() {
    return { value: "" };
}
const FusionStoragePeekResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.value !== "") {
            writer.uint32(10).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFusionStoragePeekResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet$1(object.value) ? globalThis.String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return FusionStoragePeekResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFusionStoragePeekResponse();
        message.value = object.value ?? "";
        return message;
    },
};
function createBaseFusionStorageEnqueueRequest() {
    return { contextId: "", storageType: 0, queueName: "", value: "" };
}
const FusionStorageEnqueueRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.storageType !== 0) {
            writer.uint32(16).int32(message.storageType);
        }
        if (message.queueName !== "") {
            writer.uint32(26).string(message.queueName);
        }
        if (message.value !== "") {
            writer.uint32(34).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFusionStorageEnqueueRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.storageType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.queueName = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$1(object.contextId) ? globalThis.String(object.contextId) : "",
            storageType: isSet$1(object.storageType) ? fusionStorageTypeFromJSON(object.storageType) : 0,
            queueName: isSet$1(object.queueName) ? globalThis.String(object.queueName) : "",
            value: isSet$1(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.storageType !== 0) {
            obj.storageType = fusionStorageTypeToJSON(message.storageType);
        }
        if (message.queueName !== "") {
            obj.queueName = message.queueName;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return FusionStorageEnqueueRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFusionStorageEnqueueRequest();
        message.contextId = object.contextId ?? "";
        message.storageType = object.storageType ?? 0;
        message.queueName = object.queueName ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
function createBaseFusionStorageEnqueueResponse() {
    return {};
}
const FusionStorageEnqueueResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFusionStorageEnqueueResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return FusionStorageEnqueueResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseFusionStorageEnqueueResponse();
        return message;
    },
};
function createBaseFusionStorageDequeueRequest() {
    return { contextId: "", storageType: 0, queueName: "" };
}
const FusionStorageDequeueRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.storageType !== 0) {
            writer.uint32(16).int32(message.storageType);
        }
        if (message.queueName !== "") {
            writer.uint32(26).string(message.queueName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFusionStorageDequeueRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.storageType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.queueName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$1(object.contextId) ? globalThis.String(object.contextId) : "",
            storageType: isSet$1(object.storageType) ? fusionStorageTypeFromJSON(object.storageType) : 0,
            queueName: isSet$1(object.queueName) ? globalThis.String(object.queueName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.storageType !== 0) {
            obj.storageType = fusionStorageTypeToJSON(message.storageType);
        }
        if (message.queueName !== "") {
            obj.queueName = message.queueName;
        }
        return obj;
    },
    create(base) {
        return FusionStorageDequeueRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFusionStorageDequeueRequest();
        message.contextId = object.contextId ?? "";
        message.storageType = object.storageType ?? 0;
        message.queueName = object.queueName ?? "";
        return message;
    },
};
function createBaseFusionStorageDequeueResponse() {
    return { value: "" };
}
const FusionStorageDequeueResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.value !== "") {
            writer.uint32(10).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFusionStorageDequeueResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet$1(object.value) ? globalThis.String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return FusionStorageDequeueResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFusionStorageDequeueResponse();
        message.value = object.value ?? "";
        return message;
    },
};
function createBaseGetModuleExecutionParamsRequest() {
    return { contextId: "", executionParamsId: "" };
}
const GetModuleExecutionParamsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.executionParamsId !== "") {
            writer.uint32(18).string(message.executionParamsId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetModuleExecutionParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.executionParamsId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet$1(object.contextId) ? globalThis.String(object.contextId) : "",
            executionParamsId: isSet$1(object.executionParamsId) ? globalThis.String(object.executionParamsId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.executionParamsId !== "") {
            obj.executionParamsId = message.executionParamsId;
        }
        return obj;
    },
    create(base) {
        return GetModuleExecutionParamsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetModuleExecutionParamsRequest();
        message.contextId = object.contextId ?? "";
        message.executionParamsId = object.executionParamsId ?? "";
        return message;
    },
};
function createBaseGetModuleExecutionParamsResponse() {
    return { eventTypeId: "", blockId: "", executionParams: new Uint8Array(0) };
}
const GetModuleExecutionParamsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.eventTypeId !== "") {
            writer.uint32(10).string(message.eventTypeId);
        }
        if (message.blockId !== "") {
            writer.uint32(18).string(message.blockId);
        }
        if (message.executionParams.length !== 0) {
            writer.uint32(26).bytes(message.executionParams);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetModuleExecutionParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.eventTypeId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.blockId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.executionParams = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventTypeId: isSet$1(object.eventTypeId) ? globalThis.String(object.eventTypeId) : "",
            blockId: isSet$1(object.blockId) ? globalThis.String(object.blockId) : "",
            executionParams: isSet$1(object.executionParams) ? bytesFromBase64(object.executionParams) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventTypeId !== "") {
            obj.eventTypeId = message.eventTypeId;
        }
        if (message.blockId !== "") {
            obj.blockId = message.blockId;
        }
        if (message.executionParams.length !== 0) {
            obj.executionParams = base64FromBytes(message.executionParams);
        }
        return obj;
    },
    create(base) {
        return GetModuleExecutionParamsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetModuleExecutionParamsResponse();
        message.eventTypeId = object.eventTypeId ?? "";
        message.blockId = object.blockId ?? "";
        message.executionParams = object.executionParams ?? new Uint8Array(0);
        return message;
    },
};
function createBaseGetOnChainBlockRequest() {
    return { url: "", contextId: "" };
}
const GetOnChainBlockRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        if (message.contextId !== "") {
            writer.uint32(18).string(message.contextId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOnChainBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            url: isSet$1(object.url) ? globalThis.String(object.url) : "",
            contextId: isSet$1(object.contextId) ? globalThis.String(object.contextId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        return obj;
    },
    create(base) {
        return GetOnChainBlockRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOnChainBlockRequest();
        message.url = object.url ?? "";
        message.contextId = object.contextId ?? "";
        return message;
    },
};
const FusionPersistentStorageService = {
    put: {
        path: "/services.storage_manager.v1.FusionPersistentStorage/Put",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(FusionPutStringRequest.encode(value).finish()),
        requestDeserialize: (value) => FusionPutStringRequest.decode(value),
        responseSerialize: (value) => Buffer.from(FusionPutStringResponse.encode(value).finish()),
        responseDeserialize: (value) => FusionPutStringResponse.decode(value),
    },
    get: {
        path: "/services.storage_manager.v1.FusionPersistentStorage/Get",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(FusionStorageGetRequest.encode(value).finish()),
        requestDeserialize: (value) => FusionStorageGetRequest.decode(value),
        responseSerialize: (value) => Buffer.from(FusionStorageGetResponse.encode(value).finish()),
        responseDeserialize: (value) => FusionStorageGetResponse.decode(value),
    },
    getOffchainEvents: {
        path: "/services.storage_manager.v1.FusionPersistentStorage/GetOffchainEvents",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(FusionStorageGetOffchainEventsRequest.encode(value).finish()),
        requestDeserialize: (value) => FusionStorageGetOffchainEventsRequest.decode(value),
        responseSerialize: (value) => Buffer.from(FusionStorageGetOffchainEventsResponse.encode(value).finish()),
        responseDeserialize: (value) => FusionStorageGetOffchainEventsResponse.decode(value),
    },
    delete: {
        path: "/services.storage_manager.v1.FusionPersistentStorage/Delete",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(FusionStorageDeleteRequest.encode(value).finish()),
        requestDeserialize: (value) => FusionStorageDeleteRequest.decode(value),
        responseSerialize: (value) => Buffer.from(FusionStorageDeleteResponse.encode(value).finish()),
        responseDeserialize: (value) => FusionStorageDeleteResponse.decode(value),
    },
};
src$2.makeGenericClientConstructor(FusionPersistentStorageService, "services.storage_manager.v1.FusionPersistentStorage");
const FusionEphemeralStorageService = {
    put: {
        path: "/services.storage_manager.v1.FusionEphemeralStorage/Put",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(FusionPutStringRequest.encode(value).finish()),
        requestDeserialize: (value) => FusionPutStringRequest.decode(value),
        responseSerialize: (value) => Buffer.from(FusionPutStringResponse.encode(value).finish()),
        responseDeserialize: (value) => FusionPutStringResponse.decode(value),
    },
    get: {
        path: "/services.storage_manager.v1.FusionEphemeralStorage/Get",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(FusionStorageGetRequest.encode(value).finish()),
        requestDeserialize: (value) => FusionStorageGetRequest.decode(value),
        responseSerialize: (value) => Buffer.from(FusionStorageGetResponse.encode(value).finish()),
        responseDeserialize: (value) => FusionStorageGetResponse.decode(value),
    },
    delete: {
        path: "/services.storage_manager.v1.FusionEphemeralStorage/Delete",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(FusionStorageDeleteRequest.encode(value).finish()),
        requestDeserialize: (value) => FusionStorageDeleteRequest.decode(value),
        responseSerialize: (value) => Buffer.from(FusionStorageDeleteResponse.encode(value).finish()),
        responseDeserialize: (value) => FusionStorageDeleteResponse.decode(value),
    },
    peek: {
        path: "/services.storage_manager.v1.FusionEphemeralStorage/Peek",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(FusionStoragePeekRequest.encode(value).finish()),
        requestDeserialize: (value) => FusionStoragePeekRequest.decode(value),
        responseSerialize: (value) => Buffer.from(FusionStoragePeekResponse.encode(value).finish()),
        responseDeserialize: (value) => FusionStoragePeekResponse.decode(value),
    },
    enqueue: {
        path: "/services.storage_manager.v1.FusionEphemeralStorage/Enqueue",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(FusionStorageEnqueueRequest.encode(value).finish()),
        requestDeserialize: (value) => FusionStorageEnqueueRequest.decode(value),
        responseSerialize: (value) => Buffer.from(FusionStorageEnqueueResponse.encode(value).finish()),
        responseDeserialize: (value) => FusionStorageEnqueueResponse.decode(value),
    },
    dequeue: {
        path: "/services.storage_manager.v1.FusionEphemeralStorage/Dequeue",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(FusionStorageDequeueRequest.encode(value).finish()),
        requestDeserialize: (value) => FusionStorageDequeueRequest.decode(value),
        responseSerialize: (value) => Buffer.from(FusionStorageDequeueResponse.encode(value).finish()),
        responseDeserialize: (value) => FusionStorageDequeueResponse.decode(value),
    },
    getModuleExecutionParams: {
        path: "/services.storage_manager.v1.FusionEphemeralStorage/GetModuleExecutionParams",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(GetModuleExecutionParamsRequest.encode(value).finish()),
        requestDeserialize: (value) => GetModuleExecutionParamsRequest.decode(value),
        responseSerialize: (value) => Buffer.from(GetModuleExecutionParamsResponse.encode(value).finish()),
        responseDeserialize: (value) => GetModuleExecutionParamsResponse.decode(value),
    },
    getOnChainBlock: {
        path: "/services.storage_manager.v1.FusionEphemeralStorage/GetOnChainBlock",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(GetOnChainBlockRequest.encode(value).finish()),
        requestDeserialize: (value) => GetOnChainBlockRequest.decode(value),
        responseSerialize: (value) => Buffer.from(FusionBlockStorageResponse.encode(value).finish()),
        responseDeserialize: (value) => FusionBlockStorageResponse.decode(value),
    },
};
src$2.makeGenericClientConstructor(FusionEphemeralStorageService, "services.storage_manager.v1.FusionEphemeralStorage");
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000);
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet$1(value) {
    return value !== null && value !== undefined;
}

process.env.EPHEMERAL_STORAGE_ADDRESS || "localhost:50052";
process.env.PERSISTENT_STORAGE_ADDRESS || "localhost:50053";

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: services/subscription_manager/v1/subscription_manager.proto
/* eslint-disable */
function createBaseGetSubscriptionsRequest() {
    return { contextId: "", eventTypeId: "" };
}
const GetSubscriptionsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.contextId !== "") {
            writer.uint32(10).string(message.contextId);
        }
        if (message.eventTypeId !== "") {
            writer.uint32(18).string(message.eventTypeId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSubscriptionsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contextId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.eventTypeId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextId: isSet(object.contextId) ? globalThis.String(object.contextId) : "",
            eventTypeId: isSet(object.eventTypeId) ? globalThis.String(object.eventTypeId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextId !== "") {
            obj.contextId = message.contextId;
        }
        if (message.eventTypeId !== "") {
            obj.eventTypeId = message.eventTypeId;
        }
        return obj;
    },
    create(base) {
        return GetSubscriptionsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSubscriptionsRequest();
        message.contextId = object.contextId ?? "";
        message.eventTypeId = object.eventTypeId ?? "";
        return message;
    },
};
function createBaseGetSubscriptionsResponse() {
    return { subscriptions: [] };
}
const GetSubscriptionsResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.subscriptions) {
            GetSubscriptionsResponse_FusionSubscription.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSubscriptionsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.subscriptions.push(GetSubscriptionsResponse_FusionSubscription.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subscriptions: globalThis.Array.isArray(object?.subscriptions)
                ? object.subscriptions.map((e) => GetSubscriptionsResponse_FusionSubscription.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscriptions?.length) {
            obj.subscriptions = message.subscriptions.map((e) => GetSubscriptionsResponse_FusionSubscription.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GetSubscriptionsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSubscriptionsResponse();
        message.subscriptions =
            object.subscriptions?.map((e) => GetSubscriptionsResponse_FusionSubscription.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetSubscriptionsResponse_FusionSubscription() {
    return { subscriptionId: "", subscriptionValue: "", associatedFilterOptions: [] };
}
const GetSubscriptionsResponse_FusionSubscription = {
    encode(message, writer = new BinaryWriter()) {
        if (message.subscriptionId !== "") {
            writer.uint32(10).string(message.subscriptionId);
        }
        if (message.subscriptionValue !== "") {
            writer.uint32(18).string(message.subscriptionValue);
        }
        for (const v of message.associatedFilterOptions) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSubscriptionsResponse_FusionSubscription();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.subscriptionId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.subscriptionValue = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.associatedFilterOptions.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subscriptionId: isSet(object.subscriptionId) ? globalThis.String(object.subscriptionId) : "",
            subscriptionValue: isSet(object.subscriptionValue) ? globalThis.String(object.subscriptionValue) : "",
            associatedFilterOptions: globalThis.Array.isArray(object?.associatedFilterOptions)
                ? object.associatedFilterOptions.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscriptionId !== "") {
            obj.subscriptionId = message.subscriptionId;
        }
        if (message.subscriptionValue !== "") {
            obj.subscriptionValue = message.subscriptionValue;
        }
        if (message.associatedFilterOptions?.length) {
            obj.associatedFilterOptions = message.associatedFilterOptions;
        }
        return obj;
    },
    create(base) {
        return GetSubscriptionsResponse_FusionSubscription.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSubscriptionsResponse_FusionSubscription();
        message.subscriptionId = object.subscriptionId ?? "";
        message.subscriptionValue = object.subscriptionValue ?? "";
        message.associatedFilterOptions = object.associatedFilterOptions?.map((e) => e) || [];
        return message;
    },
};
const FusionSubscriptionsService = {
    getSubscriptions: {
        path: "/services.subscription_manager.v1.FusionSubscriptions/GetSubscriptions",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(GetSubscriptionsRequest.encode(value).finish()),
        requestDeserialize: (value) => GetSubscriptionsRequest.decode(value),
        responseSerialize: (value) => Buffer.from(GetSubscriptionsResponse.encode(value).finish()),
        responseDeserialize: (value) => GetSubscriptionsResponse.decode(value),
    },
};
src$2.makeGenericClientConstructor(FusionSubscriptionsService, "services.subscription_manager.v1.FusionSubscriptions");
function isSet(value) {
    return value !== null && value !== undefined;
}

process.env.SUBSCRIPTION_MANAGER_ADDRESS || "localhost:50056";

const createEventForBotanixCanaryPing = (signature, md) => {
    return {
        eventTypeId: "0197ad6c104976d68240ff8e191e2b30",
        comparisonValue: "*",
        blockchain: FusionEvmRpcWrapper.BlockchainType.BLOCKCHAIN_TYPE_BOTANIX,
        changeSignature: signature,
        metadata: md,
        isComparisonValueCaseSensitive: true,
    };
};
const parse = async (context) => {
    //destructure the given blockchain and block from parserArgs
    // const { blockchain, logs } = params;
    // //Gather all logs that are erc20 Transfers
    // const transferLogs = logs.filter(isErc20Transfer);
    // const decodedTransfers = transferLogs.map(decodeTransferEventWithHash);
    // const blockNumber = Number(args.block.number);
    const { contextId, parameters } = context;
    console.log("Botanix Canary Ping parser started with contextId:", contextId);
    console.log("Parameters:", parameters);
    const rpc = new FusionEvmRpcWrapper(contextId);
    const response = await rpc.getAccountBalance({ accountAddress: "0xF389bffD516985d8261E6aAd63901Ce859e53b67", blockchainType: FusionEvmRpcWrapper.BlockchainType.BLOCKCHAIN_TYPE_BOTANIX, blockId: "0xA597F" });
    console.log("Response:", response);
    // Return the parsed data or any other relevant information as a flat array of objects, where each object represents
    // an event that should be processed/matched against alerts users have set up.
    // You can return multiple events for the same FusionEvent type (also referred to as 'topic' on the Admin Portal)
    // You may also return multiple different types of FusionEvent types in the same array.
    // For example, you can return a transfer event and a mint event in the same array
    // if you want to process both of them in the same parser.
    // If you don't have any events to return, you can return an empty array.
    // If you want to return a single event, you can return an array with a single object.
    // Note: The metadata (md) field is optional and can be used to pass additional information about the event.
    // Note: See https://docs.notifi.network/docs/fusion-sdk#metadata for more details on advanced metadata usage with filters.
    // Example of creating an event for Botanix Canary Ping
    const botanixCanaryPingEvent = createEventForBotanixCanaryPing("0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890", {
        randomCustomField1: "value1",
        randomCustomField2: "value2",
        botanixAccountBalance: response.value,
    });
    console.log("Parsed data:", response);
    return [botanixCanaryPingEvent];
};

export { parse };
