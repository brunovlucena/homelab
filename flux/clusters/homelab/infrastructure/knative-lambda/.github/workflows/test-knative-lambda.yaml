name: 🧪 Test Knative Lambda

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'hotfix/**'
    paths:
      - 'repos/homelab/flux/clusters/homelab/infrastructure/knative-lambda/**'
      - '.github/workflows/test-knative-lambda.yaml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'repos/homelab/flux/clusters/homelab/infrastructure/knative-lambda/**'
  workflow_dispatch:

env:
  GO_VERSION: '1.24'
  K6_VERSION: '0.48.0'
  WORKING_DIR: repos/homelab/flux/clusters/homelab/infrastructure/knative-lambda

jobs:
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  #  🧪 Go Unit Tests
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  test-go:
    name: 🧪 Go Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: ${{ env.WORKING_DIR }}/go.sum

      - name: 📦 Download dependencies
        run: |
          go mod download
          go get -t ./...

      - name: 🧹 Run go fmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Please run 'go fmt ./...'"
            gofmt -s -l .
            exit 1
          fi

      - name: 🔍 Run go vet
        run: go vet ./...

      - name: 🧪 Run Go unit tests with make
        run: make test-unit

      - name: 📊 Generate coverage report
        run: |
          go tool cover -func=coverage.out
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Coverage: ${COVERAGE}%"
          echo "COVERAGE=${COVERAGE}" >> $GITHUB_ENV

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ${{ env.WORKING_DIR }}/coverage.out
          flags: unittests
          name: knative-lambda-coverage
          fail_ci_if_error: false

      - name: 💬 Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = process.env.COVERAGE;
            const body = `## 📊 Go Test Coverage\n\n**Coverage:** ${coverage}%\n\n${coverage >= 80 ? '✅ Great coverage!' : coverage >= 60 ? '⚠️ Coverage could be improved' : '❌ Coverage is below 60%'}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  #  🚀 k6 Load Tests
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  test-k6:
    name: 🚀 k6 Load Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    
    # Only run k6 tests on main and develop branches or when manually triggered
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup k6
        run: |
          curl -fsSL https://github.com/grafana/k6/releases/download/v${{ env.K6_VERSION }}/k6-v${{ env.K6_VERSION }}-linux-amd64.tar.gz | \
          tar -xz --strip-components=1 -C /usr/local/bin k6-v${{ env.K6_VERSION }}-linux-amd64/k6
          k6 version

      - name: 🧪 Validate k6 test files
        run: |
          echo "Checking k6 test files..."
          ls -la tests/k6/
          
          if [ ! -f tests/k6/builder-tests.yaml ]; then
            echo "❌ builder-tests.yaml not found"
            exit 1
          fi
          
          if [ ! -f tests/k6/lambda-tests.yaml ]; then
            echo "❌ lambda-tests.yaml not found"
            exit 1
          fi
          
          echo "✅ All k6 test files found"

      - name: 🚀 Run k6 builder tests
        run: |
          echo "Running builder tests..."
          k6 run tests/k6/builder-tests.yaml --summary-export=builder-summary.json || true

      - name: 🚀 Run k6 lambda tests
        run: |
          echo "Running lambda tests..."
          k6 run tests/k6/lambda-tests.yaml --summary-export=lambda-summary.json || true

      - name: 📊 Parse k6 results
        if: always()
        run: |
          echo "## 📊 k6 Test Results" >> $GITHUB_STEP_SUMMARY
          
          if [ -f builder-summary.json ]; then
            echo "### Builder Tests" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat builder-summary.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f lambda-summary.json ]; then
            echo "### Lambda Tests" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat lambda-summary.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📤 Upload k6 results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-test-results
          path: |
            ${{ env.WORKING_DIR }}/builder-summary.json
            ${{ env.WORKING_DIR }}/lambda-summary.json
          retention-days: 30

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  #  🔍 Code Quality Checks
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  lint:
    name: 🔍 Lint Code
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: ${{ env.WORKING_DIR }}/go.sum

      - name: 🔍 Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: ${{ env.WORKING_DIR }}
          args: --timeout=5m

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  #  ✅ Summary
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  test-summary:
    name: ✅ Test Summary
    runs-on: ubuntu-latest
    needs: [test-go, test-k6, lint]
    if: always()
    
    steps:
      - name: 📊 Check test results
        run: |
          echo "## 🧪 Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Go Tests | ${{ needs.test-go.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| k6 Tests | ${{ needs.test-k6.result == 'success' && '✅ Passed' || needs.test-k6.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test-go.result }}" != "success" ] || [ "${{ needs.lint.result }}" != "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ Some tests failed. Please check the logs above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All required tests passed!" >> $GITHUB_STEP_SUMMARY

