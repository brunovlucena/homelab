name: Homepage Nightly Tests

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  GO_VERSION: '1.23.0'
  NODE_VERSION: '18'
  HOMEPAGE_PATH: 'flux/clusters/homelab/infrastructure/homepage'

jobs:
  # ============================================================================
  # Comprehensive Test Suite
  # ============================================================================
  comprehensive-tests:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Go dependencies
        working-directory: ${{ env.HOMEPAGE_PATH }}/api
        run: go mod download

      - name: 📦 Install Node dependencies
        working-directory: ${{ env.HOMEPAGE_PATH }}/frontend
        run: npm ci

      - name: 🧪 Run all backend tests
        working-directory: ${{ env.HOMEPAGE_PATH }}/api
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out

      - name: 🧪 Run all frontend tests
        working-directory: ${{ env.HOMEPAGE_PATH }}/frontend
        run: npm test -- --coverage --watchAll=false --passWithNoTests
        env:
          CI: true

      - name: 📊 Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            ${{ env.HOMEPAGE_PATH }}/api/coverage.out
            ${{ env.HOMEPAGE_PATH }}/frontend/coverage/
          retention-days: 30

  # ============================================================================
  # Performance Tests
  # ============================================================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 🏃 Run benchmark tests
        working-directory: ${{ env.HOMEPAGE_PATH }}/api
        run: |
          go test -bench=. -benchmem ./... > benchmark-results.txt || true
          cat benchmark-results.txt

      - name: 📊 Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: ${{ env.HOMEPAGE_PATH }}/api/benchmark-results.txt
          retention-days: 90

  # ============================================================================
  # Dependency Check
  # ============================================================================
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 Check for outdated Go dependencies
        working-directory: ${{ env.HOMEPAGE_PATH }}/api
        run: |
          go list -u -m all > go-dependencies.txt
          echo "### Go Dependencies" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat go-dependencies.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 🔍 Check for outdated npm dependencies
        working-directory: ${{ env.HOMEPAGE_PATH }}/frontend
        run: |
          npm outdated > npm-dependencies.txt || true
          echo "### NPM Dependencies" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat npm-dependencies.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 📊 Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            ${{ env.HOMEPAGE_PATH }}/api/go-dependencies.txt
            ${{ env.HOMEPAGE_PATH }}/frontend/npm-dependencies.txt
          retention-days: 30

  # ============================================================================
  # Security Audit
  # ============================================================================
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 🔐 Go vulnerability check
        working-directory: ${{ env.HOMEPAGE_PATH }}/api
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./... > govulncheck-results.txt || true
          cat govulncheck-results.txt

      - name: 🔐 npm audit
        working-directory: ${{ env.HOMEPAGE_PATH }}/frontend
        run: |
          npm audit --json > npm-audit.json || true
          npm audit

      - name: 🔐 Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: ${{ env.HOMEPAGE_PATH }}
          format: 'json'
          output: 'trivy-results.json'

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            ${{ env.HOMEPAGE_PATH }}/api/govulncheck-results.txt
            ${{ env.HOMEPAGE_PATH }}/frontend/npm-audit.json
            trivy-results.json
          retention-days: 90

  # ============================================================================
  # Code Quality
  # ============================================================================
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 🔍 Go cyclomatic complexity
        working-directory: ${{ env.HOMEPAGE_PATH }}/api
        run: |
          go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
          gocyclo -over 15 . > complexity-report.txt || true
          echo "### Cyclomatic Complexity Report" >> $GITHUB_STEP_SUMMARY
          if [ -s complexity-report.txt ]; then
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat complexity-report.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No high complexity functions found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🔍 Go code duplication
        working-directory: ${{ env.HOMEPAGE_PATH }}/api
        run: |
          go install github.com/mibk/dupl@latest
          dupl -threshold 50 . > duplication-report.txt || true
          echo "### Code Duplication Report" >> $GITHUB_STEP_SUMMARY
          if [ -s duplication-report.txt ]; then
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat duplication-report.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No significant duplication found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📊 Upload code quality reports
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: |
            ${{ env.HOMEPAGE_PATH }}/api/complexity-report.txt
            ${{ env.HOMEPAGE_PATH }}/api/duplication-report.txt
          retention-days: 30

  # ============================================================================
  # Nightly Summary
  # ============================================================================
  nightly-summary:
    name: Nightly Test Summary
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, performance-tests, dependency-check, security-audit, code-quality]
    if: always()
    
    steps:
      - name: 📊 Generate nightly summary
        run: |
          echo "# 🌙 Nightly Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Comprehensive Tests | ${{ needs.comprehensive-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result == 'success' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Check | ${{ needs.dependency-check.result == 'success' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.comprehensive-tests.result }}" == "success" ]; then
            echo "### ✅ All critical tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Critical tests failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 💬 Create issue if tests failed
        if: needs.comprehensive-tests.result != 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const title = '🚨 Nightly Tests Failed - ' + new Date().toISOString().split('T')[0];
            const body = `
            ## Nightly Test Failure
            
            The nightly test suite has failed. Please investigate.
            
            **Failed Jobs:**
            - Comprehensive Tests: ${{ needs.comprehensive-tests.result }}
            - Performance Tests: ${{ needs.performance-tests.result }}
            - Dependency Check: ${{ needs.dependency-check.result }}
            - Security Audit: ${{ needs.security-audit.result }}
            - Code Quality: ${{ needs.code-quality.result }}
            
            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'nightly-test-failure']
            });

