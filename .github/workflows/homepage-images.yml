# 🏠 Homepage Images CI/CD Pipeline
#
# This workflow builds, tests, and pushes Docker images for homepage services
# including the API and frontend components.

name: "🏠 Homepage Images CI/CD"

# 🔐 Required permissions for pushing to GitHub Container Registry
permissions:
  contents: read
  packages: write

on:
  # ⚠️ Images are built ONLY after tests pass via workflow_run
  # This ensures we never build images before tests complete
  workflow_run:
    workflows: ["Homepage Integration Tests"]
    types: [completed]
    branches: [main, master]
  schedule:
    # Run weekly on Sundays at 2 AM UTC to ensure images stay fresh
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prd
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io/brunovlucena
  IMAGE_TAG_DEV: dev
  IMAGE_TAG_PRD: latest
  NODE_VERSION: '24'
  GO_VERSION: '1.23'

jobs:
  # ✅ Check if tests passed (only for workflow_run trigger)
  check-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    outputs:
      tests-passed: ${{ steps.check.outputs.tests-passed }}
    steps:
      - name: "✅ Check Test Results"
        id: check
        run: |
          # For workflow_run, check if tests passed
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
              echo "tests-passed=true" >> $GITHUB_OUTPUT
              echo "✅ Tests passed, proceeding with image builds"
            else
              echo "tests-passed=false" >> $GITHUB_OUTPUT
              echo "❌ Tests failed, skipping image builds"
              exit 1
            fi
          else
            # For schedule or manual dispatch, assume tests will pass
            echo "tests-passed=true" >> $GITHUB_OUTPUT
            echo "✅ Manual/scheduled trigger, proceeding with image builds"
          fi

  # 🔍 Detect changes and determine which services to build
  detect-changes:
    needs: [check-tests]
    # Only proceed if tests passed (check-tests succeeded means tests passed)
    if: needs.check-tests.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      build-homepage-api: ${{ steps.changes.outputs.homepage-api }}
      build-homepage-frontend: ${{ steps.changes.outputs.homepage-frontend }}
      build-all: ${{ steps.changes.outputs.build-all }}
      environment: ${{ steps.env.outputs.environment }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🔍 Detect Changes"
        id: changes
        run: |
          # Check for changes in homepage API
          API_CHANGED=false
          if ! git diff --quiet HEAD~1 HEAD -- flux/clusters/homelab/infrastructure/homepage/api/; then
            API_CHANGED=true
          fi
          
          # Check for changes in homepage frontend
          FRONTEND_CHANGED=false
          if ! git diff --quiet HEAD~1 HEAD -- flux/clusters/homelab/infrastructure/homepage/frontend/; then
            FRONTEND_CHANGED=true
          fi
          
          # For scheduled runs or manual triggers, build all
          BUILD_ALL=false
          if [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            BUILD_ALL=true
          fi
          
          # Check if any changes detected
          HAS_CHANGES=false
          if [[ "$API_CHANGED" == "true" ]] || [[ "$FRONTEND_CHANGED" == "true" ]] || [[ "$BUILD_ALL" == "true" ]]; then
            HAS_CHANGES=true
          fi
          
          echo "homepage-api=$API_CHANGED" >> $GITHUB_OUTPUT
          echo "homepage-frontend=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT
          echo "build-all=$BUILD_ALL" >> $GITHUB_OUTPUT
          echo "has-changes=$HAS_CHANGES" >> $GITHUB_OUTPUT
          
          echo "🔍 Change Detection Results:"
          echo "  API changed: $API_CHANGED"
          echo "  Frontend changed: $FRONTEND_CHANGED"
          echo "  Build all: $BUILD_ALL"
          echo "  Has changes: $HAS_CHANGES"

      - name: "🌍 Set Environment"
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "environment=prd" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  # 🏗️ Build Homepage API (Go)
  build-homepage-api:
    needs: [check-tests, detect-changes]
    if: always() && needs.detect-changes.result == 'success' && needs.detect-changes.outputs.has-changes == 'true' && (needs.detect-changes.outputs.build-homepage-api == 'true' || needs.detect-changes.outputs.build-all == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4

      - name: "🔧 Setup Go Environment"
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: './flux/clusters/homelab/infrastructure/homepage/api/go.sum'

      - name: "🏗️ Build Go Application"
        working-directory: ./flux/clusters/homelab/infrastructure/homepage/api
        run: |
          echo "🔍 Validating Go modules..."
          go mod verify
          go mod tidy
          echo "🏗️ Building Go application..."
          go build -o bruno-site-api ./cmd/api

      - name: "🐳 Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "🔐 Login to GitHub Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "🏷️ Extract Metadata"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/homelab/homepage-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=${{ needs.detect-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}
            type=sha,prefix={{branch}}-

      - name: "🏗️ Build and Push API Image"
        uses: docker/build-push-action@v5
        with:
          context: ./flux/clusters/homelab/infrastructure/homepage/api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: "🔒 Run Trivy Security Scan"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/homelab/homepage-api:${{ needs.detect-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}
          format: 'sarif'
          output: 'trivy-results-api.sarif'

      - name: "📊 Upload Trivy Scan Results"
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-api.sarif'

  # 🏗️ Build Homepage Frontend (React)
  build-homepage-frontend:
    needs: [check-tests, detect-changes]
    if: always() && needs.detect-changes.result == 'success' && needs.detect-changes.outputs.has-changes == 'true' && (needs.detect-changes.outputs.build-homepage-frontend == 'true' || needs.detect-changes.outputs.build-all == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4

      - name: "🔧 Setup Node.js Environment"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './flux/clusters/homelab/infrastructure/homepage/frontend/package-lock.json'

      - name: "📦 Install Dependencies"
        working-directory: ./flux/clusters/homelab/infrastructure/homepage/frontend
        run: |
          echo "📦 Installing npm dependencies..."
          npm ci --legacy-peer-deps --no-audit --no-fund || {
            echo "❌ npm ci failed, trying npm install..."
            npm install --legacy-peer-deps --no-audit --no-fund
          }

      - name: "🧪 Run Tests"
        working-directory: ./flux/clusters/homelab/infrastructure/homepage/frontend
        run: |
          echo "🧪 Running frontend tests..."
          npm test -- --coverage --watchAll=false || echo "⚠️ Tests failed, but continuing build"

      - name: "🏗️ Build Application"
        working-directory: ./flux/clusters/homelab/infrastructure/homepage/frontend
        run: |
          echo "🏗️ Building React application..."
          npm run build

      - name: "🐳 Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "🔐 Login to GitHub Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "🏷️ Extract Metadata"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/homelab/homepage-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=${{ needs.detect-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}
            type=sha,prefix={{branch}}-

      - name: "🏗️ Build and Push Frontend Image"
        uses: docker/build-push-action@v5
        with:
          context: ./flux/clusters/homelab/infrastructure/homepage/frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: "🔒 Run Trivy Security Scan"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/homelab/homepage-frontend:${{ needs.detect-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}
          format: 'sarif'
          output: 'trivy-results-frontend.sarif'

      - name: "📊 Upload Trivy Scan Results"
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-frontend.sarif'

  # 📊 Generate Build Summary
  build-summary:
    needs: [check-tests, detect-changes, build-homepage-api, build-homepage-frontend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: "📊 Generate Build Summary"
        run: |
          echo "## 🏠 Homepage Images Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Information:**" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ needs.detect-changes.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests Status: ${{ needs.check-tests.outputs.tests-passed == 'true' && '✅ Passed' || '❌ Failed/Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Services Built:**" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status | Image Tag |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|-----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Homepage API | ${{ needs.build-homepage-api.result == 'success' && '✅ Success' || needs.build-homepage-api.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | ${{ needs.detect-changes.outputs.environment == 'dev' && 'dev' || 'latest' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Homepage Frontend | ${{ needs.build-homepage-frontend.result == 'success' && '✅ Success' || needs.build-homepage-frontend.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | ${{ needs.detect-changes.outputs.environment == 'dev' && 'dev' || 'latest' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry Images:**" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- API: \`${{ env.REGISTRY }}/homelab/homepage-api:${{ needs.detect-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: \`${{ env.REGISTRY }}/homelab/homepage-frontend:${{ needs.detect-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Images are automatically available in the registry" >> $GITHUB_STEP_SUMMARY
          echo "- Update Kubernetes deployments to use new images" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor deployments for successful rollout" >> $GITHUB_STEP_SUMMARY
