# 🏠 HOMEPAGE Images CI/CD Pipeline
#
# This workflow runs tests and builds Docker images for homepage services
# including the API and frontend components.

name: "🏠 HOMEPAGE Images CI/CD"

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write
  pull-requests: write

on:
  push:
    branches: [main, master]
    paths:
      - 'flux/clusters/homelab/infrastructure/homepage/**'
      - '.github/workflows/homepage-images.yml'
  pull_request:
    branches: [main, master]
    paths:
      - 'flux/clusters/homelab/infrastructure/homepage/**'
      - '.github/workflows/homepage-images.yml'
  schedule:
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prd
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io/brunovlucena
  IMAGE_TAG_DEV: dev
  IMAGE_TAG_PRD: latest
  GO_VERSION: '1.23.0'
  NODE_VERSION: '24'
  HOMEPAGE_PATH: 'flux/clusters/homelab/infrastructure/homepage'

jobs:
  # 🔍 Detect changes to determine if tests should run
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      should-test: ${{ steps.changes.outputs.should-test }}
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🔍 Detect Changes"
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should-test=true" >> $GITHUB_OUTPUT
          elif git diff --quiet HEAD~1 HEAD -- flux/clusters/homelab/infrastructure/homepage/; then
            echo "should-test=false" >> $GITHUB_OUTPUT
          else
            echo "should-test=true" >> $GITHUB_OUTPUT
          fi

  # 🧪 Backend Tests (Go)
  backend-tests:
    needs: detect-changes
    if: needs.detect-changes.outputs.should-test == 'true'
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: ${{ env.HOMEPAGE_PATH }}/api/go.sum

      - name: 📦 Install dependencies
        working-directory: ${{ env.HOMEPAGE_PATH }}/api
        run: |
          go mod download
          go mod verify

      - name: 🧪 Run unit tests
        working-directory: ${{ env.HOMEPAGE_PATH }}/api
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: 📊 Generate coverage report
        working-directory: ${{ env.HOMEPAGE_PATH }}/api
        run: |
          go tool cover -func=coverage.out
          echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          go tool cover -func=coverage.out >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ${{ env.HOMEPAGE_PATH }}/api/coverage.out
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: 🔍 Run go vet
        working-directory: ${{ env.HOMEPAGE_PATH }}/api
        run: go vet ./...

      - name: 🔍 Run staticcheck
        working-directory: ${{ env.HOMEPAGE_PATH }}/api
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

  # 🧪 Frontend Tests (TypeScript)
  frontend-tests:
    needs: detect-changes
    if: needs.detect-changes.outputs.should-test == 'true'
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.HOMEPAGE_PATH }}/frontend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ${{ env.HOMEPAGE_PATH }}/frontend
        run: |
          echo "📦 Installing npm dependencies..."
          npm cache clean --force
          npm ci --legacy-peer-deps --no-audit --no-fund --prefer-offline || {
            echo "❌ npm ci failed, trying npm install..."
            rm -rf node_modules package-lock.json
            npm install --legacy-peer-deps --no-audit --no-fund
          }
          
          echo "🔍 Verifying jest-util installation..."
          npm list jest-util || {
            echo "❌ jest-util not found, installing explicitly..."
            npm install jest-util@^29.7.0 --save-dev
          }

      - name: 🧪 Run unit tests
        working-directory: ${{ env.HOMEPAGE_PATH }}/frontend
        run: npm test -- --coverage --watchAll=false --passWithNoTests
        env:
          CI: true

      - name: 📊 Generate coverage report
        if: always()
        working-directory: ${{ env.HOMEPAGE_PATH }}/frontend
        run: |
          if [ -f coverage/lcov.info ]; then
            echo "### Frontend Test Coverage" >> $GITHUB_STEP_SUMMARY
            echo "Coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ${{ env.HOMEPAGE_PATH }}/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

      - name: 🔍 Run TypeScript check
        working-directory: ${{ env.HOMEPAGE_PATH }}/frontend
        run: npm run build

      - name: 🔍 Run ESLint
        working-directory: ${{ env.HOMEPAGE_PATH }}/frontend
        run: npm run lint || true
        continue-on-error: true

  # 🔍 Detect changes and determine which services to build
  detect-build-changes:
    needs: [detect-changes, backend-tests, frontend-tests]
    if: always() && (needs.backend-tests.result == 'success' || needs.backend-tests.result == 'skipped') && (needs.frontend-tests.result == 'success' || needs.frontend-tests.result == 'skipped')
    runs-on: ubuntu-latest
    outputs:
      build-homepage-api: ${{ steps.changes.outputs.homepage-api }}
      build-homepage-frontend: ${{ steps.changes.outputs.homepage-frontend }}
      build-all: ${{ steps.changes.outputs.build-all }}
      environment: ${{ steps.env.outputs.environment }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🔍 Detect Changes"
        id: changes
        run: |
          # Check for changes in homepage API
          API_CHANGED=false
          if ! git diff --quiet HEAD~1 HEAD -- flux/clusters/homelab/infrastructure/homepage/api/; then
            API_CHANGED=true
          fi
          
          # Check for changes in homepage frontend
          FRONTEND_CHANGED=false
          if ! git diff --quiet HEAD~1 HEAD -- flux/clusters/homelab/infrastructure/homepage/frontend/; then
            FRONTEND_CHANGED=true
          fi
          
          # Set outputs
          echo "homepage-api=$API_CHANGED" >> $GITHUB_OUTPUT
          echo "homepage-frontend=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT
          
          # For scheduled runs or manual triggers, build all
          if [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "build-all=true" >> $GITHUB_OUTPUT
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "build-all=false" >> $GITHUB_OUTPUT
            if [[ "$API_CHANGED" == "true" ]] || [[ "$FRONTEND_CHANGED" == "true" ]]; then
              echo "has-changes=true" >> $GITHUB_OUTPUT
            else
              echo "has-changes=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: "🌍 Set Environment"
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  # 🏗️ Build Homepage API Image
  build-homepage-api:
    needs: detect-build-changes
    if: needs.detect-build-changes.outputs.build-homepage-api == 'true' || needs.detect-build-changes.outputs.build-all == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4

      - name: "📝 Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "🔐 Login to GitHub Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "🏷️ Extract Metadata for Homepage API"
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/homepage-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=${{ needs.detect-build-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}

      - name: "🏗️ Build and push Homepage API image"
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.HOMEPAGE_PATH }}/api
          file: ${{ env.HOMEPAGE_PATH }}/api/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha,scope=homepage-api
          cache-to: type=gha,mode=max,scope=homepage-api
          platforms: linux/amd64,linux/arm64

      - name: "🔒 Run Trivy Security Scan for Homepage API"
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/homepage-api:${{ needs.detect-build-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}
          format: 'sarif'
          output: 'trivy-results-api.sarif'

      - name: "📊 Upload Trivy Scan Results for Homepage API"
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-api.sarif'

  # 🏗️ Build Homepage Frontend Image
  build-homepage-frontend:
    needs: detect-build-changes
    if: needs.detect-build-changes.outputs.build-homepage-frontend == 'true' || needs.detect-build-changes.outputs.build-all == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4

      - name: "📝 Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "🔐 Login to GitHub Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "🏷️ Extract Metadata for Homepage Frontend"
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/homepage-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=${{ needs.detect-build-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}

      - name: "🏗️ Build and push Homepage Frontend image"
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.HOMEPAGE_PATH }}/frontend
          file: ${{ env.HOMEPAGE_PATH }}/frontend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha,scope=homepage-frontend
          cache-to: type=gha,mode=max,scope=homepage-frontend
          platforms: linux/amd64,linux/arm64

      - name: "🔒 Run Trivy Security Scan for Homepage Frontend"
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/homepage-frontend:${{ needs.detect-build-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}
          format: 'sarif'
          output: 'trivy-results-frontend.sarif'

      - name: "📊 Upload Trivy Scan Results for Homepage Frontend"
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-frontend.sarif'

  # 📊 Generate Build Summary
  build-summary:
    needs: [detect-changes, backend-tests, frontend-tests, detect-build-changes, build-homepage-api, build-homepage-frontend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: "📊 Generate Build Summary"
        run: |
          echo "## 🏠 HOMEPAGE Images CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Information:**" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ needs.detect-build-changes.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Results:**" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Change Detection | ${{ needs.detect-changes.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.backend-tests.result == 'success' && '✅ Success' || needs.backend-tests.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅ Success' || needs.frontend-tests.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Results:**" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Homepage API Image | ${{ needs.build-homepage-api.result == 'success' && '✅ Built' || needs.build-homepage-api.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Homepage Frontend Image | ${{ needs.build-homepage-frontend.result == 'success' && '✅ Built' || needs.build-homepage-frontend.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.backend-tests.result }}" == "success" || "${{ needs.backend-tests.result }}" == "skipped" ]] && [[ "${{ needs.frontend-tests.result }}" == "success" || "${{ needs.frontend-tests.result }}" == "skipped" ]]; then
            echo "**Status:** ✅ Tests passed! Images built successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** ❌ Tests failed! Images not built." >> $GITHUB_STEP_SUMMARY
          fi
