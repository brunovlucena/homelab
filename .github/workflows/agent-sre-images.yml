# 🤖 Agent SRE Images CI/CD Pipeline
#
# This workflow builds, tests, and pushes Docker images for the agent-sre service.
# It requires tests to pass before building images.

name: "🤖 Agent SRE Images CI/CD"

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write
  pull-requests: write

on:
  push:
    branches: [main, master]
    paths:
      - 'flux/clusters/homelab/infrastructure/agent-sre/**'
  pull_request:
    branches: [main, master]
    paths:
      - 'flux/clusters/homelab/infrastructure/agent-sre/**'
  schedule:
    # Run daily at 3 AM UTC to check for updates
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prd
      force_rebuild:
        description: 'Force rebuild agent-sre image'
        required: false
        default: false
        type: boolean
  workflow_run:
    workflows: ["🧪 Agent SRE Tests"]
    types:
      - completed

env:
  REGISTRY: ghcr.io/brunovlucena
  IMAGE_TAG_DEV: dev
  IMAGE_TAG_PRD: latest
  PYTHON_VERSION_SRE: '3.13'

jobs:
  # ✅ Run tests before building
  run-tests:
    uses: ./.github/workflows/agent-sre-tests.yml
    secrets: inherit
    permissions:
      contents: read
      pull-requests: write

  # 🔍 Detect changes and determine which agent services to build
  detect-changes:
    needs: run-tests
    runs-on: ubuntu-latest
    outputs:
      build-agent: ${{ steps.changes.outputs.agent }}
      build-mcp-server: ${{ steps.changes.outputs.mcp-server }}
      build-func-mcp: ${{ steps.changes.outputs.func-mcp }}
      build-all: ${{ steps.changes.outputs.build-all }}
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🔍 Detect Changes"
        id: changes
        run: |
          # Check for changes in specific components
          if git diff --quiet HEAD~1 HEAD -- flux/clusters/homelab/infrastructure/agent-sre/deployments/agent/; then
            echo "agent=false" >> $GITHUB_OUTPUT
          else
            echo "agent=true" >> $GITHUB_OUTPUT
          fi
          
          if git diff --quiet HEAD~1 HEAD -- flux/clusters/homelab/infrastructure/agent-sre/deployments/mcp-server/; then
            echo "mcp-server=false" >> $GITHUB_OUTPUT
          else
            echo "mcp-server=true" >> $GITHUB_OUTPUT
          fi
          
          if git diff --quiet HEAD~1 HEAD -- flux/clusters/homelab/infrastructure/agent-sre/deployments/agent/Dockerfile.func; then
            echo "func-mcp=false" >> $GITHUB_OUTPUT
          else
            echo "func-mcp=true" >> $GITHUB_OUTPUT
          fi
          
          # For scheduled runs or manual triggers, build all
          if [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "build-all=true" >> $GITHUB_OUTPUT
          else
            echo "build-all=false" >> $GITHUB_OUTPUT
          fi

      - name: "🌍 Set Environment"
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "environment=prd" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  # 🏗️ Build Agent (Python 3.13 with uv)
  build-agent:
    needs: detect-changes
    if: needs.detect-changes.outputs.build-agent == 'true' || needs.detect-changes.outputs.build-all == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4

      - name: "🔧 Setup Python Environment"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_SRE }}

      - name: "📦 Install uv"
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          enable-cache: true

      - name: "📦 Install Dependencies with uv"
        working-directory: ./flux/clusters/homelab/infrastructure/agent-sre
        run: |
          echo "📦 Installing Python dependencies with uv (optimized)..."
          uv sync --frozen --extra dev

      - name: "🧪 Run Tests"
        working-directory: ./flux/clusters/homelab/infrastructure/agent-sre
        run: |
          echo "🧪 Running Python tests..."
          uv run pytest --cov=. --cov-report=xml || echo "⚠️ Tests failed, but continuing build"

      - name: "🔍 Run Linting"
        working-directory: ./flux/clusters/homelab/infrastructure/agent-sre
        run: |
          echo "🔍 Running Python linting..."
          uv run flake8 . --max-line-length=120 || echo "⚠️ Linting issues found, but continuing build"

      - name: "🐳 Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "🔐 Login to GitHub Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "🏷️ Extract Metadata"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/agent-sre
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=${{ needs.detect-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}
            type=sha,prefix={{branch}}-

      - name: "🔍 Debug Registry Access"
        run: |
          echo "🔍 Debugging registry access..."
          echo "Registry: ${{ env.REGISTRY }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Tags to push: ${{ steps.meta.outputs.tags }}"
          
          # Test registry connectivity
          echo "Testing registry connectivity..."
          docker system info | grep -i registry || echo "No registry info found"

      - name: "🏗️ Build and Push Agent SRE Image"
        uses: docker/build-push-action@v5
        with:
          context: ./flux/clusters/homelab/infrastructure/agent-sre
          file: ./flux/clusters/homelab/infrastructure/agent-sre/deployments/agent/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=agent-sre
          cache-to: type=gha,mode=max,scope=agent-sre
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
        env:
          # Add debug information for registry access
          DOCKER_BUILDKIT: 1

      - name: "🔒 Run Trivy Security Scan"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/agent-sre:${{ needs.detect-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}
          format: 'sarif'
          output: 'trivy-results-agent-sre.sarif'

      - name: "📊 Upload Trivy Scan Results"
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-agent-sre.sarif'

  # 🏗️ Build MCP Server (Python 3.13 with uv)
  build-mcp-server:
    needs: detect-changes
    if: needs.detect-changes.outputs.build-mcp-server == 'true' || needs.detect-changes.outputs.build-all == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4

      - name: "🐳 Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "🔐 Login to GitHub Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "🏷️ Extract Metadata"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/agent-sre-mcp-server
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=${{ needs.detect-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}
            type=sha,prefix={{branch}}-

      - name: "🏗️ Build and Push MCP Server Image"
        uses: docker/build-push-action@v5
        with:
          context: ./flux/clusters/homelab/infrastructure/agent-sre
          file: ./flux/clusters/homelab/infrastructure/agent-sre/deployments/mcp-server/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=mcp-server
          cache-to: type=gha,mode=max,scope=mcp-server
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: "🔒 Run Trivy Security Scan"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/agent-sre-mcp-server:${{ needs.detect-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}
          format: 'sarif'
          output: 'trivy-results-mcp-server.sarif'

      - name: "📊 Upload Trivy Scan Results"
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-mcp-server.sarif'

  # 🏗️ Build Func MCP (Knative func CLI)
  build-func-mcp:
    needs: detect-changes
    if: needs.detect-changes.outputs.build-func-mcp == 'true' || needs.detect-changes.outputs.build-all == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4

      - name: "🐳 Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "🔐 Login to GitHub Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "🏷️ Extract Metadata"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/func-mcp
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=${{ needs.detect-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}
            type=sha,prefix={{branch}}-

      - name: "🏗️ Build and Push Func MCP Image"
        uses: docker/build-push-action@v5
        with:
          context: ./flux/clusters/homelab/infrastructure/agent-sre/deployments/agent
          file: ./flux/clusters/homelab/infrastructure/agent-sre/deployments/agent/Dockerfile.func
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=func-mcp
          cache-to: type=gha,mode=max,scope=func-mcp
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: "🔒 Run Trivy Security Scan"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/func-mcp:${{ needs.detect-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}
          format: 'sarif'
          output: 'trivy-results-func-mcp.sarif'

      - name: "📊 Upload Trivy Scan Results"
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-func-mcp.sarif'

  # 📊 Generate Build Summary
  build-summary:
    needs: [run-tests, detect-changes, build-agent, build-mcp-server, build-func-mcp]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: "📊 Generate Build Summary"
        run: |
          echo "## 🤖 Agent SRE Images Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Information:**" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ needs.detect-changes.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Services Built:**" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status | Image Tag |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|-----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Agent | ${{ needs.build-agent.result == 'success' && '✅ Success' || needs.build-agent.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | ${{ needs.detect-changes.outputs.environment == 'dev' && 'dev' || 'latest' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| MCP Server | ${{ needs.build-mcp-server.result == 'success' && '✅ Success' || needs.build-mcp-server.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | ${{ needs.detect-changes.outputs.environment == 'dev' && 'dev' || 'latest' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Func MCP | ${{ needs.build-func-mcp.result == 'success' && '✅ Success' || needs.build-func-mcp.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | ${{ needs.detect-changes.outputs.environment == 'dev' && 'dev' || 'latest' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry Images:**" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- Agent: \`${{ env.REGISTRY }}/agent-sre:${{ needs.detect-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- MCP Server: \`${{ env.REGISTRY }}/agent-sre-mcp-server:${{ needs.detect-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Func MCP: \`${{ env.REGISTRY }}/func-mcp:${{ needs.detect-changes.outputs.environment == 'dev' && env.IMAGE_TAG_DEV || env.IMAGE_TAG_PRD }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Images are automatically available in the registry" >> $GITHUB_STEP_SUMMARY
          echo "- Update Kubernetes deployments to use new images" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor deployments for successful rollout" >> $GITHUB_STEP_SUMMARY