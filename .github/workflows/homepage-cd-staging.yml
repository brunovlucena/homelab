name: 🟢 Homepage - CD Staging

on:
  push:
    branches:
      - develop
    paths:
      - 'flux/clusters/homelab/infrastructure/homepage/api/**'
      - 'flux/clusters/homelab/infrastructure/homepage/frontend/**'
      - 'flux/clusters/homelab/infrastructure/homepage/chart/**'
      - '.github/workflows/homepage-cd-staging.yml'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.0.0-beta.123)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ghcr.io/brunovlucena/homelab/homepage-api
  IMAGE_NAME_FRONTEND: ghcr.io/brunovlucena/homelab/homepage-frontend
  NAMESPACE: homepage

jobs:
  # 🧪 Test and Build Images
  test-and-build:
    name: "🧪 Test and Build Images"
    runs-on: ubuntu-latest
    outputs:
      image-tag-api: ${{ steps.meta-api.outputs.tags }}
      image-tag-frontend: ${{ steps.meta-frontend.outputs.tags }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "📋 Set Version"
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Extract version from Chart.yaml for develop branch
            VERSION=$(grep '^version:' flux/clusters/homelab/infrastructure/homepage/chart/Chart.yaml | awk '{print $2}')
            echo "version=${VERSION}-beta.$(date +%s)" >> $GITHUB_OUTPUT
          fi
          echo "Version: ${{ steps.version.outputs.version }}"

      - name: "🐳 Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "🔐 Log in to Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "📊 Extract API Metadata"
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME_API }}
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=Homepage API
            org.opencontainers.image.description=Bruno Lucena's Homepage API
            org.opencontainers.image.url=https://github.com/brunovlucena/homelab
            org.opencontainers.image.source=https://github.com/brunovlucena/homelab
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.created=${{ fromJSON(steps.date.outputs.date).ISO8601 }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: "📊 Extract Frontend Metadata"
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=Homepage Frontend
            org.opencontainers.image.description=Bruno Lucena's Homepage Frontend
            org.opencontainers.image.url=https://github.com/brunovlucena/homelab
            org.opencontainers.image.source=https://github.com/brunovlucena/homelab
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.created=${{ fromJSON(steps.date.outputs.date).ISO8601 }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: "📅 Get Date"
        id: date
        run: echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: "🧪 Test API"
        run: |
          cd flux/clusters/homelab/infrastructure/homepage/api
          go test -v ./...

      - name: "🧪 Test Frontend"
        run: |
          cd flux/clusters/homelab/infrastructure/homepage/frontend
          npm ci
          npm run test

      - name: "🏗️ Build and Push API Image"
        uses: docker/build-push-action@v5
        with:
          context: flux/clusters/homelab/infrastructure/homepage/api
          file: flux/clusters/homelab/infrastructure/homepage/api/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_DATE=${{ fromJSON(steps.date.outputs.date).ISO8601 }}

      - name: "🏗️ Build and Push Frontend Image"
        uses: docker/build-push-action@v5
        with:
          context: flux/clusters/homelab/infrastructure/homepage/frontend
          file: flux/clusters/homelab/infrastructure/homepage/frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          target: production
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_DATE=${{ fromJSON(steps.date.outputs.date).ISO8601 }}

  # 🚀 Deploy to Staging
  deploy-staging:
    name: "🚀 Deploy to Staging"
    needs: test-and-build
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup kubectl"
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: "🔐 Configure kubectl"
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: "📋 Update Helm Values"
        run: |
          # Update values.yaml with new image tags
          sed -i "s|tag: .*|tag: \"${{ needs.test-and-build.outputs.version }}\"|g" \
            flux/clusters/homelab/infrastructure/homepage/chart/values.yaml
          
          # Update Chart.yaml version
          sed -i "s|^version: .*|version: ${{ needs.test-and-build.outputs.version }}|" \
            flux/clusters/homelab/infrastructure/homepage/chart/Chart.yaml

      - name: "🚀 Deploy to Staging"
        run: |
          echo "🚀 Deploying homepage v${{ needs.test-and-build.outputs.version }} to staging..."
          
          # Force Flux reconciliation
          kubectl get namespace ${{ env.NAMESPACE }} || kubectl create namespace ${{ env.NAMESPACE }}
          
          # Wait for deployment to complete
          kubectl rollout status deployment/homepage-api -n ${{ env.NAMESPACE }} --timeout=600s
          kubectl rollout status deployment/homepage-frontend -n ${{ env.NAMESPACE }} --timeout=600s
          
          echo "✅ Deployment completed successfully!"

      - name: "🧪 Run Smoke Tests"
        run: |
          echo "🧪 Running smoke tests against staging..."
          
          # Get staging URL (adjust as needed)
          STAGING_URL="https://staging.lucena.cloud"
          
          # Test API health
          curl -f "${STAGING_URL}/api/v1/health" || exit 1
          
          # Test frontend
          curl -f "${STAGING_URL}/" || exit 1
          
          echo "✅ Smoke tests passed!"

      - name: "📊 Deployment Summary"
        run: |
          echo "## 🎉 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: \`${{ needs.test-and-build.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "**Images**: " >> $GITHUB_STEP_SUMMARY
          echo "- API: \`${{ env.IMAGE_NAME_API }}:${{ needs.test-and-build.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: \`${{ env.IMAGE_NAME_FRONTEND }}:${{ needs.test-and-build.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Access**: https://staging.lucena.cloud" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Verification Commands" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "kubectl get pods -n ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "kubectl get configmap -n ${{ env.NAMESPACE }} | grep dashboard" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
