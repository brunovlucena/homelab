name: 🚀 Homepage - CD Staging

on:
  push:
    branches:
      - develop
    paths:
      - 'flux/clusters/homelab/infrastructure/homepage/api/**'
      - 'flux/clusters/homelab/infrastructure/homepage/frontend/**'
      - 'flux/clusters/homelab/infrastructure/homepage/chart/**'
      - '.github/workflows/homepage-cd-staging.yml'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.1.0-beta.1)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository_owner }}/homelab/homepage-api
  IMAGE_NAME_FRONTEND: ${{ github.repository_owner }}/homelab/homepage-frontend
  WORKING_DIR: flux/clusters/homelab/infrastructure/homepage
  ENVIRONMENT: staging

jobs:
  version:
    name: 📋 Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      api_changed: ${{ steps.changes.outputs.api }}
      frontend_changed: ${{ steps.changes.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            api:
              - 'flux/clusters/homelab/infrastructure/homepage/api/**'
            frontend:
              - 'flux/clusters/homelab/infrastructure/homepage/frontend/**'
      
      - name: Generate version
        id: version
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            # Get chart version and build number
            CHART_VERSION=$(grep '^version:' ${{ env.WORKING_DIR }}/chart/Chart.yaml | awk '{print $2}')
            BUILD_NUMBER=${{ github.run_number }}
            VERSION="${CHART_VERSION}-beta.${BUILD_NUMBER}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"

  build-and-push-api:
    name: 🏗️ Build & Push API
    runs-on: ubuntu-latest
    needs: version
    if: needs.version.outputs.api_changed == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
          tags: |
            type=raw,value=${{ needs.version.outputs.version }}
            type=raw,value=staging
            type=sha,prefix=${{ needs.version.outputs.version }}-
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKING_DIR }}/api
          file: ${{ env.WORKING_DIR }}/api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.version.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

  build-and-push-frontend:
    name: 🏗️ Build & Push Frontend
    runs-on: ubuntu-latest
    needs: version
    if: needs.version.outputs.frontend_changed == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=raw,value=${{ needs.version.outputs.version }}
            type=raw,value=staging
            type=sha,prefix=${{ needs.version.outputs.version }}-
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKING_DIR }}/frontend
          file: ${{ env.WORKING_DIR }}/frontend/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.version.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

  update-helm-values:
    name: 📝 Update Helm Values
    runs-on: ubuntu-latest
    needs: [version, build-and-push-api, build-and-push-frontend]
    if: always() && (needs.build-and-push-api.result == 'success' || needs.build-and-push-frontend.result == 'success')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update Helm values for staging
        run: |
          VERSION="${{ needs.version.outputs.version }}"
          VALUES_FILE="${{ env.WORKING_DIR }}/k8s/values-staging.yaml"
          
          # Create staging values file if it doesn't exist
          if [ ! -f "$VALUES_FILE" ]; then
            cat > "$VALUES_FILE" <<EOF
          # Staging environment overrides
          environment: staging
          
          api:
            image:
              tag: ${VERSION}
          
          frontend:
            image:
              tag: ${VERSION}
          EOF
          else
            # Update existing file
            if [ "${{ needs.version.outputs.api_changed }}" == "true" ]; then
              sed -i "s|tag:.*# api|tag: ${VERSION} # api|g" "$VALUES_FILE"
            fi
            if [ "${{ needs.version.outputs.frontend_changed }}" == "true" ]; then
              sed -i "s|tag:.*# frontend|tag: ${VERSION} # frontend|g" "$VALUES_FILE"
            fi
          fi
          
          cat "$VALUES_FILE"
      
      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ env.WORKING_DIR }}/k8s/values-staging.yaml
          git commit -m "chore(staging): update homepage to ${{ needs.version.outputs.version }}" || echo "No changes to commit"
          git push

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [version, update-helm-values]
    environment:
      name: staging
      url: https://staging.lucena.cloud
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
      
      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      
      - name: Trigger Flux reconciliation
        run: |
          # Install Flux CLI if needed
          curl -s https://fluxcd.io/install.sh | sudo bash
          
          # Reconcile GitRepository
          flux reconcile source git homelab -n flux-system --timeout 5m
          
          # Reconcile HelmRelease
          flux reconcile helmrelease homepage -n homepage --timeout 10m
      
      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/homepage-api -n homepage --timeout=5m || true
          kubectl rollout status deployment/homepage-frontend -n homepage --timeout=5m || true
      
      - name: Verify deployment
        run: |
          kubectl get pods -n homepage
          kubectl get svc -n homepage

  smoke-tests:
    name: 🧪 Smoke Tests
    runs-on: ubuntu-latest
    needs: [version, deploy-staging]
    steps:
      - uses: actions/checkout@v4
      
      - name: Wait for services to be ready
        run: sleep 30
      
      - name: Test API health
        run: |
          curl -f https://staging.lucena.cloud/health || exit 1
      
      - name: Test frontend
        run: |
          curl -f https://staging.lucena.cloud/ || exit 1
      
      - name: Test API endpoints
        run: |
          curl -f https://staging.lucena.cloud/api/v1/projects || exit 1

  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [version, deploy-staging, smoke-tests]
    if: always()
    steps:
      - name: Deployment summary
        run: |
          echo "## 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Smoke Tests:** ${{ needs.smoke-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Changes:**" >> $GITHUB_STEP_SUMMARY
          echo "- API: ${{ needs.version.outputs.api_changed == 'true' && '✅' || '⏭️' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ needs.version.outputs.frontend_changed == 'true' && '✅' || '⏭️' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://staging.lucena.cloud" >> $GITHUB_STEP_SUMMARY

