name: Homepage PR Checks

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'flux/clusters/homelab/infrastructure/homepage/**'
  workflow_dispatch:

env:
  GO_VERSION: '1.23.0'
  NODE_VERSION: '18'
  HOMEPAGE_PATH: 'flux/clusters/homelab/infrastructure/homepage'

jobs:
  # ============================================================================
  # Quick Checks (Fast feedback)
  # ============================================================================
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîç Check for large files
        run: |
          find ${{ env.HOMEPAGE_PATH }} -type f -size +5M -exec ls -lh {} \;
          if [ $(find ${{ env.HOMEPAGE_PATH }} -type f -size +5M | wc -l) -gt 0 ]; then
            echo "‚ùå Large files detected (>5MB)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: üîç Check for secrets
        run: |
          # Check for common secret patterns
          if grep -r -E "(password|secret|key|token).*=.*['\"][^'\"]{20,}" ${{ env.HOMEPAGE_PATH }} --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ö†Ô∏è Potential secrets detected" >> $GITHUB_STEP_SUMMARY
            echo "Please review the detected patterns" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

      - name: üìã Check documentation
        run: |
          echo "### Documentation Status" >> $GITHUB_STEP_SUMMARY
          
          # Check if README exists
          if [ -f "${{ env.HOMEPAGE_PATH }}/README.md" ]; then
            echo "‚úÖ README.md exists" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è README.md missing" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check if test documentation exists
          if [ -f "${{ env.HOMEPAGE_PATH }}/tests/TEST_README.md" ]; then
            echo "‚úÖ Test documentation exists" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Test documentation missing" >> $GITHUB_STEP_SUMMARY
          fi

  # ============================================================================
  # Backend PR Checks
  # ============================================================================
  backend-pr-check:
    name: Backend PR Check
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: ${{ env.HOMEPAGE_PATH }}/api/go.sum

      - name: üì¶ Check dependencies
        working-directory: ${{ env.HOMEPAGE_PATH }}/api
        run: |
          go mod download
          go mod verify
          echo "### Go Dependencies" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ All dependencies verified" >> $GITHUB_STEP_SUMMARY

      - name: üß™ Run tests with race detection
        working-directory: ${{ env.HOMEPAGE_PATH }}/api
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
          echo "### Backend Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "Coverage: $COVERAGE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Package Coverage Details" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          go tool cover -func=coverage.out | grep -E "(handlers|metrics)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: üîç Run go vet
        working-directory: ${{ env.HOMEPAGE_PATH }}/api
        run: go vet ./...

      - name: üîç Check formatting
        working-directory: ${{ env.HOMEPAGE_PATH }}/api
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "‚ùå Code is not formatted" >> $GITHUB_STEP_SUMMARY
            echo "Run: gofmt -s -w ." >> $GITHUB_STEP_SUMMARY
            gofmt -s -l .
            exit 1
          fi
          echo "‚úÖ Code is properly formatted" >> $GITHUB_STEP_SUMMARY

      - name: üîç Check for TODO/FIXME
        working-directory: ${{ env.HOMEPAGE_PATH }}/api
        run: |
          TODOS=$(grep -r "TODO\|FIXME" --include="*.go" . || true)
          if [ -n "$TODOS" ]; then
            echo "### üìù TODOs Found" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$TODOS" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  # ============================================================================
  # Frontend PR Checks
  # ============================================================================
  frontend-pr-check:
    name: Frontend PR Check
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.HOMEPAGE_PATH }}/frontend/package-lock.json

      - name: üì¶ Install dependencies
        working-directory: ${{ env.HOMEPAGE_PATH }}/frontend
        run: |
          npm ci
          echo "### Frontend Dependencies" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Dependencies installed" >> $GITHUB_STEP_SUMMARY

      - name: üß™ Run tests
        working-directory: ${{ env.HOMEPAGE_PATH }}/frontend
        run: |
          npm test -- --coverage --watchAll=false --passWithNoTests
          if [ -f coverage/coverage-summary.json ]; then
            echo "### Frontend Test Coverage" >> $GITHUB_STEP_SUMMARY
            echo "Coverage report generated" >> $GITHUB_STEP_SUMMARY
          fi
        env:
          CI: true

      - name: üîç TypeScript check
        working-directory: ${{ env.HOMEPAGE_PATH }}/frontend
        run: |
          npm run build
          echo "‚úÖ TypeScript compilation successful" >> $GITHUB_STEP_SUMMARY

      - name: üîç Check for console.log
        working-directory: ${{ env.HOMEPAGE_PATH }}/frontend
        run: |
          CONSOLE_LOGS=$(grep -r "console.log\|console.error\|console.warn" src/ --include="*.ts" --include="*.tsx" || true)
          if [ -n "$CONSOLE_LOGS" ]; then
            echo "### ‚ö†Ô∏è Console statements found" >> $GITHUB_STEP_SUMMARY
            echo "Consider removing or replacing with proper logging" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üìä Bundle size check
        working-directory: ${{ env.HOMEPAGE_PATH }}/frontend
        run: |
          DIST_SIZE=$(du -sh dist/ | cut -f1)
          echo "### Bundle Size" >> $GITHUB_STEP_SUMMARY
          echo "Total size: $DIST_SIZE" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # Security Scan
  # ============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: ${{ env.HOMEPAGE_PATH }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: üìä Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: üîç Go security scan
        working-directory: ${{ env.HOMEPAGE_PATH }}/api
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./... || true
        continue-on-error: true

      - name: üîç npm audit
        working-directory: ${{ env.HOMEPAGE_PATH }}/frontend
        run: |
          npm audit --production || true
          echo "### Security Audit" >> $GITHUB_STEP_SUMMARY
          echo "npm audit completed" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

  # ============================================================================
  # PR Summary
  # ============================================================================
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [quick-checks, backend-pr-check, frontend-pr-check, security-scan]
    if: always()
    
    steps:
      - name: üìä Generate PR summary
        run: |
          echo "# üìã PR Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quick Checks | ${{ needs.quick-checks.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.backend-pr-check.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.frontend-pr-check.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '‚úÖ' || '‚ö†Ô∏è' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.quick-checks.result }}" == "success" ] && \
             [ "${{ needs.backend-pr-check.result }}" == "success" ] && \
             [ "${{ needs.frontend-pr-check.result }}" == "success" ]; then
            echo "### ‚úÖ PR is ready to merge!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå PR needs attention" >> $GITHUB_STEP_SUMMARY
          fi

      - name: ‚ùå Fail if critical checks failed
        if: needs.quick-checks.result != 'success' || needs.backend-pr-check.result != 'success' || needs.frontend-pr-check.result != 'success'
        run: exit 1

