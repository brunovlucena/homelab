# üîí Image Security Scanning Pipeline
#
# This workflow performs comprehensive security scanning on all homelab images
# including vulnerability scanning, compliance checks, and security reporting.

name: "üîí Image Security Scanning"

on:
  push:
    branches: [main, master]
    paths:
      - 'flux/clusters/homelab/infrastructure/**/Dockerfile'
      - 'flux/clusters/homelab/infrastructure/**/requirements.txt'
      - 'flux/clusters/homelab/infrastructure/**/pyproject.toml'
  pull_request:
    branches: [main, master]
    paths:
      - 'flux/clusters/homelab/infrastructure/**/Dockerfile'
      - 'flux/clusters/homelab/infrastructure/**/requirements.txt'
      - 'flux/clusters/homelab/infrastructure/**/pyproject.toml'
  schedule:
    # Run daily at 4 AM UTC for continuous security monitoring
    - cron: '0 4 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - vulnerabilities
          - compliance
          - secrets

env:
  REGISTRY: ghcr.io/brunovlucena
  IMAGE_TAG_DEV: dev
  IMAGE_TAG_PRD: latest

jobs:
  # üîç Detect Images to Scan
  detect-images:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.images.outputs.list }}
      count: ${{ steps.images.outputs.count }}
    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4

      - name: "üîç Detect Images to Scan"
        id: images
        run: |
          echo "üîç Detecting images to scan..."
          
          # Find all Dockerfiles and determine image names
          images=()
          
          # Homepage API
          if [ -f "flux/clusters/homelab/infrastructure/homepage/api/Dockerfile" ]; then
            images+=("bruno-site-api")
          fi
          
          # Homepage Frontend
          if [ -f "flux/clusters/homelab/infrastructure/homepage/frontend/Dockerfile" ]; then
            images+=("bruno-site-frontend")
          fi
          
          # Agent Legacy
          if [ -f "flux/clusters/homelab/infrastructure/agent-legacy/Dockerfile" ]; then
            images+=("agent-legacy")
          fi
          
          # Agent SRE
          if [ -f "flux/clusters/homelab/infrastructure/agent-sre/Dockerfile" ]; then
            images+=("agent-sre")
          fi
          
          # Convert array to JSON
          if [ ${#images[@]} -eq 0 ]; then
            images_json="[]"
          else
            images_json=$(printf '%s\n' "${images[@]}" | jq -R . | jq -s .)
          fi
          echo "list<<EOF" >> $GITHUB_OUTPUT
          echo "$images_json" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "count=${#images[@]}" >> $GITHUB_OUTPUT
          
          echo "üìã Images to scan: ${images[*]}"

  # üîí Vulnerability Scanning
  vulnerability-scan:
    needs: detect-images
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'vulnerabilities' || github.event.inputs.scan_type == ''
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson(needs.detect-images.outputs.images) }}
    steps:
      - name: "üîë Login to GitHub Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "üîí Run Trivy Vulnerability Scan"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ matrix.image }}:${{ env.IMAGE_TAG_DEV }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.image }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          skip-version-check: 'true'
          exit-code: '0'

      - name: "üìä Upload Trivy Scan Results"
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.image }}.sarif'

      - name: "üìã Generate Vulnerability Report"
        run: |
          echo "## üîí Vulnerability Scan Results for ${{ matrix.image }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ matrix.image }}:${{ env.IMAGE_TAG_DEV }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Type:** Vulnerability Assessment" >> $GITHUB_STEP_SUMMARY
          echo "**Severity Levels:** CRITICAL, HIGH, MEDIUM" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Scan completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "üìä Results uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY

  # üõ°Ô∏è Compliance Scanning
  compliance-scan:
    needs: detect-images
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'compliance' || github.event.inputs.scan_type == ''
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson(needs.detect-images.outputs.images) }}
    steps:
      - name: "üîë Login to GitHub Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "üõ°Ô∏è Run Trivy Compliance Scan"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ matrix.image }}:${{ env.IMAGE_TAG_DEV }}
          format: 'json'
          output: 'compliance-results-${{ matrix.image }}.json'
          scanners: 'config,secret'
          skip-version-check: 'true'
          exit-code: '0'

      - name: "üìã Generate Compliance Report"
        run: |
          echo "## üõ°Ô∏è Compliance Scan Results for ${{ matrix.image }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ matrix.image }}:${{ env.IMAGE_TAG_DEV }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Type:** Configuration & Compliance" >> $GITHUB_STEP_SUMMARY
          echo "**Scanners:** Config, Secret" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Compliance scan completed" >> $GITHUB_STEP_SUMMARY

  # üîç Secret Scanning
  secret-scan:
    needs: detect-images
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == ''
    runs-on: ubuntu-latest
    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4

      - name: "üîç Run TruffleHog Secret Scan"
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: "üìã Generate Secret Scan Report"
        run: |
          echo "## üîç Secret Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Type:** Secret Detection" >> $GITHUB_STEP_SUMMARY
          echo "**Tool:** TruffleHog" >> $GITHUB_STEP_SUMMARY
          echo "**Scope:** Repository-wide" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Secret scan completed" >> $GITHUB_STEP_SUMMARY

  # üìä Security Summary
  security-summary:
    needs: [detect-images, vulnerability-scan, compliance-scan, secret-scan]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: "üìä Generate Security Summary"
        run: |
          echo "## üîí Homelab Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Information:**" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Scan Type: ${{ github.event.inputs.scan_type || 'full' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Images Scanned: ${{ needs.detect-images.outputs.count }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Results:**" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Vulnerability Scan | ${{ needs.vulnerability-scan.result == 'success' && '‚úÖ Completed' || needs.vulnerability-scan.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} | Trivy vulnerability assessment |" >> $GITHUB_STEP_SUMMARY
          echo "| Compliance Scan | ${{ needs.compliance-scan.result == 'success' && '‚úÖ Completed' || needs.compliance-scan.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} | Configuration & compliance check |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '‚úÖ Completed' || needs.secret-scan.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} | TruffleHog secret detection |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scanned Images:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '${{ needs.detect-images.outputs.images }}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Review security findings in GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          echo "- Address critical and high severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Update base images and dependencies as needed" >> $GITHUB_STEP_SUMMARY
          echo "- Implement security recommendations" >> $GITHUB_STEP_SUMMARY
